(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
    var shaka = require('../node_modules/shaka-player/shaka-player.compiled.js');
    var videojs =  require('../node_modules/video.js/dist/video.js');
    require('../node_modules/videojs-shaka-player/src/videojs.shaka.dev.js');
    require('../node_modules/keymaster/keymaster.js');
    require('../src/vjs-pl-common/videojs-ga.js');
    require('../src/vjs-pl-common/videojs-showcontrolbar.js');
    require('../src/vjs-pl-common/videojs-thumbnails.js');
    require('../src/vjs-pl-common/videojs-timerevent.js');
    require('../src/vjs-pl-shaka/videojs-langselector-shaka.js');

},{"../node_modules/keymaster/keymaster.js":12,"../node_modules/shaka-player/shaka-player.compiled.js":151,"../node_modules/video.js/dist/video.js":157,"../node_modules/videojs-shaka-player/src/videojs.shaka.dev.js":158,"../src/vjs-pl-common/videojs-ga.js":185,"../src/vjs-pl-common/videojs-showcontrolbar.js":186,"../src/vjs-pl-common/videojs-thumbnails.js":187,"../src/vjs-pl-common/videojs-timerevent.js":188,"../src/vjs-pl-shaka/videojs-langselector-shaka.js":189}],2:[function(require,module,exports){
    'use strict'

    exports.toByteArray = toByteArray
    exports.fromByteArray = fromByteArray

    var lookup = []
    var revLookup = []
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

    function init () {
        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
        for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i]
            revLookup[code.charCodeAt(i)] = i
        }

        revLookup['-'.charCodeAt(0)] = 62
        revLookup['_'.charCodeAt(0)] = 63
    }

    init()

    function toByteArray (b64) {
        var i, j, l, tmp, placeHolders, arr
        var len = b64.length

        if (len % 4 > 0) {
            throw new Error('Invalid string. Length must be a multiple of 4')
        }

        // the number of equal signs (place holders)
        // if there are two placeholders, than the two characters before it
        // represent one byte
        // if there is only one, then the three characters before it represent 2 bytes
        // this is just a cheap hack to not do indexOf twice
        placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0

        // base64 is 4/3 + up to two characters of the original data
        arr = new Arr(len * 3 / 4 - placeHolders)

        // if there are placeholders, only get up to the last complete 4 chars
        l = placeHolders > 0 ? len - 4 : len

        var L = 0

        for (i = 0, j = 0; i < l; i += 4, j += 3) {
            tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
            arr[L++] = (tmp >> 16) & 0xFF
            arr[L++] = (tmp >> 8) & 0xFF
            arr[L++] = tmp & 0xFF
        }

        if (placeHolders === 2) {
            tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
            arr[L++] = tmp & 0xFF
        } else if (placeHolders === 1) {
            tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
            arr[L++] = (tmp >> 8) & 0xFF
            arr[L++] = tmp & 0xFF
        }

        return arr
    }

    function tripletToBase64 (num) {
        return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
        var tmp
        var output = []
        for (var i = start; i < end; i += 3) {
            tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
            output.push(tripletToBase64(tmp))
        }
        return output.join('')
    }

    function fromByteArray (uint8) {
        var tmp
        var len = uint8.length
        var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
        var output = ''
        var parts = []
        var maxChunkLength = 16383 // must be multiple of 3

        // go through the array every three bytes, we'll deal with trailing stuff later
        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
            parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
        }

        // pad the end with zeros, but make sure to not forget the extra bytes
        if (extraBytes === 1) {
            tmp = uint8[len - 1]
            output += lookup[tmp >> 2]
            output += lookup[(tmp << 4) & 0x3F]
            output += '=='
        } else if (extraBytes === 2) {
            tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
            output += lookup[tmp >> 10]
            output += lookup[(tmp >> 4) & 0x3F]
            output += lookup[(tmp << 2) & 0x3F]
            output += '='
        }

        parts.push(output)

        return parts.join('')
    }

},{}],3:[function(require,module,exports){

},{}],4:[function(require,module,exports){
// shim for using process in browser

    var process = module.exports = {};
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = setTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        clearTimeout(timeout);
    }

    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            setTimeout(drainQueue, 0);
        }
    };

// v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;

    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };

    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function() { return 0; };

},{}],5:[function(require,module,exports){
    (function (global){
        /*!
         * The buffer module from node.js, for the browser.
         *
         * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
         * @license  MIT
         */
        /* eslint-disable no-proto */

        'use strict'

        var base64 = require('base64-js')
        var ieee754 = require('ieee754')
        var isArray = require('isarray')

        exports.Buffer = Buffer
        exports.SlowBuffer = SlowBuffer
        exports.INSPECT_MAX_BYTES = 50

        /**
         * If `Buffer.TYPED_ARRAY_SUPPORT`:
         *   === true    Use Uint8Array implementation (fastest)
         *   === false   Use Object implementation (most compatible, even IE6)
         *
         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
         * Opera 11.6+, iOS 4.2+.
         *
         * Due to various browser bugs, sometimes the Object implementation will be used even
         * when the browser supports typed arrays.
         *
         * Note:
         *
         *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
         *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
         *
         *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
         *
         *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
         *     incorrect length in some situations.

         * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
         * get the Object implementation, which is slower but behaves correctly.
         */
        Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
            ? global.TYPED_ARRAY_SUPPORT
            : typedArraySupport()

        /*
         * Export kMaxLength after typed array support is determined.
         */
        exports.kMaxLength = kMaxLength()

        function typedArraySupport () {
            try {
                var arr = new Uint8Array(1)
                arr.foo = function () { return 42 }
                return arr.foo() === 42 && // typed array instances can be augmented
                    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
                    arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
            } catch (e) {
                return false
            }
        }

        function kMaxLength () {
            return Buffer.TYPED_ARRAY_SUPPORT
                ? 0x7fffffff
                : 0x3fffffff
        }

        function createBuffer (that, length) {
            if (kMaxLength() < length) {
                throw new RangeError('Invalid typed array length')
            }
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                // Return an augmented `Uint8Array` instance, for best performance
                that = new Uint8Array(length)
                that.__proto__ = Buffer.prototype
            } else {
                // Fallback: Return an object instance of the Buffer class
                if (that === null) {
                    that = new Buffer(length)
                }
                that.length = length
            }

            return that
        }

        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */

        function Buffer (arg, encodingOrOffset, length) {
            if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
                return new Buffer(arg, encodingOrOffset, length)
            }

            // Common case.
            if (typeof arg === 'number') {
                if (typeof encodingOrOffset === 'string') {
                    throw new Error(
                        'If encoding is specified then the first argument must be a string'
                    )
                }
                return allocUnsafe(this, arg)
            }
            return from(this, arg, encodingOrOffset, length)
        }

        Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
        Buffer._augment = function (arr) {
            arr.__proto__ = Buffer.prototype
            return arr
        }

        function from (that, value, encodingOrOffset, length) {
            if (typeof value === 'number') {
                throw new TypeError('"value" argument must not be a number')
            }

            if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
                return fromArrayBuffer(that, value, encodingOrOffset, length)
            }

            if (typeof value === 'string') {
                return fromString(that, value, encodingOrOffset)
            }

            return fromObject(that, value)
        }

        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/
        Buffer.from = function (value, encodingOrOffset, length) {
            return from(null, value, encodingOrOffset, length)
        }

        if (Buffer.TYPED_ARRAY_SUPPORT) {
            Buffer.prototype.__proto__ = Uint8Array.prototype
            Buffer.__proto__ = Uint8Array
            if (typeof Symbol !== 'undefined' && Symbol.species &&
                Buffer[Symbol.species] === Buffer) {
                // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
                Object.defineProperty(Buffer, Symbol.species, {
                    value: null,
                    configurable: true
                })
            }
        }

        function assertSize (size) {
            if (typeof size !== 'number') {
                throw new TypeError('"size" argument must be a number')
            }
        }

        function alloc (that, size, fill, encoding) {
            assertSize(size)
            if (size <= 0) {
                return createBuffer(that, size)
            }
            if (fill !== undefined) {
                // Only pay attention to encoding if it's a string. This
                // prevents accidentally sending in a number that would
                // be interpretted as a start offset.
                return typeof encoding === 'string'
                    ? createBuffer(that, size).fill(fill, encoding)
                    : createBuffer(that, size).fill(fill)
            }
            return createBuffer(that, size)
        }

        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/
        Buffer.alloc = function (size, fill, encoding) {
            return alloc(null, size, fill, encoding)
        }

        function allocUnsafe (that, size) {
            assertSize(size)
            that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
            if (!Buffer.TYPED_ARRAY_SUPPORT) {
                for (var i = 0; i < size; i++) {
                    that[i] = 0
                }
            }
            return that
        }

        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */
        Buffer.allocUnsafe = function (size) {
            return allocUnsafe(null, size)
        }
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */
        Buffer.allocUnsafeSlow = function (size) {
            return allocUnsafe(null, size)
        }

        function fromString (that, string, encoding) {
            if (typeof encoding !== 'string' || encoding === '') {
                encoding = 'utf8'
            }

            if (!Buffer.isEncoding(encoding)) {
                throw new TypeError('"encoding" must be a valid string encoding')
            }

            var length = byteLength(string, encoding) | 0
            that = createBuffer(that, length)

            that.write(string, encoding)
            return that
        }

        function fromArrayLike (that, array) {
            var length = checked(array.length) | 0
            that = createBuffer(that, length)
            for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255
            }
            return that
        }

        function fromArrayBuffer (that, array, byteOffset, length) {
            array.byteLength // this throws if `array` is not a valid ArrayBuffer

            if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('\'offset\' is out of bounds')
            }

            if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('\'length\' is out of bounds')
            }

            if (length === undefined) {
                array = new Uint8Array(array, byteOffset)
            } else {
                array = new Uint8Array(array, byteOffset, length)
            }

            if (Buffer.TYPED_ARRAY_SUPPORT) {
                // Return an augmented `Uint8Array` instance, for best performance
                that = array
                that.__proto__ = Buffer.prototype
            } else {
                // Fallback: Return an object instance of the Buffer class
                that = fromArrayLike(that, array)
            }
            return that
        }

        function fromObject (that, obj) {
            if (Buffer.isBuffer(obj)) {
                var len = checked(obj.length) | 0
                that = createBuffer(that, len)

                if (that.length === 0) {
                    return that
                }

                obj.copy(that, 0, 0, len)
                return that
            }

            if (obj) {
                if ((typeof ArrayBuffer !== 'undefined' &&
                    obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
                    if (typeof obj.length !== 'number' || isnan(obj.length)) {
                        return createBuffer(that, 0)
                    }
                    return fromArrayLike(that, obj)
                }

                if (obj.type === 'Buffer' && isArray(obj.data)) {
                    return fromArrayLike(that, obj.data)
                }
            }

            throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
        }

        function checked (length) {
            // Note: cannot use `length < kMaxLength` here because that fails when
            // length is NaN (which is otherwise coerced to zero.)
            if (length >= kMaxLength()) {
                throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                    'size: 0x' + kMaxLength().toString(16) + ' bytes')
            }
            return length | 0
        }

        function SlowBuffer (length) {
            if (+length != length) { // eslint-disable-line eqeqeq
                length = 0
            }
            return Buffer.alloc(+length)
        }

        Buffer.isBuffer = function isBuffer (b) {
            return !!(b != null && b._isBuffer)
        }

        Buffer.compare = function compare (a, b) {
            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                throw new TypeError('Arguments must be Buffers')
            }

            if (a === b) return 0

            var x = a.length
            var y = b.length

            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                    x = a[i]
                    y = b[i]
                    break
                }
            }

            if (x < y) return -1
            if (y < x) return 1
            return 0
        }

        Buffer.isEncoding = function isEncoding (encoding) {
            switch (String(encoding).toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'binary':
                case 'base64':
                case 'raw':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                    return true
                default:
                    return false
            }
        }

        Buffer.concat = function concat (list, length) {
            if (!isArray(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers')
            }

            if (list.length === 0) {
                return Buffer.alloc(0)
            }

            var i
            if (length === undefined) {
                length = 0
                for (i = 0; i < list.length; i++) {
                    length += list[i].length
                }
            }

            var buffer = Buffer.allocUnsafe(length)
            var pos = 0
            for (i = 0; i < list.length; i++) {
                var buf = list[i]
                if (!Buffer.isBuffer(buf)) {
                    throw new TypeError('"list" argument must be an Array of Buffers')
                }
                buf.copy(buffer, pos)
                pos += buf.length
            }
            return buffer
        }

        function byteLength (string, encoding) {
            if (Buffer.isBuffer(string)) {
                return string.length
            }
            if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
                (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
                return string.byteLength
            }
            if (typeof string !== 'string') {
                string = '' + string
            }

            var len = string.length
            if (len === 0) return 0

            // Use a for loop to avoid recursion
            var loweredCase = false
            for (;;) {
                switch (encoding) {
                    case 'ascii':
                    case 'binary':
                    // Deprecated
                    case 'raw':
                    case 'raws':
                        return len
                    case 'utf8':
                    case 'utf-8':
                    case undefined:
                        return utf8ToBytes(string).length
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return len * 2
                    case 'hex':
                        return len >>> 1
                    case 'base64':
                        return base64ToBytes(string).length
                    default:
                        if (loweredCase) return utf8ToBytes(string).length // assume utf8
                        encoding = ('' + encoding).toLowerCase()
                        loweredCase = true
                }
            }
        }
        Buffer.byteLength = byteLength

        function slowToString (encoding, start, end) {
            var loweredCase = false

            // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
            // property of a typed array.

            // This behaves neither like String nor Uint8Array in that we set start/end
            // to their upper/lower bounds if the value passed is out of range.
            // undefined is handled specially as per ECMA-262 6th Edition,
            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
            if (start === undefined || start < 0) {
                start = 0
            }
            // Return early if start > this.length. Done here to prevent potential uint32
            // coercion fail below.
            if (start > this.length) {
                return ''
            }

            if (end === undefined || end > this.length) {
                end = this.length
            }

            if (end <= 0) {
                return ''
            }

            // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
            end >>>= 0
            start >>>= 0

            if (end <= start) {
                return ''
            }

            if (!encoding) encoding = 'utf8'

            while (true) {
                switch (encoding) {
                    case 'hex':
                        return hexSlice(this, start, end)

                    case 'utf8':
                    case 'utf-8':
                        return utf8Slice(this, start, end)

                    case 'ascii':
                        return asciiSlice(this, start, end)

                    case 'binary':
                        return binarySlice(this, start, end)

                    case 'base64':
                        return base64Slice(this, start, end)

                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return utf16leSlice(this, start, end)

                    default:
                        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                        encoding = (encoding + '').toLowerCase()
                        loweredCase = true
                }
            }
        }

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
        Buffer.prototype._isBuffer = true

        function swap (b, n, m) {
            var i = b[n]
            b[n] = b[m]
            b[m] = i
        }

        Buffer.prototype.swap16 = function swap16 () {
            var len = this.length
            if (len % 2 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 16-bits')
            }
            for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1)
            }
            return this
        }

        Buffer.prototype.swap32 = function swap32 () {
            var len = this.length
            if (len % 4 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 32-bits')
            }
            for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3)
                swap(this, i + 1, i + 2)
            }
            return this
        }

        Buffer.prototype.toString = function toString () {
            var length = this.length | 0
            if (length === 0) return ''
            if (arguments.length === 0) return utf8Slice(this, 0, length)
            return slowToString.apply(this, arguments)
        }

        Buffer.prototype.equals = function equals (b) {
            if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
            if (this === b) return true
            return Buffer.compare(this, b) === 0
        }

        Buffer.prototype.inspect = function inspect () {
            var str = ''
            var max = exports.INSPECT_MAX_BYTES
            if (this.length > 0) {
                str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
                if (this.length > max) str += ' ... '
            }
            return '<Buffer ' + str + '>'
        }

        Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
            if (!Buffer.isBuffer(target)) {
                throw new TypeError('Argument must be a Buffer')
            }

            if (start === undefined) {
                start = 0
            }
            if (end === undefined) {
                end = target ? target.length : 0
            }
            if (thisStart === undefined) {
                thisStart = 0
            }
            if (thisEnd === undefined) {
                thisEnd = this.length
            }

            if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError('out of range index')
            }

            if (thisStart >= thisEnd && start >= end) {
                return 0
            }
            if (thisStart >= thisEnd) {
                return -1
            }
            if (start >= end) {
                return 1
            }

            start >>>= 0
            end >>>= 0
            thisStart >>>= 0
            thisEnd >>>= 0

            if (this === target) return 0

            var x = thisEnd - thisStart
            var y = end - start
            var len = Math.min(x, y)

            var thisCopy = this.slice(thisStart, thisEnd)
            var targetCopy = target.slice(start, end)

            for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                    x = thisCopy[i]
                    y = targetCopy[i]
                    break
                }
            }

            if (x < y) return -1
            if (y < x) return 1
            return 0
        }

        function arrayIndexOf (arr, val, byteOffset, encoding) {
            var indexSize = 1
            var arrLength = arr.length
            var valLength = val.length

            if (encoding !== undefined) {
                encoding = String(encoding).toLowerCase()
                if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                    encoding === 'utf16le' || encoding === 'utf-16le') {
                    if (arr.length < 2 || val.length < 2) {
                        return -1
                    }
                    indexSize = 2
                    arrLength /= 2
                    valLength /= 2
                    byteOffset /= 2
                }
            }

            function read (buf, i) {
                if (indexSize === 1) {
                    return buf[i]
                } else {
                    return buf.readUInt16BE(i * indexSize)
                }
            }

            var foundIndex = -1
            for (var i = 0; byteOffset + i < arrLength; i++) {
                if (read(arr, byteOffset + i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1) foundIndex = i
                    if (i - foundIndex + 1 === valLength) return (byteOffset + foundIndex) * indexSize
                } else {
                    if (foundIndex !== -1) i -= i - foundIndex
                    foundIndex = -1
                }
            }
            return -1
        }

        Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
            if (typeof byteOffset === 'string') {
                encoding = byteOffset
                byteOffset = 0
            } else if (byteOffset > 0x7fffffff) {
                byteOffset = 0x7fffffff
            } else if (byteOffset < -0x80000000) {
                byteOffset = -0x80000000
            }
            byteOffset >>= 0

            if (this.length === 0) return -1
            if (byteOffset >= this.length) return -1

            // Negative offsets start from the end of the buffer
            if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

            if (typeof val === 'string') {
                val = Buffer.from(val, encoding)
            }

            if (Buffer.isBuffer(val)) {
                // special case: looking for empty string/buffer always fails
                if (val.length === 0) {
                    return -1
                }
                return arrayIndexOf(this, val, byteOffset, encoding)
            }
            if (typeof val === 'number') {
                if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
                    return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
                }
                return arrayIndexOf(this, [ val ], byteOffset, encoding)
            }

            throw new TypeError('val must be string, number or Buffer')
        }

        Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
            return this.indexOf(val, byteOffset, encoding) !== -1
        }

        function hexWrite (buf, string, offset, length) {
            offset = Number(offset) || 0
            var remaining = buf.length - offset
            if (!length) {
                length = remaining
            } else {
                length = Number(length)
                if (length > remaining) {
                    length = remaining
                }
            }

            // must be an even number of digits
            var strLen = string.length
            if (strLen % 2 !== 0) throw new Error('Invalid hex string')

            if (length > strLen / 2) {
                length = strLen / 2
            }
            for (var i = 0; i < length; i++) {
                var parsed = parseInt(string.substr(i * 2, 2), 16)
                if (isNaN(parsed)) return i
                buf[offset + i] = parsed
            }
            return i
        }

        function utf8Write (buf, string, offset, length) {
            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
        }

        function asciiWrite (buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length)
        }

        function binaryWrite (buf, string, offset, length) {
            return asciiWrite(buf, string, offset, length)
        }

        function base64Write (buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length)
        }

        function ucs2Write (buf, string, offset, length) {
            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
        }

        Buffer.prototype.write = function write (string, offset, length, encoding) {
            // Buffer#write(string)
            if (offset === undefined) {
                encoding = 'utf8'
                length = this.length
                offset = 0
                // Buffer#write(string, encoding)
            } else if (length === undefined && typeof offset === 'string') {
                encoding = offset
                length = this.length
                offset = 0
                // Buffer#write(string, offset[, length][, encoding])
            } else if (isFinite(offset)) {
                offset = offset | 0
                if (isFinite(length)) {
                    length = length | 0
                    if (encoding === undefined) encoding = 'utf8'
                } else {
                    encoding = length
                    length = undefined
                }
                // legacy write(string, encoding, offset, length) - remove in v0.13
            } else {
                throw new Error(
                    'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                )
            }

            var remaining = this.length - offset
            if (length === undefined || length > remaining) length = remaining

            if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                throw new RangeError('Attempt to write outside buffer bounds')
            }

            if (!encoding) encoding = 'utf8'

            var loweredCase = false
            for (;;) {
                switch (encoding) {
                    case 'hex':
                        return hexWrite(this, string, offset, length)

                    case 'utf8':
                    case 'utf-8':
                        return utf8Write(this, string, offset, length)

                    case 'ascii':
                        return asciiWrite(this, string, offset, length)

                    case 'binary':
                        return binaryWrite(this, string, offset, length)

                    case 'base64':
                        // Warning: maxLength not taken into account in base64Write
                        return base64Write(this, string, offset, length)

                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return ucs2Write(this, string, offset, length)

                    default:
                        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                        encoding = ('' + encoding).toLowerCase()
                        loweredCase = true
                }
            }
        }

        Buffer.prototype.toJSON = function toJSON () {
            return {
                type: 'Buffer',
                data: Array.prototype.slice.call(this._arr || this, 0)
            }
        }

        function base64Slice (buf, start, end) {
            if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf)
            } else {
                return base64.fromByteArray(buf.slice(start, end))
            }
        }

        function utf8Slice (buf, start, end) {
            end = Math.min(buf.length, end)
            var res = []

            var i = start
            while (i < end) {
                var firstByte = buf[i]
                var codePoint = null
                var bytesPerSequence = (firstByte > 0xEF) ? 4
                    : (firstByte > 0xDF) ? 3
                    : (firstByte > 0xBF) ? 2
                    : 1

                if (i + bytesPerSequence <= end) {
                    var secondByte, thirdByte, fourthByte, tempCodePoint

                    switch (bytesPerSequence) {
                        case 1:
                            if (firstByte < 0x80) {
                                codePoint = firstByte
                            }
                            break
                        case 2:
                            secondByte = buf[i + 1]
                            if ((secondByte & 0xC0) === 0x80) {
                                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                                if (tempCodePoint > 0x7F) {
                                    codePoint = tempCodePoint
                                }
                            }
                            break
                        case 3:
                            secondByte = buf[i + 1]
                            thirdByte = buf[i + 2]
                            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                                    codePoint = tempCodePoint
                                }
                            }
                            break
                        case 4:
                            secondByte = buf[i + 1]
                            thirdByte = buf[i + 2]
                            fourthByte = buf[i + 3]
                            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                                    codePoint = tempCodePoint
                                }
                            }
                    }
                }

                if (codePoint === null) {
                    // we did not generate a valid codePoint so insert a
                    // replacement char (U+FFFD) and advance only 1 byte
                    codePoint = 0xFFFD
                    bytesPerSequence = 1
                } else if (codePoint > 0xFFFF) {
                    // encode to utf16 (surrogate pair dance)
                    codePoint -= 0x10000
                    res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                    codePoint = 0xDC00 | codePoint & 0x3FF
                }

                res.push(codePoint)
                i += bytesPerSequence
            }

            return decodeCodePointsArray(res)
        }

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
        var MAX_ARGUMENTS_LENGTH = 0x1000

        function decodeCodePointsArray (codePoints) {
            var len = codePoints.length
            if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
            }

            // Decode in chunks to avoid "call stack size exceeded".
            var res = ''
            var i = 0
            while (i < len) {
                res += String.fromCharCode.apply(
                    String,
                    codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                )
            }
            return res
        }

        function asciiSlice (buf, start, end) {
            var ret = ''
            end = Math.min(buf.length, end)

            for (var i = start; i < end; i++) {
                ret += String.fromCharCode(buf[i] & 0x7F)
            }
            return ret
        }

        function binarySlice (buf, start, end) {
            var ret = ''
            end = Math.min(buf.length, end)

            for (var i = start; i < end; i++) {
                ret += String.fromCharCode(buf[i])
            }
            return ret
        }

        function hexSlice (buf, start, end) {
            var len = buf.length

            if (!start || start < 0) start = 0
            if (!end || end < 0 || end > len) end = len

            var out = ''
            for (var i = start; i < end; i++) {
                out += toHex(buf[i])
            }
            return out
        }

        function utf16leSlice (buf, start, end) {
            var bytes = buf.slice(start, end)
            var res = ''
            for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
            }
            return res
        }

        Buffer.prototype.slice = function slice (start, end) {
            var len = this.length
            start = ~~start
            end = end === undefined ? len : ~~end

            if (start < 0) {
                start += len
                if (start < 0) start = 0
            } else if (start > len) {
                start = len
            }

            if (end < 0) {
                end += len
                if (end < 0) end = 0
            } else if (end > len) {
                end = len
            }

            if (end < start) end = start

            var newBuf
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                newBuf = this.subarray(start, end)
                newBuf.__proto__ = Buffer.prototype
            } else {
                var sliceLen = end - start
                newBuf = new Buffer(sliceLen, undefined)
                for (var i = 0; i < sliceLen; i++) {
                    newBuf[i] = this[i + start]
                }
            }

            return newBuf
        }

        /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */
        function checkOffset (offset, ext, length) {
            if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
            if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
        }

        Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var val = this[offset]
            var mul = 1
            var i = 0
            while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul
            }

            return val
        }

        Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) {
                checkOffset(offset, byteLength, this.length)
            }

            var val = this[offset + --byteLength]
            var mul = 1
            while (byteLength > 0 && (mul *= 0x100)) {
                val += this[offset + --byteLength] * mul
            }

            return val
        }

        Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length)
            return this[offset]
        }

        Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length)
            return this[offset] | (this[offset + 1] << 8)
        }

        Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length)
            return (this[offset] << 8) | this[offset + 1]
        }

        Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)

            return ((this[offset]) |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16)) +
                (this[offset + 3] * 0x1000000)
        }

        Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset] * 0x1000000) +
                ((this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3])
        }

        Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var val = this[offset]
            var mul = 1
            var i = 0
            while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul
            }
            mul *= 0x80

            if (val >= mul) val -= Math.pow(2, 8 * byteLength)

            return val
        }

        Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var i = byteLength
            var mul = 1
            var val = this[offset + --i]
            while (i > 0 && (mul *= 0x100)) {
                val += this[offset + --i] * mul
            }
            mul *= 0x80

            if (val >= mul) val -= Math.pow(2, 8 * byteLength)

            return val
        }

        Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length)
            if (!(this[offset] & 0x80)) return (this[offset])
            return ((0xff - this[offset] + 1) * -1)
        }

        Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length)
            var val = this[offset] | (this[offset + 1] << 8)
            return (val & 0x8000) ? val | 0xFFFF0000 : val
        }

        Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length)
            var val = this[offset + 1] | (this[offset] << 8)
            return (val & 0x8000) ? val | 0xFFFF0000 : val
        }

        Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset]) |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16) |
                (this[offset + 3] << 24)
        }

        Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset] << 24) |
                (this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                (this[offset + 3])
        }

        Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)
            return ieee754.read(this, offset, true, 23, 4)
        }

        Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)
            return ieee754.read(this, offset, false, 23, 4)
        }

        Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 8, this.length)
            return ieee754.read(this, offset, true, 52, 8)
        }

        Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
            if (!noAssert) checkOffset(offset, 8, this.length)
            return ieee754.read(this, offset, false, 52, 8)
        }

        function checkInt (buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
            if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
            if (offset + ext > buf.length) throw new RangeError('Index out of range')
        }

        Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
            value = +value
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1
                checkInt(this, value, offset, byteLength, maxBytes, 0)
            }

            var mul = 1
            var i = 0
            this[offset] = value & 0xFF
            while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF
            }

            return offset + byteLength
        }

        Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
            value = +value
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1
                checkInt(this, value, offset, byteLength, maxBytes, 0)
            }

            var i = byteLength - 1
            var mul = 1
            this[offset + i] = value & 0xFF
            while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF
            }

            return offset + byteLength
        }

        Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
            this[offset] = (value & 0xff)
            return offset + 1
        }

        function objectWriteUInt16 (buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffff + value + 1
            for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
                buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
                    (littleEndian ? i : 1 - i) * 8
            }
        }

        Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value & 0xff)
                this[offset + 1] = (value >>> 8)
            } else {
                objectWriteUInt16(this, value, offset, true)
            }
            return offset + 2
        }

        Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 8)
                this[offset + 1] = (value & 0xff)
            } else {
                objectWriteUInt16(this, value, offset, false)
            }
            return offset + 2
        }

        function objectWriteUInt32 (buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffffffff + value + 1
            for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
                buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
            }
        }

        Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset + 3] = (value >>> 24)
                this[offset + 2] = (value >>> 16)
                this[offset + 1] = (value >>> 8)
                this[offset] = (value & 0xff)
            } else {
                objectWriteUInt32(this, value, offset, true)
            }
            return offset + 4
        }

        Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 24)
                this[offset + 1] = (value >>> 16)
                this[offset + 2] = (value >>> 8)
                this[offset + 3] = (value & 0xff)
            } else {
                objectWriteUInt32(this, value, offset, false)
            }
            return offset + 4
        }

        Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1)

                checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }

            var i = 0
            var mul = 1
            var sub = 0
            this[offset] = value & 0xFF
            while (++i < byteLength && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                    sub = 1
                }
                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
            }

            return offset + byteLength
        }

        Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1)

                checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }

            var i = byteLength - 1
            var mul = 1
            var sub = 0
            this[offset + i] = value & 0xFF
            while (--i >= 0 && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                    sub = 1
                }
                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
            }

            return offset + byteLength
        }

        Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
            if (value < 0) value = 0xff + value + 1
            this[offset] = (value & 0xff)
            return offset + 1
        }

        Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value & 0xff)
                this[offset + 1] = (value >>> 8)
            } else {
                objectWriteUInt16(this, value, offset, true)
            }
            return offset + 2
        }

        Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 8)
                this[offset + 1] = (value & 0xff)
            } else {
                objectWriteUInt16(this, value, offset, false)
            }
            return offset + 2
        }

        Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value & 0xff)
                this[offset + 1] = (value >>> 8)
                this[offset + 2] = (value >>> 16)
                this[offset + 3] = (value >>> 24)
            } else {
                objectWriteUInt32(this, value, offset, true)
            }
            return offset + 4
        }

        Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
            if (value < 0) value = 0xffffffff + value + 1
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 24)
                this[offset + 1] = (value >>> 16)
                this[offset + 2] = (value >>> 8)
                this[offset + 3] = (value & 0xff)
            } else {
                objectWriteUInt32(this, value, offset, false)
            }
            return offset + 4
        }

        function checkIEEE754 (buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length) throw new RangeError('Index out of range')
            if (offset < 0) throw new RangeError('Index out of range')
        }

        function writeFloat (buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
                checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
            }
            ieee754.write(buf, value, offset, littleEndian, 23, 4)
            return offset + 4
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
            return writeFloat(this, value, offset, true, noAssert)
        }

        Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
            return writeFloat(this, value, offset, false, noAssert)
        }

        function writeDouble (buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
                checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
            }
            ieee754.write(buf, value, offset, littleEndian, 52, 8)
            return offset + 8
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
            return writeDouble(this, value, offset, true, noAssert)
        }

        Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
            return writeDouble(this, value, offset, false, noAssert)
        }

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
        Buffer.prototype.copy = function copy (target, targetStart, start, end) {
            if (!start) start = 0
            if (!end && end !== 0) end = this.length
            if (targetStart >= target.length) targetStart = target.length
            if (!targetStart) targetStart = 0
            if (end > 0 && end < start) end = start

            // Copy 0 bytes; we're done
            if (end === start) return 0
            if (target.length === 0 || this.length === 0) return 0

            // Fatal error conditions
            if (targetStart < 0) {
                throw new RangeError('targetStart out of bounds')
            }
            if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
            if (end < 0) throw new RangeError('sourceEnd out of bounds')

            // Are we oob?
            if (end > this.length) end = this.length
            if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start
            }

            var len = end - start
            var i

            if (this === target && start < targetStart && targetStart < end) {
                // descending copy from end
                for (i = len - 1; i >= 0; i--) {
                    target[i + targetStart] = this[i + start]
                }
            } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
                // ascending copy from start
                for (i = 0; i < len; i++) {
                    target[i + targetStart] = this[i + start]
                }
            } else {
                Uint8Array.prototype.set.call(
                    target,
                    this.subarray(start, start + len),
                    targetStart
                )
            }

            return len
        }

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
        Buffer.prototype.fill = function fill (val, start, end, encoding) {
            // Handle string cases:
            if (typeof val === 'string') {
                if (typeof start === 'string') {
                    encoding = start
                    start = 0
                    end = this.length
                } else if (typeof end === 'string') {
                    encoding = end
                    end = this.length
                }
                if (val.length === 1) {
                    var code = val.charCodeAt(0)
                    if (code < 256) {
                        val = code
                    }
                }
                if (encoding !== undefined && typeof encoding !== 'string') {
                    throw new TypeError('encoding must be a string')
                }
                if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                    throw new TypeError('Unknown encoding: ' + encoding)
                }
            } else if (typeof val === 'number') {
                val = val & 255
            }

            // Invalid ranges are not set to a default, so can range check early.
            if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError('Out of range index')
            }

            if (end <= start) {
                return this
            }

            start = start >>> 0
            end = end === undefined ? this.length : end >>> 0

            if (!val) val = 0

            var i
            if (typeof val === 'number') {
                for (i = start; i < end; i++) {
                    this[i] = val
                }
            } else {
                var bytes = Buffer.isBuffer(val)
                    ? val
                    : utf8ToBytes(new Buffer(val, encoding).toString())
                var len = bytes.length
                for (i = 0; i < end - start; i++) {
                    this[i + start] = bytes[i % len]
                }
            }

            return this
        }

// HELPER FUNCTIONS
// ================

        var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

        function base64clean (str) {
            // Node strips out invalid characters like \n and \t from the string, base64-js does not
            str = stringtrim(str).replace(INVALID_BASE64_RE, '')
            // Node converts strings with length < 2 to ''
            if (str.length < 2) return ''
            // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
            while (str.length % 4 !== 0) {
                str = str + '='
            }
            return str
        }

        function stringtrim (str) {
            if (str.trim) return str.trim()
            return str.replace(/^\s+|\s+$/g, '')
        }

        function toHex (n) {
            if (n < 16) return '0' + n.toString(16)
            return n.toString(16)
        }

        function utf8ToBytes (string, units) {
            units = units || Infinity
            var codePoint
            var length = string.length
            var leadSurrogate = null
            var bytes = []

            for (var i = 0; i < length; i++) {
                codePoint = string.charCodeAt(i)

                // is surrogate component
                if (codePoint > 0xD7FF && codePoint < 0xE000) {
                    // last char was a lead
                    if (!leadSurrogate) {
                        // no lead yet
                        if (codePoint > 0xDBFF) {
                            // unexpected trail
                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                            continue
                        } else if (i + 1 === length) {
                            // unpaired lead
                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                            continue
                        }

                        // valid lead
                        leadSurrogate = codePoint

                        continue
                    }

                    // 2 leads in a row
                    if (codePoint < 0xDC00) {
                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                        leadSurrogate = codePoint
                        continue
                    }

                    // valid surrogate pair
                    codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
                } else if (leadSurrogate) {
                    // valid bmp char, but last char was a lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                }

                leadSurrogate = null

                // encode utf8
                if (codePoint < 0x80) {
                    if ((units -= 1) < 0) break
                    bytes.push(codePoint)
                } else if (codePoint < 0x800) {
                    if ((units -= 2) < 0) break
                    bytes.push(
                        codePoint >> 0x6 | 0xC0,
                        codePoint & 0x3F | 0x80
                    )
                } else if (codePoint < 0x10000) {
                    if ((units -= 3) < 0) break
                    bytes.push(
                        codePoint >> 0xC | 0xE0,
                        codePoint >> 0x6 & 0x3F | 0x80,
                        codePoint & 0x3F | 0x80
                    )
                } else if (codePoint < 0x110000) {
                    if ((units -= 4) < 0) break
                    bytes.push(
                        codePoint >> 0x12 | 0xF0,
                        codePoint >> 0xC & 0x3F | 0x80,
                        codePoint >> 0x6 & 0x3F | 0x80,
                        codePoint & 0x3F | 0x80
                    )
                } else {
                    throw new Error('Invalid code point')
                }
            }

            return bytes
        }

        function asciiToBytes (str) {
            var byteArray = []
            for (var i = 0; i < str.length; i++) {
                // Node's code seems to be doing this and not & 0x7F..
                byteArray.push(str.charCodeAt(i) & 0xFF)
            }
            return byteArray
        }

        function utf16leToBytes (str, units) {
            var c, hi, lo
            var byteArray = []
            for (var i = 0; i < str.length; i++) {
                if ((units -= 2) < 0) break

                c = str.charCodeAt(i)
                hi = c >> 8
                lo = c % 256
                byteArray.push(lo)
                byteArray.push(hi)
            }

            return byteArray
        }

        function base64ToBytes (str) {
            return base64.toByteArray(base64clean(str))
        }

        function blitBuffer (src, dst, offset, length) {
            for (var i = 0; i < length; i++) {
                if ((i + offset >= dst.length) || (i >= src.length)) break
                dst[i + offset] = src[i]
            }
            return i
        }

        function isnan (val) {
            return val !== val // eslint-disable-line no-self-compare
        }

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"base64-js":2,"ieee754":8,"isarray":11}],6:[function(require,module,exports){
    (function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

        function isArray(arg) {
            if (Array.isArray) {
                return Array.isArray(arg);
            }
            return objectToString(arg) === '[object Array]';
        }
        exports.isArray = isArray;

        function isBoolean(arg) {
            return typeof arg === 'boolean';
        }
        exports.isBoolean = isBoolean;

        function isNull(arg) {
            return arg === null;
        }
        exports.isNull = isNull;

        function isNullOrUndefined(arg) {
            return arg == null;
        }
        exports.isNullOrUndefined = isNullOrUndefined;

        function isNumber(arg) {
            return typeof arg === 'number';
        }
        exports.isNumber = isNumber;

        function isString(arg) {
            return typeof arg === 'string';
        }
        exports.isString = isString;

        function isSymbol(arg) {
            return typeof arg === 'symbol';
        }
        exports.isSymbol = isSymbol;

        function isUndefined(arg) {
            return arg === void 0;
        }
        exports.isUndefined = isUndefined;

        function isRegExp(re) {
            return objectToString(re) === '[object RegExp]';
        }
        exports.isRegExp = isRegExp;

        function isObject(arg) {
            return typeof arg === 'object' && arg !== null;
        }
        exports.isObject = isObject;

        function isDate(d) {
            return objectToString(d) === '[object Date]';
        }
        exports.isDate = isDate;

        function isError(e) {
            return (objectToString(e) === '[object Error]' || e instanceof Error);
        }
        exports.isError = isError;

        function isFunction(arg) {
            return typeof arg === 'function';
        }
        exports.isFunction = isFunction;

        function isPrimitive(arg) {
            return arg === null ||
                typeof arg === 'boolean' ||
                typeof arg === 'number' ||
                typeof arg === 'string' ||
                typeof arg === 'symbol' ||  // ES6 symbol
                typeof arg === 'undefined';
        }
        exports.isPrimitive = isPrimitive;

        exports.isBuffer = Buffer.isBuffer;

        function objectToString(o) {
            return Object.prototype.toString.call(o);
        }

    }).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":10}],7:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

    function EventEmitter() {
        this._events = this._events || {};
        this._maxListeners = this._maxListeners || undefined;
    }
    module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
    EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function(n) {
        if (!isNumber(n) || n < 0 || isNaN(n))
            throw TypeError('n must be a positive number');
        this._maxListeners = n;
        return this;
    };

    EventEmitter.prototype.emit = function(type) {
        var er, handler, len, args, i, listeners;

        if (!this._events)
            this._events = {};

        // If there is no 'error' event listener then throw.
        if (type === 'error') {
            if (!this._events.error ||
                (isObject(this._events.error) && !this._events.error.length)) {
                er = arguments[1];
                if (er instanceof Error) {
                    throw er; // Unhandled 'error' event
                }
                throw TypeError('Uncaught, unspecified "error" event.');
            }
        }

        handler = this._events[type];

        if (isUndefined(handler))
            return false;

        if (isFunction(handler)) {
            switch (arguments.length) {
                // fast cases
                case 1:
                    handler.call(this);
                    break;
                case 2:
                    handler.call(this, arguments[1]);
                    break;
                case 3:
                    handler.call(this, arguments[1], arguments[2]);
                    break;
                // slower
                default:
                    args = Array.prototype.slice.call(arguments, 1);
                    handler.apply(this, args);
            }
        } else if (isObject(handler)) {
            args = Array.prototype.slice.call(arguments, 1);
            listeners = handler.slice();
            len = listeners.length;
            for (i = 0; i < len; i++)
                listeners[i].apply(this, args);
        }

        return true;
    };

    EventEmitter.prototype.addListener = function(type, listener) {
        var m;

        if (!isFunction(listener))
            throw TypeError('listener must be a function');

        if (!this._events)
            this._events = {};

        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (this._events.newListener)
            this.emit('newListener', type,
                isFunction(listener.listener) ?
                    listener.listener : listener);

        if (!this._events[type])
        // Optimize the case of one listener. Don't need the extra array object.
            this._events[type] = listener;
        else if (isObject(this._events[type]))
        // If we've already got an array, just append.
            this._events[type].push(listener);
        else
        // Adding the second element, need to change to array.
            this._events[type] = [this._events[type], listener];

        // Check for listener leak
        if (isObject(this._events[type]) && !this._events[type].warned) {
            if (!isUndefined(this._maxListeners)) {
                m = this._maxListeners;
            } else {
                m = EventEmitter.defaultMaxListeners;
            }

            if (m && m > 0 && this._events[type].length > m) {
                this._events[type].warned = true;
                console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
                if (typeof console.trace === 'function') {
                    // not supported in IE 10
                    console.trace();
                }
            }
        }

        return this;
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.once = function(type, listener) {
        if (!isFunction(listener))
            throw TypeError('listener must be a function');

        var fired = false;

        function g() {
            this.removeListener(type, g);

            if (!fired) {
                fired = true;
                listener.apply(this, arguments);
            }
        }

        g.listener = listener;
        this.on(type, g);

        return this;
    };

// emits a 'removeListener' event iff the listener was removed
    EventEmitter.prototype.removeListener = function(type, listener) {
        var list, position, length, i;

        if (!isFunction(listener))
            throw TypeError('listener must be a function');

        if (!this._events || !this._events[type])
            return this;

        list = this._events[type];
        length = list.length;
        position = -1;

        if (list === listener ||
            (isFunction(list.listener) && list.listener === listener)) {
            delete this._events[type];
            if (this._events.removeListener)
                this.emit('removeListener', type, listener);

        } else if (isObject(list)) {
            for (i = length; i-- > 0;) {
                if (list[i] === listener ||
                    (list[i].listener && list[i].listener === listener)) {
                    position = i;
                    break;
                }
            }

            if (position < 0)
                return this;

            if (list.length === 1) {
                list.length = 0;
                delete this._events[type];
            } else {
                list.splice(position, 1);
            }

            if (this._events.removeListener)
                this.emit('removeListener', type, listener);
        }

        return this;
    };

    EventEmitter.prototype.removeAllListeners = function(type) {
        var key, listeners;

        if (!this._events)
            return this;

        // not listening for removeListener, no need to emit
        if (!this._events.removeListener) {
            if (arguments.length === 0)
                this._events = {};
            else if (this._events[type])
                delete this._events[type];
            return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
            for (key in this._events) {
                if (key === 'removeListener') continue;
                this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = {};
            return this;
        }

        listeners = this._events[type];

        if (isFunction(listeners)) {
            this.removeListener(type, listeners);
        } else if (listeners) {
            // LIFO order
            while (listeners.length)
                this.removeListener(type, listeners[listeners.length - 1]);
        }
        delete this._events[type];

        return this;
    };

    EventEmitter.prototype.listeners = function(type) {
        var ret;
        if (!this._events || !this._events[type])
            ret = [];
        else if (isFunction(this._events[type]))
            ret = [this._events[type]];
        else
            ret = this._events[type].slice();
        return ret;
    };

    EventEmitter.prototype.listenerCount = function(type) {
        if (this._events) {
            var evlistener = this._events[type];

            if (isFunction(evlistener))
                return 1;
            else if (evlistener)
                return evlistener.length;
        }
        return 0;
    };

    EventEmitter.listenerCount = function(emitter, type) {
        return emitter.listenerCount(type);
    };

    function isFunction(arg) {
        return typeof arg === 'function';
    }

    function isNumber(arg) {
        return typeof arg === 'number';
    }

    function isObject(arg) {
        return typeof arg === 'object' && arg !== null;
    }

    function isUndefined(arg) {
        return arg === void 0;
    }

},{}],8:[function(require,module,exports){
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m
        var eLen = nBytes * 8 - mLen - 1
        var eMax = (1 << eLen) - 1
        var eBias = eMax >> 1
        var nBits = -7
        var i = isLE ? (nBytes - 1) : 0
        var d = isLE ? -1 : 1
        var s = buffer[offset + i]

        i += d

        e = s & ((1 << (-nBits)) - 1)
        s >>= (-nBits)
        nBits += eLen
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        m = e & ((1 << (-nBits)) - 1)
        e >>= (-nBits)
        nBits += mLen
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        if (e === 0) {
            e = 1 - eBias
        } else if (e === eMax) {
            return m ? NaN : ((s ? -1 : 1) * Infinity)
        } else {
            m = m + Math.pow(2, mLen)
            e = e - eBias
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c
        var eLen = nBytes * 8 - mLen - 1
        var eMax = (1 << eLen) - 1
        var eBias = eMax >> 1
        var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
        var i = isLE ? 0 : (nBytes - 1)
        var d = isLE ? 1 : -1
        var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

        value = Math.abs(value)

        if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0
            e = eMax
        } else {
            e = Math.floor(Math.log(value) / Math.LN2)
            if (value * (c = Math.pow(2, -e)) < 1) {
                e--
                c *= 2
            }
            if (e + eBias >= 1) {
                value += rt / c
            } else {
                value += rt * Math.pow(2, 1 - eBias)
            }
            if (value * c >= 2) {
                e++
                c /= 2
            }

            if (e + eBias >= eMax) {
                m = 0
                e = eMax
            } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen)
                e = e + eBias
            } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
                e = 0
            }
        }

        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

        e = (e << mLen) | m
        eLen += mLen
        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

        buffer[offset + i - d] |= s * 128
    }

},{}],9:[function(require,module,exports){
    if (typeof Object.create === 'function') {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor
            ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                    value: ctor,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
        };
    } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor
            var TempCtor = function () {}
            TempCtor.prototype = superCtor.prototype
            ctor.prototype = new TempCtor()
            ctor.prototype.constructor = ctor
        }
    }

},{}],10:[function(require,module,exports){
    /**
     * Determine if an object is Buffer
     *
     * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
     * License:  MIT
     *
     * `npm install is-buffer`
     */

    module.exports = function (obj) {
        return !!(obj != null &&
        (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)
            (obj.constructor &&
            typeof obj.constructor.isBuffer === 'function' &&
            obj.constructor.isBuffer(obj))
        ))
    }

},{}],11:[function(require,module,exports){
    var toString = {}.toString;

    module.exports = Array.isArray || function (arr) {
            return toString.call(arr) == '[object Array]';
        };

},{}],12:[function(require,module,exports){
    (function (global){
        ; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
//     keymaster.js
//     (c) 2011-2013 Thomas Fuchs
//     keymaster.js may be freely distributed under the MIT license.

            ;(function(global){
                var k,
                    _handlers = {},
                    _mods = { 16: false, 18: false, 17: false, 91: false },
                    _scope = 'all',
                // modifier keys
                    _MODIFIERS = {
                        '⇧': 16, shift: 16,
                        '⌥': 18, alt: 18, option: 18,
                        '⌃': 17, ctrl: 17, control: 17,
                        '⌘': 91, command: 91
                    },
                // special keys
                    _MAP = {
                        backspace: 8, tab: 9, clear: 12,
                        enter: 13, 'return': 13,
                        esc: 27, escape: 27, space: 32,
                        left: 37, up: 38,
                        right: 39, down: 40,
                        del: 46, 'delete': 46,
                        home: 36, end: 35,
                        pageup: 33, pagedown: 34,
                        ',': 188, '.': 190, '/': 191,
                        '`': 192, '-': 189, '=': 187,
                        ';': 186, '\'': 222,
                        '[': 219, ']': 221, '\\': 220
                    },
                    code = function(x){
                        return _MAP[x] || x.toUpperCase().charCodeAt(0);
                    },
                    _downKeys = [];

                for(k=1;k<20;k++) _MAP['f'+k] = 111+k;

                // IE doesn't support Array#indexOf, so have a simple replacement
                function index(array, item){
                    var i = array.length;
                    while(i--) if(array[i]===item) return i;
                    return -1;
                }

                // for comparing mods before unassignment
                function compareArray(a1, a2) {
                    if (a1.length != a2.length) return false;
                    for (var i = 0; i < a1.length; i++) {
                        if (a1[i] !== a2[i]) return false;
                    }
                    return true;
                }

                var modifierMap = {
                    16:'shiftKey',
                    18:'altKey',
                    17:'ctrlKey',
                    91:'metaKey'
                };
                function updateModifierKey(event) {
                    for(k in _mods) _mods[k] = event[modifierMap[k]];
                };

                // handle keydown event
                function dispatch(event) {
                    var key, handler, k, i, modifiersMatch, scope;
                    key = event.keyCode;

                    if (index(_downKeys, key) == -1) {
                        _downKeys.push(key);
                    }

                    // if a modifier key, set the key.<modifierkeyname> property to true and return
                    if(key == 93 || key == 224) key = 91; // right command on webkit, command on Gecko
                    if(key in _mods) {
                        _mods[key] = true;
                        // 'assignKey' from inside this closure is exported to window.key
                        for(k in _MODIFIERS) if(_MODIFIERS[k] == key) assignKey[k] = true;
                        return;
                    }
                    updateModifierKey(event);

                    // see if we need to ignore the keypress (filter() can can be overridden)
                    // by default ignore key presses if a select, textarea, or input is focused
                    if(!assignKey.filter.call(this, event)) return;

                    // abort if no potentially matching shortcuts found
                    if (!(key in _handlers)) return;

                    scope = getScope();

                    // for each potential shortcut
                    for (i = 0; i < _handlers[key].length; i++) {
                        handler = _handlers[key][i];

                        // see if it's in the current scope
                        if(handler.scope == scope || handler.scope == 'all'){
                            // check if modifiers match if any
                            modifiersMatch = handler.mods.length > 0;
                            for(k in _mods)
                                if((!_mods[k] && index(handler.mods, +k) > -1) ||
                                    (_mods[k] && index(handler.mods, +k) == -1)) modifiersMatch = false;
                            // call the handler and stop the event if neccessary
                            if((handler.mods.length == 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91]) || modifiersMatch){
                                if(handler.method(event, handler)===false){
                                    if(event.preventDefault) event.preventDefault();
                                    else event.returnValue = false;
                                    if(event.stopPropagation) event.stopPropagation();
                                    if(event.cancelBubble) event.cancelBubble = true;
                                }
                            }
                        }
                    }
                };

                // unset modifier keys on keyup
                function clearModifier(event){
                    var key = event.keyCode, k,
                        i = index(_downKeys, key);

                    // remove key from _downKeys
                    if (i >= 0) {
                        _downKeys.splice(i, 1);
                    }

                    if(key == 93 || key == 224) key = 91;
                    if(key in _mods) {
                        _mods[key] = false;
                        for(k in _MODIFIERS) if(_MODIFIERS[k] == key) assignKey[k] = false;
                    }
                };

                function resetModifiers() {
                    for(k in _mods) _mods[k] = false;
                    for(k in _MODIFIERS) assignKey[k] = false;
                };

                // parse and assign shortcut
                function assignKey(key, scope, method){
                    var keys, mods;
                    keys = getKeys(key);
                    if (method === undefined) {
                        method = scope;
                        scope = 'all';
                    }

                    // for each shortcut
                    for (var i = 0; i < keys.length; i++) {
                        // set modifier keys if any
                        mods = [];
                        key = keys[i].split('+');
                        if (key.length > 1){
                            mods = getMods(key);
                            key = [key[key.length-1]];
                        }
                        // convert to keycode and...
                        key = key[0]
                        key = code(key);
                        // ...store handler
                        if (!(key in _handlers)) _handlers[key] = [];
                        _handlers[key].push({ shortcut: keys[i], scope: scope, method: method, key: keys[i], mods: mods });
                    }
                };

                // unbind all handlers for given key in current scope
                function unbindKey(key, scope) {
                    var multipleKeys, keys,
                        mods = [],
                        i, j, obj;

                    multipleKeys = getKeys(key);

                    for (j = 0; j < multipleKeys.length; j++) {
                        keys = multipleKeys[j].split('+');

                        if (keys.length > 1) {
                            mods = getMods(keys);
                            key = keys[keys.length - 1];
                        }

                        key = code(key);

                        if (scope === undefined) {
                            scope = getScope();
                        }
                        if (!_handlers[key]) {
                            return;
                        }
                        for (i = 0; i < _handlers[key].length; i++) {
                            obj = _handlers[key][i];
                            // only clear handlers if correct scope and mods match
                            if (obj.scope === scope && compareArray(obj.mods, mods)) {
                                _handlers[key][i] = {};
                            }
                        }
                    }
                };

                // Returns true if the key with code 'keyCode' is currently down
                // Converts strings into key codes.
                function isPressed(keyCode) {
                    if (typeof(keyCode)=='string') {
                        keyCode = code(keyCode);
                    }
                    return index(_downKeys, keyCode) != -1;
                }

                function getPressedKeyCodes() {
                    return _downKeys.slice(0);
                }

                function filter(event){
                    var tagName = (event.target || event.srcElement).tagName;
                    // ignore keypressed in any elements that support keyboard data input
                    return !(tagName == 'INPUT' || tagName == 'SELECT' || tagName == 'TEXTAREA');
                }

                // initialize key.<modifier> to false
                for(k in _MODIFIERS) assignKey[k] = false;

                // set current scope (default 'all')
                function setScope(scope){ _scope = scope || 'all' };
                function getScope(){ return _scope || 'all' };

                // delete all handlers for a given scope
                function deleteScope(scope){
                    var key, handlers, i;

                    for (key in _handlers) {
                        handlers = _handlers[key];
                        for (i = 0; i < handlers.length; ) {
                            if (handlers[i].scope === scope) handlers.splice(i, 1);
                            else i++;
                        }
                    }
                };

                // abstract key logic for assign and unassign
                function getKeys(key) {
                    var keys;
                    key = key.replace(/\s/g, '');
                    keys = key.split(',');
                    if ((keys[keys.length - 1]) == '') {
                        keys[keys.length - 2] += ',';
                    }
                    return keys;
                }

                // abstract mods logic for assign and unassign
                function getMods(key) {
                    var mods = key.slice(0, key.length - 1);
                    for (var mi = 0; mi < mods.length; mi++)
                        mods[mi] = _MODIFIERS[mods[mi]];
                    return mods;
                }

                // cross-browser events
                function addEvent(object, event, method) {
                    if (object.addEventListener)
                        object.addEventListener(event, method, false);
                    else if(object.attachEvent)
                        object.attachEvent('on'+event, function(){ method(window.event) });
                };

                // set the handlers globally on document
                addEvent(document, 'keydown', function(event) { dispatch(event) }); // Passing _scope to a callback to ensure it remains the same by execution. Fixes #48
                addEvent(document, 'keyup', clearModifier);

                // reset modifiers to false whenever the window is (re)focused.
                addEvent(window, 'focus', resetModifiers);

                // store previously defined key
                var previousKey = global.key;

                // restore previously defined key and return reference to our key object
                function noConflict() {
                    var k = global.key;
                    global.key = previousKey;
                    return k;
                }

                // set window.key and window.key.set/get/deleteScope, and the default filter
                global.key = assignKey;
                global.key.setScope = setScope;
                global.key.getScope = getScope;
                global.key.deleteScope = deleteScope;
                global.key.filter = filter;
                global.key.isPressed = isPressed;
                global.key.getPressedKeyCodes = getPressedKeyCodes;
                global.key.noConflict = noConflict;
                global.key.unbind = unbindKey;

                if(typeof module !== 'undefined') module.exports = assignKey;

            })(this);

            ; browserify_shim__define__module__export__(typeof key != "undefined" ? key : window.key);

        }).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],13:[function(require,module,exports){
    var getNative = require('./_getNative'),
        root = require('./_root');

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(root, 'DataView');

    module.exports = DataView;

},{"./_getNative":65,"./_root":95}],14:[function(require,module,exports){
    var hashClear = require('./_hashClear'),
        hashDelete = require('./_hashDelete'),
        hashGet = require('./_hashGet'),
        hashHas = require('./_hashHas'),
        hashSet = require('./_hashSet');

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
        var index = -1,
            length = entries ? entries.length : 0;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

// Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    module.exports = Hash;

},{"./_hashClear":69,"./_hashDelete":70,"./_hashGet":71,"./_hashHas":72,"./_hashSet":73}],15:[function(require,module,exports){
    var listCacheClear = require('./_listCacheClear'),
        listCacheDelete = require('./_listCacheDelete'),
        listCacheGet = require('./_listCacheGet'),
        listCacheHas = require('./_listCacheHas'),
        listCacheSet = require('./_listCacheSet');

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
        var index = -1,
            length = entries ? entries.length : 0;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

// Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    module.exports = ListCache;

},{"./_listCacheClear":82,"./_listCacheDelete":83,"./_listCacheGet":84,"./_listCacheHas":85,"./_listCacheSet":86}],16:[function(require,module,exports){
    var getNative = require('./_getNative'),
        root = require('./_root');

    /* Built-in method references that are verified to be native. */
    var Map = getNative(root, 'Map');

    module.exports = Map;

},{"./_getNative":65,"./_root":95}],17:[function(require,module,exports){
    var mapCacheClear = require('./_mapCacheClear'),
        mapCacheDelete = require('./_mapCacheDelete'),
        mapCacheGet = require('./_mapCacheGet'),
        mapCacheHas = require('./_mapCacheHas'),
        mapCacheSet = require('./_mapCacheSet');

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
        var index = -1,
            length = entries ? entries.length : 0;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

// Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    module.exports = MapCache;

},{"./_mapCacheClear":87,"./_mapCacheDelete":88,"./_mapCacheGet":89,"./_mapCacheHas":90,"./_mapCacheSet":91}],18:[function(require,module,exports){
    var getNative = require('./_getNative'),
        root = require('./_root');

    /* Built-in method references that are verified to be native. */
    var Promise = getNative(root, 'Promise');

    module.exports = Promise;

},{"./_getNative":65,"./_root":95}],19:[function(require,module,exports){
    var getNative = require('./_getNative'),
        root = require('./_root');

    /* Built-in method references that are verified to be native. */
    var Set = getNative(root, 'Set');

    module.exports = Set;

},{"./_getNative":65,"./_root":95}],20:[function(require,module,exports){
    var MapCache = require('./_MapCache'),
        setCacheAdd = require('./_setCacheAdd'),
        setCacheHas = require('./_setCacheHas');

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
        var index = -1,
            length = values ? values.length : 0;

        this.__data__ = new MapCache;
        while (++index < length) {
            this.add(values[index]);
        }
    }

// Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    module.exports = SetCache;

},{"./_MapCache":17,"./_setCacheAdd":96,"./_setCacheHas":97}],21:[function(require,module,exports){
    var ListCache = require('./_ListCache'),
        stackClear = require('./_stackClear'),
        stackDelete = require('./_stackDelete'),
        stackGet = require('./_stackGet'),
        stackHas = require('./_stackHas'),
        stackSet = require('./_stackSet');

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
        this.__data__ = new ListCache(entries);
    }

// Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    module.exports = Stack;

},{"./_ListCache":15,"./_stackClear":100,"./_stackDelete":101,"./_stackGet":102,"./_stackHas":103,"./_stackSet":104}],22:[function(require,module,exports){
    var root = require('./_root');

    /** Built-in value references. */
    var Symbol = root.Symbol;

    module.exports = Symbol;

},{"./_root":95}],23:[function(require,module,exports){
    var root = require('./_root');

    /** Built-in value references. */
    var Uint8Array = root.Uint8Array;

    module.exports = Uint8Array;

},{"./_root":95}],24:[function(require,module,exports){
    var getNative = require('./_getNative'),
        root = require('./_root');

    /* Built-in method references that are verified to be native. */
    var WeakMap = getNative(root, 'WeakMap');

    module.exports = WeakMap;

},{"./_getNative":65,"./_root":95}],25:[function(require,module,exports){
    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */
    function apply(func, thisArg, args) {
        var length = args.length;
        switch (length) {
            case 0: return func.call(thisArg);
            case 1: return func.call(thisArg, args[0]);
            case 2: return func.call(thisArg, args[0], args[1]);
            case 3: return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
    }

    module.exports = apply;

},{}],26:[function(require,module,exports){
    /**
     * A specialized version of `_.every` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
        var index = -1,
            length = array.length;

        while (++index < length) {
            if (!predicate(array[index], index, array)) {
                return false;
            }
        }
        return true;
    }

    module.exports = arrayEvery;

},{}],27:[function(require,module,exports){
    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
        var index = -1,
            length = array.length,
            result = Array(length);

        while (++index < length) {
            result[index] = iteratee(array[index], index, array);
        }
        return result;
    }

    module.exports = arrayMap;

},{}],28:[function(require,module,exports){
    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
        var index = -1,
            length = array.length;

        while (++index < length) {
            if (predicate(array[index], index, array)) {
                return true;
            }
        }
        return false;
    }

    module.exports = arraySome;

},{}],29:[function(require,module,exports){
    var eq = require('./eq');

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
            (value === undefined && !(key in object))) {
            object[key] = value;
        }
    }

    module.exports = assignValue;

},{"./eq":111}],30:[function(require,module,exports){
    var eq = require('./eq');

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
            if (eq(array[length][0], key)) {
                return length;
            }
        }
        return -1;
    }

    module.exports = assocIndexOf;

},{"./eq":111}],31:[function(require,module,exports){
    var copyObject = require('./_copyObject'),
        keys = require('./keys');

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
    }

    module.exports = baseAssign;

},{"./_copyObject":54,"./keys":130}],32:[function(require,module,exports){
    var isObject = require('./isObject');

    /** Built-in value references. */
    var objectCreate = Object.create;

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(proto) {
        return isObject(proto) ? objectCreate(proto) : {};
    }

    module.exports = baseCreate;

},{"./isObject":125}],33:[function(require,module,exports){
    var baseForOwn = require('./_baseForOwn'),
        createBaseEach = require('./_createBaseEach');

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    module.exports = baseEach;

},{"./_baseForOwn":36,"./_createBaseEach":56}],34:[function(require,module,exports){
    var baseEach = require('./_baseEach');

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function(value, index, collection) {
            result = !!predicate(value, index, collection);
            return result;
        });
        return result;
    }

    module.exports = baseEvery;

},{"./_baseEach":33}],35:[function(require,module,exports){
    var createBaseFor = require('./_createBaseFor');

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    module.exports = baseFor;

},{"./_createBaseFor":57}],36:[function(require,module,exports){
    var baseFor = require('./_baseFor'),
        keys = require('./keys');

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
    }

    module.exports = baseForOwn;

},{"./_baseFor":35,"./keys":130}],37:[function(require,module,exports){
    var castPath = require('./_castPath'),
        isKey = require('./_isKey'),
        toKey = require('./_toKey');

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
        path = isKey(path, object) ? [path] : castPath(path);

        var index = 0,
            length = path.length;

        while (object != null && index < length) {
            object = object[toKey(path[index++])];
        }
        return (index && index == length) ? object : undefined;
    }

    module.exports = baseGet;

},{"./_castPath":52,"./_isKey":78,"./_toKey":106}],38:[function(require,module,exports){
    var getPrototype = require('./_getPrototype');

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
        // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
        // that are composed entirely of index properties, return `false` for
        // `hasOwnProperty` checks of them.
        return hasOwnProperty.call(object, key) ||
            (typeof object == 'object' && key in object && getPrototype(object) === null);
    }

    module.exports = baseHas;

},{"./_getPrototype":66}],39:[function(require,module,exports){
    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
        return key in Object(object);
    }

    module.exports = baseHasIn;

},{}],40:[function(require,module,exports){
    var baseIsEqualDeep = require('./_baseIsEqualDeep'),
        isObject = require('./isObject'),
        isObjectLike = require('./isObjectLike');

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {boolean} [bitmask] The bitmask of comparison flags.
     *  The bitmask may be composed of the following flags:
     *     1 - Unordered comparison
     *     2 - Partial comparison
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, bitmask, stack) {
        if (value === other) {
            return true;
        }
        if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
            return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }

    module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":41,"./isObject":125,"./isObjectLike":126}],41:[function(require,module,exports){
    var Stack = require('./_Stack'),
        equalArrays = require('./_equalArrays'),
        equalByTag = require('./_equalByTag'),
        equalObjects = require('./_equalObjects'),
        getTag = require('./_getTag'),
        isArray = require('./isArray'),
        isHostObject = require('./_isHostObject'),
        isTypedArray = require('./isTypedArray');

    /** Used to compose bitmasks for comparison styles. */
    var PARTIAL_COMPARE_FLAG = 2;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        objectTag = '[object Object]';

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = arrayTag,
            othTag = arrayTag;

        if (!objIsArr) {
            objTag = getTag(object);
            objTag = objTag == argsTag ? objectTag : objTag;
        }
        if (!othIsArr) {
            othTag = getTag(other);
            othTag = othTag == argsTag ? objectTag : othTag;
        }
        var objIsObj = objTag == objectTag && !isHostObject(object),
            othIsObj = othTag == objectTag && !isHostObject(other),
            isSameTag = objTag == othTag;

        if (isSameTag && !objIsObj) {
            stack || (stack = new Stack);
            return (objIsArr || isTypedArray(object))
                ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
                : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
        }
        if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

            if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object,
                    othUnwrapped = othIsWrapped ? other.value() : other;

                stack || (stack = new Stack);
                return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
            }
        }
        if (!isSameTag) {
            return false;
        }
        stack || (stack = new Stack);
        return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }

    module.exports = baseIsEqualDeep;

},{"./_Stack":21,"./_equalArrays":59,"./_equalByTag":60,"./_equalObjects":61,"./_getTag":67,"./_isHostObject":75,"./isArray":117,"./isTypedArray":129}],42:[function(require,module,exports){
    var Stack = require('./_Stack'),
        baseIsEqual = require('./_baseIsEqual');

    /** Used to compose bitmasks for comparison styles. */
    var UNORDERED_COMPARE_FLAG = 1,
        PARTIAL_COMPARE_FLAG = 2;

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
            return !length;
        }
        object = Object(object);
        while (index--) {
            var data = matchData[index];
            if ((noCustomizer && data[2])
                    ? data[1] !== object[data[0]]
                    : !(data[0] in object)
            ) {
                return false;
            }
        }
        while (++index < length) {
            data = matchData[index];
            var key = data[0],
                objValue = object[key],
                srcValue = data[1];

            if (noCustomizer && data[2]) {
                if (objValue === undefined && !(key in object)) {
                    return false;
                }
            } else {
                var stack = new Stack;
                if (customizer) {
                    var result = customizer(objValue, srcValue, key, object, source, stack);
                }
                if (!(result === undefined
                            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
                            : result
                    )) {
                    return false;
                }
            }
        }
        return true;
    }

    module.exports = baseIsMatch;

},{"./_Stack":21,"./_baseIsEqual":40}],43:[function(require,module,exports){
    var baseMatches = require('./_baseMatches'),
        baseMatchesProperty = require('./_baseMatchesProperty'),
        identity = require('./identity'),
        isArray = require('./isArray'),
        property = require('./property');

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
        // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
        // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
        if (typeof value == 'function') {
            return value;
        }
        if (value == null) {
            return identity;
        }
        if (typeof value == 'object') {
            return isArray(value)
                ? baseMatchesProperty(value[0], value[1])
                : baseMatches(value);
        }
        return property(value);
    }

    module.exports = baseIteratee;

},{"./_baseMatches":45,"./_baseMatchesProperty":46,"./identity":115,"./isArray":117,"./property":132}],44:[function(require,module,exports){
    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys = Object.keys;

    /**
     * The base implementation of `_.keys` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
        return nativeKeys(Object(object));
    }

    module.exports = baseKeys;

},{}],45:[function(require,module,exports){
    var baseIsMatch = require('./_baseIsMatch'),
        getMatchData = require('./_getMatchData'),
        matchesStrictComparable = require('./_matchesStrictComparable');

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
        };
    }

    module.exports = baseMatches;

},{"./_baseIsMatch":42,"./_getMatchData":64,"./_matchesStrictComparable":93}],46:[function(require,module,exports){
    var baseIsEqual = require('./_baseIsEqual'),
        get = require('./get'),
        hasIn = require('./hasIn'),
        isKey = require('./_isKey'),
        isStrictComparable = require('./_isStrictComparable'),
        matchesStrictComparable = require('./_matchesStrictComparable'),
        toKey = require('./_toKey');

    /** Used to compose bitmasks for comparison styles. */
    var UNORDERED_COMPARE_FLAG = 1,
        PARTIAL_COMPARE_FLAG = 2;

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
            var objValue = get(object, path);
            return (objValue === undefined && objValue === srcValue)
                ? hasIn(object, path)
                : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
        };
    }

    module.exports = baseMatchesProperty;

},{"./_baseIsEqual":40,"./_isKey":78,"./_isStrictComparable":81,"./_matchesStrictComparable":93,"./_toKey":106,"./get":113,"./hasIn":114}],47:[function(require,module,exports){
    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
        return function(object) {
            return object == null ? undefined : object[key];
        };
    }

    module.exports = baseProperty;

},{}],48:[function(require,module,exports){
    var baseGet = require('./_baseGet');

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
        return function(object) {
            return baseGet(object, path);
        };
    }

    module.exports = basePropertyDeep;

},{"./_baseGet":37}],49:[function(require,module,exports){
    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
        var index = -1,
            result = Array(n);

        while (++index < n) {
            result[index] = iteratee(index);
        }
        return result;
    }

    module.exports = baseTimes;

},{}],50:[function(require,module,exports){
    var arrayMap = require('./_arrayMap');

    /**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */
    function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
            return [key, object[key]];
        });
    }

    module.exports = baseToPairs;

},{"./_arrayMap":27}],51:[function(require,module,exports){
    var Symbol = require('./_Symbol'),
        isSymbol = require('./isSymbol');

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
            return value;
        }
        if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : '';
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    module.exports = baseToString;

},{"./_Symbol":22,"./isSymbol":128}],52:[function(require,module,exports){
    var isArray = require('./isArray'),
        stringToPath = require('./_stringToPath');

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value) {
        return isArray(value) ? value : stringToPath(value);
    }

    module.exports = castPath;

},{"./_stringToPath":105,"./isArray":117}],53:[function(require,module,exports){
    /**
     * Checks if `value` is a global object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {null|Object} Returns `value` if it's a global object, else `null`.
     */
    function checkGlobal(value) {
        return (value && value.Object === Object) ? value : null;
    }

    module.exports = checkGlobal;

},{}],54:[function(require,module,exports){
    var assignValue = require('./_assignValue');

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
        object || (object = {});

        var index = -1,
            length = props.length;

        while (++index < length) {
            var key = props[index];

            var newValue = customizer
                ? customizer(object[key], source[key], key, object, source)
                : source[key];

            assignValue(object, key, newValue);
        }
        return object;
    }

    module.exports = copyObject;

},{"./_assignValue":29}],55:[function(require,module,exports){
    var isIterateeCall = require('./_isIterateeCall'),
        rest = require('./rest');

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
        return rest(function(object, sources) {
            var index = -1,
                length = sources.length,
                customizer = length > 1 ? sources[length - 1] : undefined,
                guard = length > 2 ? sources[2] : undefined;

            customizer = (assigner.length > 3 && typeof customizer == 'function')
                ? (length--, customizer)
                : undefined;

            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined : customizer;
                length = 1;
            }
            object = Object(object);
            while (++index < length) {
                var source = sources[index];
                if (source) {
                    assigner(object, source, index, customizer);
                }
            }
            return object;
        });
    }

    module.exports = createAssigner;

},{"./_isIterateeCall":77,"./rest":133}],56:[function(require,module,exports){
    var isArrayLike = require('./isArrayLike');

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
            if (collection == null) {
                return collection;
            }
            if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee);
            }
            var length = collection.length,
                index = fromRight ? length : -1,
                iterable = Object(collection);

            while ((fromRight ? index-- : ++index < length)) {
                if (iteratee(iterable[index], index, iterable) === false) {
                    break;
                }
            }
            return collection;
        };
    }

    module.exports = createBaseEach;

},{"./isArrayLike":118}],57:[function(require,module,exports){
    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
            var index = -1,
                iterable = Object(object),
                props = keysFunc(object),
                length = props.length;

            while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee(iterable[key], key, iterable) === false) {
                    break;
                }
            }
            return object;
        };
    }

    module.exports = createBaseFor;

},{}],58:[function(require,module,exports){
    var baseToPairs = require('./_baseToPairs'),
        getTag = require('./_getTag'),
        mapToArray = require('./_mapToArray'),
        setToPairs = require('./_setToPairs');

    /** `Object#toString` result references. */
    var mapTag = '[object Map]',
        setTag = '[object Set]';

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
        return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
                return mapToArray(object);
            }
            if (tag == setTag) {
                return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
        };
    }

    module.exports = createToPairs;

},{"./_baseToPairs":50,"./_getTag":67,"./_mapToArray":92,"./_setToPairs":99}],59:[function(require,module,exports){
    var SetCache = require('./_SetCache'),
        arraySome = require('./_arraySome');

    /** Used to compose bitmasks for comparison styles. */
    var UNORDERED_COMPARE_FLAG = 1,
        PARTIAL_COMPARE_FLAG = 2;

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(array);
        if (stacked) {
            return stacked == other;
        }
        var index = -1,
            result = true,
            seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

        stack.set(array, other);

        // Ignore non-index properties.
        while (++index < arrLength) {
            var arrValue = array[index],
                othValue = other[index];

            if (customizer) {
                var compared = isPartial
                    ? customizer(othValue, arrValue, index, other, array, stack)
                    : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined) {
                if (compared) {
                    continue;
                }
                result = false;
                break;
            }
            // Recursively compare arrays (susceptible to call stack limits).
            if (seen) {
                if (!arraySome(other, function(othValue, othIndex) {
                        if (!seen.has(othIndex) &&
                            (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
                            return seen.add(othIndex);
                        }
                    })) {
                    result = false;
                    break;
                }
            } else if (!(
                    arrValue === othValue ||
                    equalFunc(arrValue, othValue, customizer, bitmask, stack)
                )) {
                result = false;
                break;
            }
        }
        stack['delete'](array);
        return result;
    }

    module.exports = equalArrays;

},{"./_SetCache":20,"./_arraySome":28}],60:[function(require,module,exports){
    var Symbol = require('./_Symbol'),
        Uint8Array = require('./_Uint8Array'),
        equalArrays = require('./_equalArrays'),
        mapToArray = require('./_mapToArray'),
        setToArray = require('./_setToArray');

    /** Used to compose bitmasks for comparison styles. */
    var UNORDERED_COMPARE_FLAG = 1,
        PARTIAL_COMPARE_FLAG = 2;

    /** `Object#toString` result references. */
    var boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
        switch (tag) {
            case dataViewTag:
                if ((object.byteLength != other.byteLength) ||
                    (object.byteOffset != other.byteOffset)) {
                    return false;
                }
                object = object.buffer;
                other = other.buffer;

            case arrayBufferTag:
                if ((object.byteLength != other.byteLength) ||
                    !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                    return false;
                }
                return true;

            case boolTag:
            case dateTag:
                // Coerce dates and booleans to numbers, dates to milliseconds and
                // booleans to `1` or `0` treating invalid dates coerced to `NaN` as
                // not equal.
                return +object == +other;

            case errorTag:
                return object.name == other.name && object.message == other.message;

            case numberTag:
                // Treat `NaN` vs. `NaN` as equal.
                return (object != +object) ? other != +other : object == +other;

            case regexpTag:
            case stringTag:
                // Coerce regexes to strings and treat strings, primitives and objects,
                // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
                // for more details.
                return object == (other + '');

            case mapTag:
                var convert = mapToArray;

            case setTag:
                var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
                convert || (convert = setToArray);

                if (object.size != other.size && !isPartial) {
                    return false;
                }
                // Assume cyclic values are equal.
                var stacked = stack.get(object);
                if (stacked) {
                    return stacked == other;
                }
                bitmask |= UNORDERED_COMPARE_FLAG;
                stack.set(object, other);

                // Recursively compare objects (susceptible to call stack limits).
                return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);

            case symbolTag:
                if (symbolValueOf) {
                    return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
        }
        return false;
    }

    module.exports = equalByTag;

},{"./_Symbol":22,"./_Uint8Array":23,"./_equalArrays":59,"./_mapToArray":92,"./_setToArray":98}],61:[function(require,module,exports){
    var baseHas = require('./_baseHas'),
        keys = require('./keys');

    /** Used to compose bitmasks for comparison styles. */
    var PARTIAL_COMPARE_FLAG = 2;

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
            objProps = keys(object),
            objLength = objProps.length,
            othProps = keys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
            return false;
        }
        var index = objLength;
        while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : baseHas(other, key))) {
                return false;
            }
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
            return stacked == other;
        }
        var result = true;
        stack.set(object, other);

        var skipCtor = isPartial;
        while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
                othValue = other[key];

            if (customizer) {
                var compared = isPartial
                    ? customizer(othValue, objValue, key, other, object, stack)
                    : customizer(objValue, othValue, key, object, other, stack);
            }
            // Recursively compare objects (susceptible to call stack limits).
            if (!(compared === undefined
                        ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
                        : compared
                )) {
                result = false;
                break;
            }
            skipCtor || (skipCtor = key == 'constructor');
        }
        if (result && !skipCtor) {
            var objCtor = object.constructor,
                othCtor = other.constructor;

            // Non `Object` object instances with different constructors are not equal.
            if (objCtor != othCtor &&
                ('constructor' in object && 'constructor' in other) &&
                !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                result = false;
            }
        }
        stack['delete'](object);
        return result;
    }

    module.exports = equalObjects;

},{"./_baseHas":38,"./keys":130}],62:[function(require,module,exports){
    var baseProperty = require('./_baseProperty');

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a
     * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
     * Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    module.exports = getLength;

},{"./_baseProperty":47}],63:[function(require,module,exports){
    var isKeyable = require('./_isKeyable');

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key)
            ? data[typeof key == 'string' ? 'string' : 'hash']
            : data.map;
    }

    module.exports = getMapData;

},{"./_isKeyable":79}],64:[function(require,module,exports){
    var isStrictComparable = require('./_isStrictComparable'),
        toPairs = require('./toPairs');

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
        var result = toPairs(object),
            length = result.length;

        while (length--) {
            result[length][2] = isStrictComparable(result[length][1]);
        }
        return result;
    }

    module.exports = getMatchData;

},{"./_isStrictComparable":81,"./toPairs":137}],65:[function(require,module,exports){
    var isNative = require('./isNative');

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
        var value = object[key];
        return isNative(value) ? value : undefined;
    }

    module.exports = getNative;

},{"./isNative":124}],66:[function(require,module,exports){
    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetPrototype = Object.getPrototypeOf;

    /**
     * Gets the `[[Prototype]]` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {null|Object} Returns the `[[Prototype]]`.
     */
    function getPrototype(value) {
        return nativeGetPrototype(Object(value));
    }

    module.exports = getPrototype;

},{}],67:[function(require,module,exports){
    var DataView = require('./_DataView'),
        Map = require('./_Map'),
        Promise = require('./_Promise'),
        Set = require('./_Set'),
        WeakMap = require('./_WeakMap'),
        toSource = require('./_toSource');

    /** `Object#toString` result references. */
    var mapTag = '[object Map]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        setTag = '[object Set]',
        weakMapTag = '[object WeakMap]';

    var dataViewTag = '[object DataView]';

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function getTag(value) {
        return objectToString.call(value);
    }

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge, and promises in Node.js.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
        getTag = function(value) {
            var result = objectToString.call(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : undefined;

            if (ctorString) {
                switch (ctorString) {
                    case dataViewCtorString: return dataViewTag;
                    case mapCtorString: return mapTag;
                    case promiseCtorString: return promiseTag;
                    case setCtorString: return setTag;
                    case weakMapCtorString: return weakMapTag;
                }
            }
            return result;
        };
    }

    module.exports = getTag;

},{"./_DataView":13,"./_Map":16,"./_Promise":18,"./_Set":19,"./_WeakMap":24,"./_toSource":107}],68:[function(require,module,exports){
    var castPath = require('./_castPath'),
        isArguments = require('./isArguments'),
        isArray = require('./isArray'),
        isIndex = require('./_isIndex'),
        isKey = require('./_isKey'),
        isLength = require('./isLength'),
        isString = require('./isString'),
        toKey = require('./_toKey');

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
        path = isKey(path, object) ? [path] : castPath(path);

        var result,
            index = -1,
            length = path.length;

        while (++index < length) {
            var key = toKey(path[index]);
            if (!(result = object != null && hasFunc(object, key))) {
                break;
            }
            object = object[key];
        }
        if (result) {
            return result;
        }
        var length = object ? object.length : 0;
        return !!length && isLength(length) && isIndex(key, length) &&
            (isArray(object) || isString(object) || isArguments(object));
    }

    module.exports = hasPath;

},{"./_castPath":52,"./_isIndex":76,"./_isKey":78,"./_toKey":106,"./isArguments":116,"./isArray":117,"./isLength":123,"./isString":127}],69:[function(require,module,exports){
    var nativeCreate = require('./_nativeCreate');

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }

    module.exports = hashClear;

},{"./_nativeCreate":94}],70:[function(require,module,exports){
    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
        return this.has(key) && delete this.__data__[key];
    }

    module.exports = hashDelete;

},{}],71:[function(require,module,exports){
    var nativeCreate = require('./_nativeCreate');

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? undefined : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    module.exports = hashGet;

},{"./_nativeCreate":94}],72:[function(require,module,exports){
    var nativeCreate = require('./_nativeCreate');

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    module.exports = hashHas;

},{"./_nativeCreate":94}],73:[function(require,module,exports){
    var nativeCreate = require('./_nativeCreate');

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
        var data = this.__data__;
        data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
        return this;
    }

    module.exports = hashSet;

},{"./_nativeCreate":94}],74:[function(require,module,exports){
    var baseTimes = require('./_baseTimes'),
        isArguments = require('./isArguments'),
        isArray = require('./isArray'),
        isLength = require('./isLength'),
        isString = require('./isString');

    /**
     * Creates an array of index keys for `object` values of arrays,
     * `arguments` objects, and strings, otherwise `null` is returned.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array|null} Returns index keys, else `null`.
     */
    function indexKeys(object) {
        var length = object ? object.length : undefined;
        if (isLength(length) &&
            (isArray(object) || isString(object) || isArguments(object))) {
            return baseTimes(length, String);
        }
        return null;
    }

    module.exports = indexKeys;

},{"./_baseTimes":49,"./isArguments":116,"./isArray":117,"./isLength":123,"./isString":127}],75:[function(require,module,exports){
    /**
     * Checks if `value` is a host object in IE < 9.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
     */
    function isHostObject(value) {
        // Many host objects are `Object` objects that can coerce to strings
        // despite having improperly defined `toString` methods.
        var result = false;
        if (value != null && typeof value.toString != 'function') {
            try {
                result = !!(value + '');
            } catch (e) {}
        }
        return result;
    }

    module.exports = isHostObject;

},{}],76:[function(require,module,exports){
    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length &&
            (typeof value == 'number' || reIsUint.test(value)) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    module.exports = isIndex;

},{}],77:[function(require,module,exports){
    var eq = require('./eq'),
        isArrayLike = require('./isArrayLike'),
        isIndex = require('./_isIndex'),
        isObject = require('./isObject');

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
            return false;
        }
        var type = typeof index;
        if (type == 'number'
                ? (isArrayLike(object) && isIndex(index, object.length))
                : (type == 'string' && index in object)
        ) {
            return eq(object[index], value);
        }
        return false;
    }

    module.exports = isIterateeCall;

},{"./_isIndex":76,"./eq":111,"./isArrayLike":118,"./isObject":125}],78:[function(require,module,exports){
    var isArray = require('./isArray'),
        isSymbol = require('./isSymbol');

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/;

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
        if (isArray(value)) {
            return false;
        }
        var type = typeof value;
        if (type == 'number' || type == 'symbol' || type == 'boolean' ||
            value == null || isSymbol(value)) {
            return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
            (object != null && value in Object(object));
    }

    module.exports = isKey;

},{"./isArray":117,"./isSymbol":128}],79:[function(require,module,exports){
    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
        var type = typeof value;
        return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
            ? (value !== '__proto__')
            : (value === null);
    }

    module.exports = isKeyable;

},{}],80:[function(require,module,exports){
    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

        return value === proto;
    }

    module.exports = isPrototype;

},{}],81:[function(require,module,exports){
    var isObject = require('./isObject');

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
        return value === value && !isObject(value);
    }

    module.exports = isStrictComparable;

},{"./isObject":125}],82:[function(require,module,exports){
    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
        this.__data__ = [];
    }

    module.exports = listCacheClear;

},{}],83:[function(require,module,exports){
    var assocIndexOf = require('./_assocIndexOf');

    /** Used for built-in method references. */
    var arrayProto = Array.prototype;

    /** Built-in value references. */
    var splice = arrayProto.splice;

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
            return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
            data.pop();
        } else {
            splice.call(data, index, 1);
        }
        return true;
    }

    module.exports = listCacheDelete;

},{"./_assocIndexOf":30}],84:[function(require,module,exports){
    var assocIndexOf = require('./_assocIndexOf');

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        return index < 0 ? undefined : data[index][1];
    }

    module.exports = listCacheGet;

},{"./_assocIndexOf":30}],85:[function(require,module,exports){
    var assocIndexOf = require('./_assocIndexOf');

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
    }

    module.exports = listCacheHas;

},{"./_assocIndexOf":30}],86:[function(require,module,exports){
    var assocIndexOf = require('./_assocIndexOf');

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
            data.push([key, value]);
        } else {
            data[index][1] = value;
        }
        return this;
    }

    module.exports = listCacheSet;

},{"./_assocIndexOf":30}],87:[function(require,module,exports){
    var Hash = require('./_Hash'),
        ListCache = require('./_ListCache'),
        Map = require('./_Map');

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
        this.__data__ = {
            'hash': new Hash,
            'map': new (Map || ListCache),
            'string': new Hash
        };
    }

    module.exports = mapCacheClear;

},{"./_Hash":14,"./_ListCache":15,"./_Map":16}],88:[function(require,module,exports){
    var getMapData = require('./_getMapData');

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
        return getMapData(this, key)['delete'](key);
    }

    module.exports = mapCacheDelete;

},{"./_getMapData":63}],89:[function(require,module,exports){
    var getMapData = require('./_getMapData');

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
        return getMapData(this, key).get(key);
    }

    module.exports = mapCacheGet;

},{"./_getMapData":63}],90:[function(require,module,exports){
    var getMapData = require('./_getMapData');

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
        return getMapData(this, key).has(key);
    }

    module.exports = mapCacheHas;

},{"./_getMapData":63}],91:[function(require,module,exports){
    var getMapData = require('./_getMapData');

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
        getMapData(this, key).set(key, value);
        return this;
    }

    module.exports = mapCacheSet;

},{"./_getMapData":63}],92:[function(require,module,exports){
    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
        var index = -1,
            result = Array(map.size);

        map.forEach(function(value, key) {
            result[++index] = [key, value];
        });
        return result;
    }

    module.exports = mapToArray;

},{}],93:[function(require,module,exports){
    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
        return function(object) {
            if (object == null) {
                return false;
            }
            return object[key] === srcValue &&
                (srcValue !== undefined || (key in Object(object)));
        };
    }

    module.exports = matchesStrictComparable;

},{}],94:[function(require,module,exports){
    var getNative = require('./_getNative');

    /* Built-in method references that are verified to be native. */
    var nativeCreate = getNative(Object, 'create');

    module.exports = nativeCreate;

},{"./_getNative":65}],95:[function(require,module,exports){
    (function (global){
        var checkGlobal = require('./_checkGlobal');

        /** Used to determine if values are of the language type `Object`. */
        var objectTypes = {
            'function': true,
            'object': true
        };

        /** Detect free variable `exports`. */
        var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
            ? exports
            : undefined;

        /** Detect free variable `module`. */
        var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
            ? module
            : undefined;

        /** Detect free variable `global` from Node.js. */
        var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

        /** Detect free variable `self`. */
        var freeSelf = checkGlobal(objectTypes[typeof self] && self);

        /** Detect free variable `window`. */
        var freeWindow = checkGlobal(objectTypes[typeof window] && window);

        /** Detect `this` as the global object. */
        var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

        /**
         * Used as a reference to the global object.
         *
         * The `this` value is used if it's the global object to avoid Greasemonkey's
         * restricted `window` object, otherwise the `window` object is used.
         */
        var root = freeGlobal ||
            ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
            freeSelf || thisGlobal || Function('return this')();

        module.exports = root;

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_checkGlobal":53}],96:[function(require,module,exports){
    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
    }

    module.exports = setCacheAdd;

},{}],97:[function(require,module,exports){
    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
        return this.__data__.has(value);
    }

    module.exports = setCacheHas;

},{}],98:[function(require,module,exports){
    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
        var index = -1,
            result = Array(set.size);

        set.forEach(function(value) {
            result[++index] = value;
        });
        return result;
    }

    module.exports = setToArray;

},{}],99:[function(require,module,exports){
    /**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */
    function setToPairs(set) {
        var index = -1,
            result = Array(set.size);

        set.forEach(function(value) {
            result[++index] = [value, value];
        });
        return result;
    }

    module.exports = setToPairs;

},{}],100:[function(require,module,exports){
    var ListCache = require('./_ListCache');

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
        this.__data__ = new ListCache;
    }

    module.exports = stackClear;

},{"./_ListCache":15}],101:[function(require,module,exports){
    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
        return this.__data__['delete'](key);
    }

    module.exports = stackDelete;

},{}],102:[function(require,module,exports){
    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
        return this.__data__.get(key);
    }

    module.exports = stackGet;

},{}],103:[function(require,module,exports){
    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
        return this.__data__.has(key);
    }

    module.exports = stackHas;

},{}],104:[function(require,module,exports){
    var ListCache = require('./_ListCache'),
        MapCache = require('./_MapCache');

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
        var cache = this.__data__;
        if (cache instanceof ListCache && cache.__data__.length == LARGE_ARRAY_SIZE) {
            cache = this.__data__ = new MapCache(cache.__data__);
        }
        cache.set(key, value);
        return this;
    }

    module.exports = stackSet;

},{"./_ListCache":15,"./_MapCache":17}],105:[function(require,module,exports){
    var memoize = require('./memoize'),
        toString = require('./toString');

    /** Used to match property names within property paths. */
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoize(function(string) {
        var result = [];
        toString(string).replace(rePropName, function(match, number, quote, string) {
            result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
        });
        return result;
    });

    module.exports = stringToPath;

},{"./memoize":131,"./toString":138}],106:[function(require,module,exports){
    var isSymbol = require('./isSymbol');

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0;

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
            return value;
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    module.exports = toKey;

},{"./isSymbol":128}],107:[function(require,module,exports){
    /** Used to resolve the decompiled source of functions. */
    var funcToString = Function.prototype.toString;

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to process.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
        if (func != null) {
            try {
                return funcToString.call(func);
            } catch (e) {}
            try {
                return (func + '');
            } catch (e) {}
        }
        return '';
    }

    module.exports = toSource;

},{}],108:[function(require,module,exports){
    var assignValue = require('./_assignValue'),
        copyObject = require('./_copyObject'),
        createAssigner = require('./_createAssigner'),
        isArrayLike = require('./isArrayLike'),
        isPrototype = require('./_isPrototype'),
        keys = require('./keys');

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;

    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
 *   this.c = 3;
 * }
     *
     * function Bar() {
 *   this.e = 5;
 * }
     *
     * Foo.prototype.d = 4;
     * Bar.prototype.f = 6;
     *
     * _.assign({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3, 'e': 5 }
     */
    var assign = createAssigner(function(object, source) {
        if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
        }
        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                assignValue(object, key, source[key]);
            }
        }
    });

    module.exports = assign;

},{"./_assignValue":29,"./_copyObject":54,"./_createAssigner":55,"./_isPrototype":80,"./isArrayLike":118,"./keys":130}],109:[function(require,module,exports){
    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
        return function() {
            return value;
        };
    }

    module.exports = constant;

},{}],110:[function(require,module,exports){
    var baseAssign = require('./_baseAssign'),
        baseCreate = require('./_baseCreate');

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
 *   this.x = 0;
 *   this.y = 0;
 * }
     *
     * function Circle() {
 *   Shape.call(this);
 * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
 *   'constructor': Circle
 * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties ? baseAssign(result, properties) : result;
    }

    module.exports = create;

},{"./_baseAssign":31,"./_baseCreate":32}],111:[function(require,module,exports){
    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
        return value === other || (value !== value && other !== other);
    }

    module.exports = eq;

},{}],112:[function(require,module,exports){
    var arrayEvery = require('./_arrayEvery'),
        baseEvery = require('./_baseEvery'),
        baseIteratee = require('./_baseIteratee'),
        isArray = require('./isArray'),
        isIterateeCall = require('./_isIterateeCall');

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined;
        }
        return func(collection, baseIteratee(predicate, 3));
    }

    module.exports = every;

},{"./_arrayEvery":26,"./_baseEvery":34,"./_baseIteratee":43,"./_isIterateeCall":77,"./isArray":117}],113:[function(require,module,exports){
    var baseGet = require('./_baseGet');

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
    }

    module.exports = get;

},{"./_baseGet":37}],114:[function(require,module,exports){
    var baseHasIn = require('./_baseHasIn'),
        hasPath = require('./_hasPath');

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
    }

    module.exports = hasIn;

},{"./_baseHasIn":39,"./_hasPath":68}],115:[function(require,module,exports){
    /**
     * This method returns the first argument given to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
        return value;
    }

    module.exports = identity;

},{}],116:[function(require,module,exports){
    var isArrayLikeObject = require('./isArrayLikeObject');

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]';

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
        // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
        return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
            (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }

    module.exports = isArguments;

},{"./isArrayLikeObject":119}],117:[function(require,module,exports){
    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @type {Function}
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    module.exports = isArray;

},{}],118:[function(require,module,exports){
    var getLength = require('./_getLength'),
        isFunction = require('./isFunction'),
        isLength = require('./isLength');

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
        return value != null && isLength(getLength(value)) && !isFunction(value);
    }

    module.exports = isArrayLike;

},{"./_getLength":62,"./isFunction":122,"./isLength":123}],119:[function(require,module,exports){
    var isArrayLike = require('./isArrayLike'),
        isObjectLike = require('./isObjectLike');

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
    }

    module.exports = isArrayLikeObject;

},{"./isArrayLike":118,"./isObjectLike":126}],120:[function(require,module,exports){
    var constant = require('./constant'),
        root = require('./_root');

    /** Used to determine if values are of the language type `Object`. */
    var objectTypes = {
        'function': true,
        'object': true
    };

    /** Detect free variable `exports`. */
    var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
        ? exports
        : undefined;

    /** Detect free variable `module`. */
    var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
        ? module
        : undefined;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = (freeModule && freeModule.exports === freeExports)
        ? freeExports
        : undefined;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined;

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = !Buffer ? constant(false) : function(value) {
        return value instanceof Buffer;
    };

    module.exports = isBuffer;

},{"./_root":95,"./constant":109}],121:[function(require,module,exports){
    var getTag = require('./_getTag'),
        isArguments = require('./isArguments'),
        isArray = require('./isArray'),
        isArrayLike = require('./isArrayLike'),
        isBuffer = require('./isBuffer'),
        isFunction = require('./isFunction'),
        isObjectLike = require('./isObjectLike'),
        isString = require('./isString'),
        keys = require('./keys');

    /** `Object#toString` result references. */
    var mapTag = '[object Map]',
        setTag = '[object Set]';

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;

    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
        if (isArrayLike(value) &&
            (isArray(value) || isString(value) || isFunction(value.splice) ||
            isArguments(value) || isBuffer(value))) {
            return !value.length;
        }
        if (isObjectLike(value)) {
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
                return !value.size;
            }
        }
        for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
                return false;
            }
        }
        return !(nonEnumShadows && keys(value).length);
    }

    module.exports = isEmpty;

},{"./_getTag":67,"./isArguments":116,"./isArray":117,"./isArrayLike":118,"./isBuffer":120,"./isFunction":122,"./isObjectLike":126,"./isString":127,"./keys":130}],122:[function(require,module,exports){
    var isObject = require('./isObject');

    /** `Object#toString` result references. */
    var funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]';

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 8 which returns 'object' for typed array and weak map constructors,
        // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
        var tag = isObject(value) ? objectToString.call(value) : '';
        return tag == funcTag || tag == genTag;
    }

    module.exports = isFunction;

},{"./isObject":125}],123:[function(require,module,exports){
    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length,
     *  else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
        return typeof value == 'number' &&
            value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    module.exports = isLength;

},{}],124:[function(require,module,exports){
    var isFunction = require('./isFunction'),
        isHostObject = require('./_isHostObject'),
        isObject = require('./isObject'),
        toSource = require('./_toSource');

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
        if (!isObject(value)) {
            return false;
        }
        var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
    }

    module.exports = isNative;

},{"./_isHostObject":75,"./_toSource":107,"./isFunction":122,"./isObject":125}],125:[function(require,module,exports){
    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
        var type = typeof value;
        return !!value && (type == 'object' || type == 'function');
    }

    module.exports = isObject;

},{}],126:[function(require,module,exports){
    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
        return !!value && typeof value == 'object';
    }

    module.exports = isObjectLike;

},{}],127:[function(require,module,exports){
    var isArray = require('./isArray'),
        isObjectLike = require('./isObjectLike');

    /** `Object#toString` result references. */
    var stringTag = '[object String]';

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
        return typeof value == 'string' ||
            (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
    }

    module.exports = isString;

},{"./isArray":117,"./isObjectLike":126}],128:[function(require,module,exports){
    var isObjectLike = require('./isObjectLike');

    /** `Object#toString` result references. */
    var symbolTag = '[object Symbol]';

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
        return typeof value == 'symbol' ||
            (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    module.exports = isSymbol;

},{"./isObjectLike":126}],129:[function(require,module,exports){
    var isLength = require('./isLength'),
        isObjectLike = require('./isObjectLike');

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
        typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
            typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
        typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
            typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
                typedArrayTags[errorTag] = typedArrayTags[funcTag] =
                    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
                        typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
                            typedArrayTags[setTag] = typedArrayTags[stringTag] =
                                typedArrayTags[weakMapTag] = false;

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
        return isObjectLike(value) &&
            isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    module.exports = isTypedArray;

},{"./isLength":123,"./isObjectLike":126}],130:[function(require,module,exports){
    var baseHas = require('./_baseHas'),
        baseKeys = require('./_baseKeys'),
        indexKeys = require('./_indexKeys'),
        isArrayLike = require('./isArrayLike'),
        isIndex = require('./_isIndex'),
        isPrototype = require('./_isPrototype');

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
        var isProto = isPrototype(object);
        if (!(isProto || isArrayLike(object))) {
            return baseKeys(object);
        }
        var indexes = indexKeys(object),
            skipIndexes = !!indexes,
            result = indexes || [],
            length = result.length;

        for (var key in object) {
            if (baseHas(object, key) &&
                !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
                !(isProto && key == 'constructor')) {
                result.push(key);
            }
        }
        return result;
    }

    module.exports = keys;

},{"./_baseHas":38,"./_baseKeys":44,"./_indexKeys":74,"./_isIndex":76,"./_isPrototype":80,"./isArrayLike":118}],131:[function(require,module,exports){
    var MapCache = require('./_MapCache');

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
        if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
            var args = arguments,
                key = resolver ? resolver.apply(this, args) : args[0],
                cache = memoized.cache;

            if (cache.has(key)) {
                return cache.get(key);
            }
            var result = func.apply(this, args);
            memoized.cache = cache.set(key, result);
            return result;
        };
        memoized.cache = new (memoize.Cache || MapCache);
        return memoized;
    }

// Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    module.exports = memoize;

},{"./_MapCache":17}],132:[function(require,module,exports){
    var baseProperty = require('./_baseProperty'),
        basePropertyDeep = require('./_basePropertyDeep'),
        isKey = require('./_isKey'),
        toKey = require('./_toKey');

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    module.exports = property;

},{"./_baseProperty":47,"./_basePropertyDeep":48,"./_isKey":78,"./_toKey":106}],133:[function(require,module,exports){
    var apply = require('./_apply'),
        toInteger = require('./toInteger');

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max;

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
 *   return what + ' ' + _.initial(names).join(', ') +
 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
 * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
        if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
        return function() {
            var args = arguments,
                index = -1,
                length = nativeMax(args.length - start, 0),
                array = Array(length);

            while (++index < length) {
                array[index] = args[start + index];
            }
            switch (start) {
                case 0: return func.call(this, array);
                case 1: return func.call(this, args[0], array);
                case 2: return func.call(this, args[0], args[1], array);
            }
            var otherArgs = Array(start + 1);
            index = -1;
            while (++index < start) {
                otherArgs[index] = args[index];
            }
            otherArgs[start] = array;
            return apply(func, this, otherArgs);
        };
    }

    module.exports = rest;

},{"./_apply":25,"./toInteger":135}],134:[function(require,module,exports){
    var toNumber = require('./toNumber');

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0,
        MAX_INTEGER = 1.7976931348623157e+308;

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
        if (!value) {
            return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
            var sign = (value < 0 ? -1 : 1);
            return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
    }

    module.exports = toFinite;

},{"./toNumber":136}],135:[function(require,module,exports){
    var toFinite = require('./toFinite');

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This function is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;

        return result === result ? (remainder ? result - remainder : result) : 0;
    }

    module.exports = toInteger;

},{"./toFinite":134}],136:[function(require,module,exports){
    var isFunction = require('./isFunction'),
        isObject = require('./isObject'),
        isSymbol = require('./isSymbol');

    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;

    /** Used to match leading and trailing whitespace. */
    var reTrim = /^\s+|\s+$/g;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
        if (typeof value == 'number') {
            return value;
        }
        if (isSymbol(value)) {
            return NAN;
        }
        if (isObject(value)) {
            var other = isFunction(value.valueOf) ? value.valueOf() : value;
            value = isObject(other) ? (other + '') : other;
        }
        if (typeof value != 'string') {
            return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return (isBinary || reIsOctal.test(value))
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : (reIsBadHex.test(value) ? NAN : +value);
    }

    module.exports = toNumber;

},{"./isFunction":122,"./isObject":125,"./isSymbol":128}],137:[function(require,module,exports){
    var createToPairs = require('./_createToPairs'),
        keys = require('./keys');

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    module.exports = toPairs;

},{"./_createToPairs":58,"./keys":130}],138:[function(require,module,exports){
    var baseToString = require('./_baseToString');

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
        return value == null ? '' : baseToString(value);
    }

    module.exports = toString;

},{"./_baseToString":51}],139:[function(require,module,exports){
    (function (process){
        'use strict';

        if (!process.version ||
            process.version.indexOf('v0.') === 0 ||
            process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
            module.exports = nextTick;
        } else {
            module.exports = process.nextTick;
        }

        function nextTick(fn, arg1, arg2, arg3) {
            if (typeof fn !== 'function') {
                throw new TypeError('"callback" argument must be a function');
            }
            var len = arguments.length;
            var args, i;
            switch (len) {
                case 0:
                case 1:
                    return process.nextTick(fn);
                case 2:
                    return process.nextTick(function afterTickOne() {
                        fn.call(null, arg1);
                    });
                case 3:
                    return process.nextTick(function afterTickTwo() {
                        fn.call(null, arg1, arg2);
                    });
                case 4:
                    return process.nextTick(function afterTickThree() {
                        fn.call(null, arg1, arg2, arg3);
                    });
                default:
                    args = new Array(len - 1);
                    i = 0;
                    while (i < args.length) {
                        args[i++] = arguments[i];
                    }
                    return process.nextTick(function afterTick() {
                        fn.apply(null, args);
                    });
            }
        }

    }).call(this,require('_process'))
},{"_process":4}],140:[function(require,module,exports){
    module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":141}],141:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

    'use strict';

    /*<replacement>*/

    var objectKeys = Object.keys || function (obj) {
            var keys = [];
            for (var key in obj) {
                keys.push(key);
            }return keys;
        };
    /*</replacement>*/

    module.exports = Duplex;

    /*<replacement>*/
    var processNextTick = require('process-nextick-args');
    /*</replacement>*/

    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/

    var Readable = require('./_stream_readable');
    var Writable = require('./_stream_writable');

    util.inherits(Duplex, Readable);

    var keys = objectKeys(Writable.prototype);
    for (var v = 0; v < keys.length; v++) {
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }

    function Duplex(options) {
        if (!(this instanceof Duplex)) return new Duplex(options);

        Readable.call(this, options);
        Writable.call(this, options);

        if (options && options.readable === false) this.readable = false;

        if (options && options.writable === false) this.writable = false;

        this.allowHalfOpen = true;
        if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

        this.once('end', onend);
    }

// the no-half-open enforcer
    function onend() {
        // if we allow half-open state, or if the writable side ended,
        // then we're ok.
        if (this.allowHalfOpen || this._writableState.ended) return;

        // no more data can be written.
        // But allow more writes to happen in this tick.
        processNextTick(onEndNT, this);
    }

    function onEndNT(self) {
        self.end();
    }

    function forEach(xs, f) {
        for (var i = 0, l = xs.length; i < l; i++) {
            f(xs[i], i);
        }
    }
},{"./_stream_readable":143,"./_stream_writable":145,"core-util-is":6,"inherits":9,"process-nextick-args":139}],142:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

    'use strict';

    module.exports = PassThrough;

    var Transform = require('./_stream_transform');

    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/

    util.inherits(PassThrough, Transform);

    function PassThrough(options) {
        if (!(this instanceof PassThrough)) return new PassThrough(options);

        Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
        cb(null, chunk);
    };
},{"./_stream_transform":144,"core-util-is":6,"inherits":9}],143:[function(require,module,exports){
    (function (process){
        'use strict';

        module.exports = Readable;

        /*<replacement>*/
        var processNextTick = require('process-nextick-args');
        /*</replacement>*/

        /*<replacement>*/
        var isArray = require('isarray');
        /*</replacement>*/

        /*<replacement>*/
        var Buffer = require('buffer').Buffer;
        /*</replacement>*/

        Readable.ReadableState = ReadableState;

        var EE = require('events');

        /*<replacement>*/
        var EElistenerCount = function (emitter, type) {
            return emitter.listeners(type).length;
        };
        /*</replacement>*/

        /*<replacement>*/
        var Stream;
        (function () {
            try {
                Stream = require('st' + 'ream');
            } catch (_) {} finally {
                if (!Stream) Stream = require('events').EventEmitter;
            }
        })();
        /*</replacement>*/

        var Buffer = require('buffer').Buffer;

        /*<replacement>*/
        var util = require('core-util-is');
        util.inherits = require('inherits');
        /*</replacement>*/

        /*<replacement>*/
        var debugUtil = require('util');
        var debug = undefined;
        if (debugUtil && debugUtil.debuglog) {
            debug = debugUtil.debuglog('stream');
        } else {
            debug = function () {};
        }
        /*</replacement>*/

        var StringDecoder;

        util.inherits(Readable, Stream);

        var Duplex;
        function ReadableState(options, stream) {
            Duplex = Duplex || require('./_stream_duplex');

            options = options || {};

            // object stream flag. Used to make read(n) ignore n and to
            // make all the buffer merging and length checks go away
            this.objectMode = !!options.objectMode;

            if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

            // the point at which it stops calling _read() to fill the buffer
            // Note: 0 is a valid value, means "don't call _read preemptively ever"
            var hwm = options.highWaterMark;
            var defaultHwm = this.objectMode ? 16 : 16 * 1024;
            this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

            // cast to ints.
            this.highWaterMark = ~ ~this.highWaterMark;

            this.buffer = [];
            this.length = 0;
            this.pipes = null;
            this.pipesCount = 0;
            this.flowing = null;
            this.ended = false;
            this.endEmitted = false;
            this.reading = false;

            // a flag to be able to tell if the onwrite cb is called immediately,
            // or on a later tick.  We set this to true at first, because any
            // actions that shouldn't happen until "later" should generally also
            // not happen before the first write call.
            this.sync = true;

            // whenever we return null, then we set a flag to say
            // that we're awaiting a 'readable' event emission.
            this.needReadable = false;
            this.emittedReadable = false;
            this.readableListening = false;
            this.resumeScheduled = false;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || 'utf8';

            // when piping, we only care about 'readable' events that happen
            // after read()ing all the bytes and not getting any pushback.
            this.ranOut = false;

            // the number of writers that are awaiting a drain event in .pipe()s
            this.awaitDrain = 0;

            // if true, a maybeReadMore has been scheduled
            this.readingMore = false;

            this.decoder = null;
            this.encoding = null;
            if (options.encoding) {
                if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                this.decoder = new StringDecoder(options.encoding);
                this.encoding = options.encoding;
            }
        }

        var Duplex;
        function Readable(options) {
            Duplex = Duplex || require('./_stream_duplex');

            if (!(this instanceof Readable)) return new Readable(options);

            this._readableState = new ReadableState(options, this);

            // legacy
            this.readable = true;

            if (options && typeof options.read === 'function') this._read = options.read;

            Stream.call(this);
        }

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
        Readable.prototype.push = function (chunk, encoding) {
            var state = this._readableState;

            if (!state.objectMode && typeof chunk === 'string') {
                encoding = encoding || state.defaultEncoding;
                if (encoding !== state.encoding) {
                    chunk = new Buffer(chunk, encoding);
                    encoding = '';
                }
            }

            return readableAddChunk(this, state, chunk, encoding, false);
        };

// Unshift should *always* be something directly out of read()
        Readable.prototype.unshift = function (chunk) {
            var state = this._readableState;
            return readableAddChunk(this, state, chunk, '', true);
        };

        Readable.prototype.isPaused = function () {
            return this._readableState.flowing === false;
        };

        function readableAddChunk(stream, state, chunk, encoding, addToFront) {
            var er = chunkInvalid(state, chunk);
            if (er) {
                stream.emit('error', er);
            } else if (chunk === null) {
                state.reading = false;
                onEofChunk(stream, state);
            } else if (state.objectMode || chunk && chunk.length > 0) {
                if (state.ended && !addToFront) {
                    var e = new Error('stream.push() after EOF');
                    stream.emit('error', e);
                } else if (state.endEmitted && addToFront) {
                    var e = new Error('stream.unshift() after end event');
                    stream.emit('error', e);
                } else {
                    var skipAdd;
                    if (state.decoder && !addToFront && !encoding) {
                        chunk = state.decoder.write(chunk);
                        skipAdd = !state.objectMode && chunk.length === 0;
                    }

                    if (!addToFront) state.reading = false;

                    // Don't add to the buffer if we've decoded to an empty string chunk and
                    // we're not in object mode
                    if (!skipAdd) {
                        // if we want the data now, just emit it.
                        if (state.flowing && state.length === 0 && !state.sync) {
                            stream.emit('data', chunk);
                            stream.read(0);
                        } else {
                            // update the buffer info.
                            state.length += state.objectMode ? 1 : chunk.length;
                            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

                            if (state.needReadable) emitReadable(stream);
                        }
                    }

                    maybeReadMore(stream, state);
                }
            } else if (!addToFront) {
                state.reading = false;
            }

            return needMoreData(state);
        }

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
        function needMoreData(state) {
            return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
        }

// backwards compatibility.
        Readable.prototype.setEncoding = function (enc) {
            if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
            this._readableState.decoder = new StringDecoder(enc);
            this._readableState.encoding = enc;
            return this;
        };

// Don't raise the hwm > 8MB
        var MAX_HWM = 0x800000;
        function computeNewHighWaterMark(n) {
            if (n >= MAX_HWM) {
                n = MAX_HWM;
            } else {
                // Get the next highest power of 2
                n--;
                n |= n >>> 1;
                n |= n >>> 2;
                n |= n >>> 4;
                n |= n >>> 8;
                n |= n >>> 16;
                n++;
            }
            return n;
        }

        function howMuchToRead(n, state) {
            if (state.length === 0 && state.ended) return 0;

            if (state.objectMode) return n === 0 ? 0 : 1;

            if (n === null || isNaN(n)) {
                // only flow one buffer at a time
                if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;
            }

            if (n <= 0) return 0;

            // If we're asking for more than the target buffer level,
            // then raise the water mark.  Bump up to the next highest
            // power of 2, to prevent increasing it excessively in tiny
            // amounts.
            if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);

            // don't have that much.  return null, unless we've ended.
            if (n > state.length) {
                if (!state.ended) {
                    state.needReadable = true;
                    return 0;
                } else {
                    return state.length;
                }
            }

            return n;
        }

// you can override either this method, or the async _read(n) below.
        Readable.prototype.read = function (n) {
            debug('read', n);
            var state = this._readableState;
            var nOrig = n;

            if (typeof n !== 'number' || n > 0) state.emittedReadable = false;

            // if we're doing read(0) to trigger a readable event, but we
            // already have a bunch of data in the buffer, then just trigger
            // the 'readable' event and move on.
            if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                debug('read: emitReadable', state.length, state.ended);
                if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
                return null;
            }

            n = howMuchToRead(n, state);

            // if we've ended, and we're now clear, then finish it up.
            if (n === 0 && state.ended) {
                if (state.length === 0) endReadable(this);
                return null;
            }

            // All the actual chunk generation logic needs to be
            // *below* the call to _read.  The reason is that in certain
            // synthetic stream cases, such as passthrough streams, _read
            // may be a completely synchronous operation which may change
            // the state of the read buffer, providing enough data when
            // before there was *not* enough.
            //
            // So, the steps are:
            // 1. Figure out what the state of things will be after we do
            // a read from the buffer.
            //
            // 2. If that resulting state will trigger a _read, then call _read.
            // Note that this may be asynchronous, or synchronous.  Yes, it is
            // deeply ugly to write APIs this way, but that still doesn't mean
            // that the Readable class should behave improperly, as streams are
            // designed to be sync/async agnostic.
            // Take note if the _read call is sync or async (ie, if the read call
            // has returned yet), so that we know whether or not it's safe to emit
            // 'readable' etc.
            //
            // 3. Actually pull the requested chunks out of the buffer and return.

            // if we need a readable event, then we need to do some reading.
            var doRead = state.needReadable;
            debug('need readable', doRead);

            // if we currently have less than the highWaterMark, then also read some
            if (state.length === 0 || state.length - n < state.highWaterMark) {
                doRead = true;
                debug('length less than watermark', doRead);
            }

            // however, if we've ended, then there's no point, and if we're already
            // reading, then it's unnecessary.
            if (state.ended || state.reading) {
                doRead = false;
                debug('reading or ended', doRead);
            }

            if (doRead) {
                debug('do read');
                state.reading = true;
                state.sync = true;
                // if the length is currently zero, then we *need* a readable event.
                if (state.length === 0) state.needReadable = true;
                // call internal read method
                this._read(state.highWaterMark);
                state.sync = false;
            }

            // If _read pushed data synchronously, then `reading` will be false,
            // and we need to re-evaluate how much data we can return to the user.
            if (doRead && !state.reading) n = howMuchToRead(nOrig, state);

            var ret;
            if (n > 0) ret = fromList(n, state);else ret = null;

            if (ret === null) {
                state.needReadable = true;
                n = 0;
            }

            state.length -= n;

            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            if (state.length === 0 && !state.ended) state.needReadable = true;

            // If we tried to read() past the EOF, then emit end on the next tick.
            if (nOrig !== n && state.ended && state.length === 0) endReadable(this);

            if (ret !== null) this.emit('data', ret);

            return ret;
        };

        function chunkInvalid(state, chunk) {
            var er = null;
            if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
                er = new TypeError('Invalid non-string/buffer chunk');
            }
            return er;
        }

        function onEofChunk(stream, state) {
            if (state.ended) return;
            if (state.decoder) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) {
                    state.buffer.push(chunk);
                    state.length += state.objectMode ? 1 : chunk.length;
                }
            }
            state.ended = true;

            // emit 'readable' now to make sure it gets picked up.
            emitReadable(stream);
        }

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
        function emitReadable(stream) {
            var state = stream._readableState;
            state.needReadable = false;
            if (!state.emittedReadable) {
                debug('emitReadable', state.flowing);
                state.emittedReadable = true;
                if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
            }
        }

        function emitReadable_(stream) {
            debug('emit readable');
            stream.emit('readable');
            flow(stream);
        }

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
        function maybeReadMore(stream, state) {
            if (!state.readingMore) {
                state.readingMore = true;
                processNextTick(maybeReadMore_, stream, state);
            }
        }

        function maybeReadMore_(stream, state) {
            var len = state.length;
            while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                debug('maybeReadMore read 0');
                stream.read(0);
                if (len === state.length)
                // didn't get any data, stop spinning.
                    break;else len = state.length;
            }
            state.readingMore = false;
        }

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
        Readable.prototype._read = function (n) {
            this.emit('error', new Error('not implemented'));
        };

        Readable.prototype.pipe = function (dest, pipeOpts) {
            var src = this;
            var state = this._readableState;

            switch (state.pipesCount) {
                case 0:
                    state.pipes = dest;
                    break;
                case 1:
                    state.pipes = [state.pipes, dest];
                    break;
                default:
                    state.pipes.push(dest);
                    break;
            }
            state.pipesCount += 1;
            debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

            var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

            var endFn = doEnd ? onend : cleanup;
            if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

            dest.on('unpipe', onunpipe);
            function onunpipe(readable) {
                debug('onunpipe');
                if (readable === src) {
                    cleanup();
                }
            }

            function onend() {
                debug('onend');
                dest.end();
            }

            // when the dest drains, it reduces the awaitDrain counter
            // on the source.  This would be more elegant with a .once()
            // handler in flow(), but adding and removing repeatedly is
            // too slow.
            var ondrain = pipeOnDrain(src);
            dest.on('drain', ondrain);

            var cleanedUp = false;
            function cleanup() {
                debug('cleanup');
                // cleanup event handlers once the pipe is broken
                dest.removeListener('close', onclose);
                dest.removeListener('finish', onfinish);
                dest.removeListener('drain', ondrain);
                dest.removeListener('error', onerror);
                dest.removeListener('unpipe', onunpipe);
                src.removeListener('end', onend);
                src.removeListener('end', cleanup);
                src.removeListener('data', ondata);

                cleanedUp = true;

                // if the reader is waiting for a drain event from this
                // specific writer, then it would cause it to never start
                // flowing again.
                // So, if this is awaiting a drain, then we just call it now.
                // If we don't know, then assume that we are waiting for one.
                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
            }

            src.on('data', ondata);
            function ondata(chunk) {
                debug('ondata');
                var ret = dest.write(chunk);
                if (false === ret) {
                    // If the user unpiped during `dest.write()`, it is possible
                    // to get stuck in a permanently paused state if that write
                    // also returned false.
                    if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {
                        debug('false write response, pause', src._readableState.awaitDrain);
                        src._readableState.awaitDrain++;
                    }
                    src.pause();
                }
            }

            // if the dest has an error, then stop piping into it.
            // however, don't suppress the throwing behavior for this.
            function onerror(er) {
                debug('onerror', er);
                unpipe();
                dest.removeListener('error', onerror);
                if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
            }
            // This is a brutally ugly hack to make sure that our error handler
            // is attached before any userland ones.  NEVER DO THIS.
            if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];

            // Both close and finish should trigger unpipe, but only once.
            function onclose() {
                dest.removeListener('finish', onfinish);
                unpipe();
            }
            dest.once('close', onclose);
            function onfinish() {
                debug('onfinish');
                dest.removeListener('close', onclose);
                unpipe();
            }
            dest.once('finish', onfinish);

            function unpipe() {
                debug('unpipe');
                src.unpipe(dest);
            }

            // tell the dest that it's being piped to
            dest.emit('pipe', src);

            // start the flow if it hasn't been started already.
            if (!state.flowing) {
                debug('pipe resume');
                src.resume();
            }

            return dest;
        };

        function pipeOnDrain(src) {
            return function () {
                var state = src._readableState;
                debug('pipeOnDrain', state.awaitDrain);
                if (state.awaitDrain) state.awaitDrain--;
                if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                    state.flowing = true;
                    flow(src);
                }
            };
        }

        Readable.prototype.unpipe = function (dest) {
            var state = this._readableState;

            // if we're not piping anywhere, then do nothing.
            if (state.pipesCount === 0) return this;

            // just one destination.  most common case.
            if (state.pipesCount === 1) {
                // passed in one, but it's not the right one.
                if (dest && dest !== state.pipes) return this;

                if (!dest) dest = state.pipes;

                // got a match.
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                if (dest) dest.emit('unpipe', this);
                return this;
            }

            // slow case. multiple pipe destinations.

            if (!dest) {
                // remove all.
                var dests = state.pipes;
                var len = state.pipesCount;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;

                for (var _i = 0; _i < len; _i++) {
                    dests[_i].emit('unpipe', this);
                }return this;
            }

            // try to find the right one.
            var i = indexOf(state.pipes, dest);
            if (i === -1) return this;

            state.pipes.splice(i, 1);
            state.pipesCount -= 1;
            if (state.pipesCount === 1) state.pipes = state.pipes[0];

            dest.emit('unpipe', this);

            return this;
        };

// set up data events if they are asked for
// Ensure readable listeners eventually get something
        Readable.prototype.on = function (ev, fn) {
            var res = Stream.prototype.on.call(this, ev, fn);

            // If listening to data, and it has not explicitly been paused,
            // then call resume to start the flow of data on the next tick.
            if (ev === 'data' && false !== this._readableState.flowing) {
                this.resume();
            }

            if (ev === 'readable' && !this._readableState.endEmitted) {
                var state = this._readableState;
                if (!state.readableListening) {
                    state.readableListening = true;
                    state.emittedReadable = false;
                    state.needReadable = true;
                    if (!state.reading) {
                        processNextTick(nReadingNextTick, this);
                    } else if (state.length) {
                        emitReadable(this, state);
                    }
                }
            }

            return res;
        };
        Readable.prototype.addListener = Readable.prototype.on;

        function nReadingNextTick(self) {
            debug('readable nexttick read 0');
            self.read(0);
        }

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
        Readable.prototype.resume = function () {
            var state = this._readableState;
            if (!state.flowing) {
                debug('resume');
                state.flowing = true;
                resume(this, state);
            }
            return this;
        };

        function resume(stream, state) {
            if (!state.resumeScheduled) {
                state.resumeScheduled = true;
                processNextTick(resume_, stream, state);
            }
        }

        function resume_(stream, state) {
            if (!state.reading) {
                debug('resume read 0');
                stream.read(0);
            }

            state.resumeScheduled = false;
            stream.emit('resume');
            flow(stream);
            if (state.flowing && !state.reading) stream.read(0);
        }

        Readable.prototype.pause = function () {
            debug('call pause flowing=%j', this._readableState.flowing);
            if (false !== this._readableState.flowing) {
                debug('pause');
                this._readableState.flowing = false;
                this.emit('pause');
            }
            return this;
        };

        function flow(stream) {
            var state = stream._readableState;
            debug('flow', state.flowing);
            if (state.flowing) {
                do {
                    var chunk = stream.read();
                } while (null !== chunk && state.flowing);
            }
        }

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
        Readable.prototype.wrap = function (stream) {
            var state = this._readableState;
            var paused = false;

            var self = this;
            stream.on('end', function () {
                debug('wrapped end');
                if (state.decoder && !state.ended) {
                    var chunk = state.decoder.end();
                    if (chunk && chunk.length) self.push(chunk);
                }

                self.push(null);
            });

            stream.on('data', function (chunk) {
                debug('wrapped data');
                if (state.decoder) chunk = state.decoder.write(chunk);

                // don't skip over falsy values in objectMode
                if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

                var ret = self.push(chunk);
                if (!ret) {
                    paused = true;
                    stream.pause();
                }
            });

            // proxy all the other methods.
            // important when wrapping filters and duplexes.
            for (var i in stream) {
                if (this[i] === undefined && typeof stream[i] === 'function') {
                    this[i] = function (method) {
                        return function () {
                            return stream[method].apply(stream, arguments);
                        };
                    }(i);
                }
            }

            // proxy certain important events.
            var events = ['error', 'close', 'destroy', 'pause', 'resume'];
            forEach(events, function (ev) {
                stream.on(ev, self.emit.bind(self, ev));
            });

            // when we try to consume some more bytes, simply unpause the
            // underlying stream.
            self._read = function (n) {
                debug('wrapped _read', n);
                if (paused) {
                    paused = false;
                    stream.resume();
                }
            };

            return self;
        };

// exposed for testing purposes only.
        Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
        function fromList(n, state) {
            var list = state.buffer;
            var length = state.length;
            var stringMode = !!state.decoder;
            var objectMode = !!state.objectMode;
            var ret;

            // nothing in the list, definitely empty.
            if (list.length === 0) return null;

            if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {
                // read it all, truncate the array.
                if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);
                list.length = 0;
            } else {
                // read just some of it.
                if (n < list[0].length) {
                    // just take a part of the first list item.
                    // slice is the same for buffers and strings.
                    var buf = list[0];
                    ret = buf.slice(0, n);
                    list[0] = buf.slice(n);
                } else if (n === list[0].length) {
                    // first list is a perfect match
                    ret = list.shift();
                } else {
                    // complex case.
                    // we have enough to cover it, but it spans past the first buffer.
                    if (stringMode) ret = '';else ret = new Buffer(n);

                    var c = 0;
                    for (var i = 0, l = list.length; i < l && c < n; i++) {
                        var buf = list[0];
                        var cpy = Math.min(n - c, buf.length);

                        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);

                        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();

                        c += cpy;
                    }
                }
            }

            return ret;
        }

        function endReadable(stream) {
            var state = stream._readableState;

            // If we get here before consuming all the bytes, then that is a
            // bug in node.  Should never happen.
            if (state.length > 0) throw new Error('endReadable called on non-empty stream');

            if (!state.endEmitted) {
                state.ended = true;
                processNextTick(endReadableNT, state, stream);
            }
        }

        function endReadableNT(state, stream) {
            // Check that we didn't get one last unshift.
            if (!state.endEmitted && state.length === 0) {
                state.endEmitted = true;
                stream.readable = false;
                stream.emit('end');
            }
        }

        function forEach(xs, f) {
            for (var i = 0, l = xs.length; i < l; i++) {
                f(xs[i], i);
            }
        }

        function indexOf(xs, x) {
            for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x) return i;
            }
            return -1;
        }
    }).call(this,require('_process'))
},{"./_stream_duplex":141,"_process":4,"buffer":5,"core-util-is":6,"events":7,"inherits":9,"isarray":11,"process-nextick-args":139,"string_decoder/":153,"util":3}],144:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

    'use strict';

    module.exports = Transform;

    var Duplex = require('./_stream_duplex');

    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/

    util.inherits(Transform, Duplex);

    function TransformState(stream) {
        this.afterTransform = function (er, data) {
            return afterTransform(stream, er, data);
        };

        this.needTransform = false;
        this.transforming = false;
        this.writecb = null;
        this.writechunk = null;
        this.writeencoding = null;
    }

    function afterTransform(stream, er, data) {
        var ts = stream._transformState;
        ts.transforming = false;

        var cb = ts.writecb;

        if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

        ts.writechunk = null;
        ts.writecb = null;

        if (data !== null && data !== undefined) stream.push(data);

        cb(er);

        var rs = stream._readableState;
        rs.reading = false;
        if (rs.needReadable || rs.length < rs.highWaterMark) {
            stream._read(rs.highWaterMark);
        }
    }

    function Transform(options) {
        if (!(this instanceof Transform)) return new Transform(options);

        Duplex.call(this, options);

        this._transformState = new TransformState(this);

        // when the writable side finishes, then flush out anything remaining.
        var stream = this;

        // start out asking for a readable event once data is transformed.
        this._readableState.needReadable = true;

        // we have implemented the _read method, and done the other things
        // that Readable wants before the first _read call, so unset the
        // sync guard flag.
        this._readableState.sync = false;

        if (options) {
            if (typeof options.transform === 'function') this._transform = options.transform;

            if (typeof options.flush === 'function') this._flush = options.flush;
        }

        this.once('prefinish', function () {
            if (typeof this._flush === 'function') this._flush(function (er) {
                done(stream, er);
            });else done(stream);
        });
    }

    Transform.prototype.push = function (chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
    };

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function (chunk, encoding, cb) {
        throw new Error('not implemented');
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;
        if (!ts.transforming) {
            var rs = this._readableState;
            if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
        }
    };

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
    Transform.prototype._read = function (n) {
        var ts = this._transformState;

        if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
            ts.transforming = true;
            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
            // mark that we need a transform, so that any data that comes in
            // will get processed, now that we've asked for it.
            ts.needTransform = true;
        }
    };

    function done(stream, er) {
        if (er) return stream.emit('error', er);

        // if there's nothing in the write buffer, then that means
        // that nothing more will ever be provided
        var ws = stream._writableState;
        var ts = stream._transformState;

        if (ws.length) throw new Error('calling transform done when ws.length != 0');

        if (ts.transforming) throw new Error('calling transform done when still transforming');

        return stream.push(null);
    }
},{"./_stream_duplex":141,"core-util-is":6,"inherits":9}],145:[function(require,module,exports){
    (function (process){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

        'use strict';

        module.exports = Writable;

        /*<replacement>*/
        var processNextTick = require('process-nextick-args');
        /*</replacement>*/

        /*<replacement>*/
        var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
        /*</replacement>*/

        /*<replacement>*/
        var Buffer = require('buffer').Buffer;
        /*</replacement>*/

        Writable.WritableState = WritableState;

        /*<replacement>*/
        var util = require('core-util-is');
        util.inherits = require('inherits');
        /*</replacement>*/

        /*<replacement>*/
        var internalUtil = {
            deprecate: require('util-deprecate')
        };
        /*</replacement>*/

        /*<replacement>*/
        var Stream;
        (function () {
            try {
                Stream = require('st' + 'ream');
            } catch (_) {} finally {
                if (!Stream) Stream = require('events').EventEmitter;
            }
        })();
        /*</replacement>*/

        var Buffer = require('buffer').Buffer;

        util.inherits(Writable, Stream);

        function nop() {}

        function WriteReq(chunk, encoding, cb) {
            this.chunk = chunk;
            this.encoding = encoding;
            this.callback = cb;
            this.next = null;
        }

        var Duplex;
        function WritableState(options, stream) {
            Duplex = Duplex || require('./_stream_duplex');

            options = options || {};

            // object stream flag to indicate whether or not this stream
            // contains buffers or objects.
            this.objectMode = !!options.objectMode;

            if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

            // the point at which write() starts returning false
            // Note: 0 is a valid value, means that we always return false if
            // the entire buffer is not flushed immediately on write()
            var hwm = options.highWaterMark;
            var defaultHwm = this.objectMode ? 16 : 16 * 1024;
            this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

            // cast to ints.
            this.highWaterMark = ~ ~this.highWaterMark;

            this.needDrain = false;
            // at the start of calling end()
            this.ending = false;
            // when end() has been called, and returned
            this.ended = false;
            // when 'finish' is emitted
            this.finished = false;

            // should we decode strings into buffers before passing to _write?
            // this is here so that some node-core streams can optimize string
            // handling at a lower level.
            var noDecode = options.decodeStrings === false;
            this.decodeStrings = !noDecode;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || 'utf8';

            // not an actual buffer we keep track of, but a measurement
            // of how much we're waiting to get pushed to some underlying
            // socket or file.
            this.length = 0;

            // a flag to see when we're in the middle of a write.
            this.writing = false;

            // when true all writes will be buffered until .uncork() call
            this.corked = 0;

            // a flag to be able to tell if the onwrite cb is called immediately,
            // or on a later tick.  We set this to true at first, because any
            // actions that shouldn't happen until "later" should generally also
            // not happen before the first write call.
            this.sync = true;

            // a flag to know if we're processing previously buffered items, which
            // may call the _write() callback in the same tick, so that we don't
            // end up in an overlapped onwrite situation.
            this.bufferProcessing = false;

            // the callback that's passed to _write(chunk,cb)
            this.onwrite = function (er) {
                onwrite(stream, er);
            };

            // the callback that the user supplies to write(chunk,encoding,cb)
            this.writecb = null;

            // the amount that is being written when _write is called.
            this.writelen = 0;

            this.bufferedRequest = null;
            this.lastBufferedRequest = null;

            // number of pending user-supplied write callbacks
            // this must be 0 before 'finish' can be emitted
            this.pendingcb = 0;

            // emit prefinish if the only thing we're waiting for is _write cbs
            // This is relevant for synchronous Transform streams
            this.prefinished = false;

            // True if the error was already emitted and should not be thrown again
            this.errorEmitted = false;

            // count buffered requests
            this.bufferedRequestCount = 0;

            // create the two objects needed to store the corked requests
            // they are not a linked list, as no new elements are inserted in there
            this.corkedRequestsFree = new CorkedRequest(this);
            this.corkedRequestsFree.next = new CorkedRequest(this);
        }

        WritableState.prototype.getBuffer = function writableStateGetBuffer() {
            var current = this.bufferedRequest;
            var out = [];
            while (current) {
                out.push(current);
                current = current.next;
            }
            return out;
        };

        (function () {
            try {
                Object.defineProperty(WritableState.prototype, 'buffer', {
                    get: internalUtil.deprecate(function () {
                        return this.getBuffer();
                    }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
                });
            } catch (_) {}
        })();

        var Duplex;
        function Writable(options) {
            Duplex = Duplex || require('./_stream_duplex');

            // Writable ctor is applied to Duplexes, though they're not
            // instanceof Writable, they're instanceof Readable.
            if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

            this._writableState = new WritableState(options, this);

            // legacy.
            this.writable = true;

            if (options) {
                if (typeof options.write === 'function') this._write = options.write;

                if (typeof options.writev === 'function') this._writev = options.writev;
            }

            Stream.call(this);
        }

// Otherwise people can pipe Writable streams, which is just wrong.
        Writable.prototype.pipe = function () {
            this.emit('error', new Error('Cannot pipe. Not readable.'));
        };

        function writeAfterEnd(stream, cb) {
            var er = new Error('write after end');
            // TODO: defer error events consistently everywhere, not just the cb
            stream.emit('error', er);
            processNextTick(cb, er);
        }

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
        function validChunk(stream, state, chunk, cb) {
            var valid = true;

            if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
                var er = new TypeError('Invalid non-string/buffer chunk');
                stream.emit('error', er);
                processNextTick(cb, er);
                valid = false;
            }
            return valid;
        }

        Writable.prototype.write = function (chunk, encoding, cb) {
            var state = this._writableState;
            var ret = false;

            if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
            }

            if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

            if (typeof cb !== 'function') cb = nop;

            if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
                state.pendingcb++;
                ret = writeOrBuffer(this, state, chunk, encoding, cb);
            }

            return ret;
        };

        Writable.prototype.cork = function () {
            var state = this._writableState;

            state.corked++;
        };

        Writable.prototype.uncork = function () {
            var state = this._writableState;

            if (state.corked) {
                state.corked--;

                if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
            }
        };

        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
            // node::ParseEncoding() requires lower case.
            if (typeof encoding === 'string') encoding = encoding.toLowerCase();
            if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
            this._writableState.defaultEncoding = encoding;
        };

        function decodeChunk(state, chunk, encoding) {
            if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                chunk = new Buffer(chunk, encoding);
            }
            return chunk;
        }

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
        function writeOrBuffer(stream, state, chunk, encoding, cb) {
            chunk = decodeChunk(state, chunk, encoding);

            if (Buffer.isBuffer(chunk)) encoding = 'buffer';
            var len = state.objectMode ? 1 : chunk.length;

            state.length += len;

            var ret = state.length < state.highWaterMark;
            // we must ensure that previous needDrain will not be reset to false.
            if (!ret) state.needDrain = true;

            if (state.writing || state.corked) {
                var last = state.lastBufferedRequest;
                state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
                if (last) {
                    last.next = state.lastBufferedRequest;
                } else {
                    state.bufferedRequest = state.lastBufferedRequest;
                }
                state.bufferedRequestCount += 1;
            } else {
                doWrite(stream, state, false, len, chunk, encoding, cb);
            }

            return ret;
        }

        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
            state.writelen = len;
            state.writecb = cb;
            state.writing = true;
            state.sync = true;
            if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
            state.sync = false;
        }

        function onwriteError(stream, state, sync, er, cb) {
            --state.pendingcb;
            if (sync) processNextTick(cb, er);else cb(er);

            stream._writableState.errorEmitted = true;
            stream.emit('error', er);
        }

        function onwriteStateUpdate(state) {
            state.writing = false;
            state.writecb = null;
            state.length -= state.writelen;
            state.writelen = 0;
        }

        function onwrite(stream, er) {
            var state = stream._writableState;
            var sync = state.sync;
            var cb = state.writecb;

            onwriteStateUpdate(state);

            if (er) onwriteError(stream, state, sync, er, cb);else {
                // Check if we're actually ready to finish, but don't emit yet
                var finished = needFinish(state);

                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                    clearBuffer(stream, state);
                }

                if (sync) {
                    /*<replacement>*/
                    asyncWrite(afterWrite, stream, state, finished, cb);
                    /*</replacement>*/
                } else {
                    afterWrite(stream, state, finished, cb);
                }
            }
        }

        function afterWrite(stream, state, finished, cb) {
            if (!finished) onwriteDrain(stream, state);
            state.pendingcb--;
            cb();
            finishMaybe(stream, state);
        }

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
        function onwriteDrain(stream, state) {
            if (state.length === 0 && state.needDrain) {
                state.needDrain = false;
                stream.emit('drain');
            }
        }

// if there's something in the buffer waiting, then process it
        function clearBuffer(stream, state) {
            state.bufferProcessing = true;
            var entry = state.bufferedRequest;

            if (stream._writev && entry && entry.next) {
                // Fast case, write everything using _writev()
                var l = state.bufferedRequestCount;
                var buffer = new Array(l);
                var holder = state.corkedRequestsFree;
                holder.entry = entry;

                var count = 0;
                while (entry) {
                    buffer[count] = entry;
                    entry = entry.next;
                    count += 1;
                }

                doWrite(stream, state, true, state.length, buffer, '', holder.finish);

                // doWrite is always async, defer these to save a bit of time
                // as the hot path ends with doWrite
                state.pendingcb++;
                state.lastBufferedRequest = null;
                state.corkedRequestsFree = holder.next;
                holder.next = null;
            } else {
                // Slow case, write chunks one-by-one
                while (entry) {
                    var chunk = entry.chunk;
                    var encoding = entry.encoding;
                    var cb = entry.callback;
                    var len = state.objectMode ? 1 : chunk.length;

                    doWrite(stream, state, false, len, chunk, encoding, cb);
                    entry = entry.next;
                    // if we didn't call the onwrite immediately, then
                    // it means that we need to wait until it does.
                    // also, that means that the chunk and cb are currently
                    // being processed, so move the buffer counter past them.
                    if (state.writing) {
                        break;
                    }
                }

                if (entry === null) state.lastBufferedRequest = null;
            }

            state.bufferedRequestCount = 0;
            state.bufferedRequest = entry;
            state.bufferProcessing = false;
        }

        Writable.prototype._write = function (chunk, encoding, cb) {
            cb(new Error('not implemented'));
        };

        Writable.prototype._writev = null;

        Writable.prototype.end = function (chunk, encoding, cb) {
            var state = this._writableState;

            if (typeof chunk === 'function') {
                cb = chunk;
                chunk = null;
                encoding = null;
            } else if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
            }

            if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

            // .end() fully uncorks
            if (state.corked) {
                state.corked = 1;
                this.uncork();
            }

            // ignore unnecessary end() calls.
            if (!state.ending && !state.finished) endWritable(this, state, cb);
        };

        function needFinish(state) {
            return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
        }

        function prefinish(stream, state) {
            if (!state.prefinished) {
                state.prefinished = true;
                stream.emit('prefinish');
            }
        }

        function finishMaybe(stream, state) {
            var need = needFinish(state);
            if (need) {
                if (state.pendingcb === 0) {
                    prefinish(stream, state);
                    state.finished = true;
                    stream.emit('finish');
                } else {
                    prefinish(stream, state);
                }
            }
            return need;
        }

        function endWritable(stream, state, cb) {
            state.ending = true;
            finishMaybe(stream, state);
            if (cb) {
                if (state.finished) processNextTick(cb);else stream.once('finish', cb);
            }
            state.ended = true;
            stream.writable = false;
        }

// It seems a linked list but it is not
// there will be only 2 of these for each stream
        function CorkedRequest(state) {
            var _this = this;

            this.next = null;
            this.entry = null;

            this.finish = function (err) {
                var entry = _this.entry;
                _this.entry = null;
                while (entry) {
                    var cb = entry.callback;
                    state.pendingcb--;
                    cb(err);
                    entry = entry.next;
                }
                if (state.corkedRequestsFree) {
                    state.corkedRequestsFree.next = _this;
                } else {
                    state.corkedRequestsFree = _this;
                }
            };
        }
    }).call(this,require('_process'))
},{"./_stream_duplex":141,"_process":4,"buffer":5,"core-util-is":6,"events":7,"inherits":9,"process-nextick-args":139,"util-deprecate":156}],146:[function(require,module,exports){
    module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":142}],147:[function(require,module,exports){
    (function (process){
        var Stream = (function (){
            try {
                return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
            } catch(_){}
        }());
        exports = module.exports = require('./lib/_stream_readable.js');
        exports.Stream = Stream || exports;
        exports.Readable = exports;
        exports.Writable = require('./lib/_stream_writable.js');
        exports.Duplex = require('./lib/_stream_duplex.js');
        exports.Transform = require('./lib/_stream_transform.js');
        exports.PassThrough = require('./lib/_stream_passthrough.js');

        if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
            module.exports = Stream;
        }

    }).call(this,require('_process'))
},{"./lib/_stream_duplex.js":141,"./lib/_stream_passthrough.js":142,"./lib/_stream_readable.js":143,"./lib/_stream_transform.js":144,"./lib/_stream_writable.js":145,"_process":4}],148:[function(require,module,exports){
    module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":144}],149:[function(require,module,exports){
    module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":145}],150:[function(require,module,exports){
    (function (Buffer){
        ;(function (sax) { // wrapper for non-node envs
            sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
            sax.SAXParser = SAXParser
            sax.SAXStream = SAXStream
            sax.createStream = createStream

            // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
            // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
            // since that's the earliest that a buffer overrun could occur.  This way, checks are
            // as rare as required, but as often as necessary to ensure never crossing this bound.
            // Furthermore, buffers are only tested at most once per write(), so passing a very
            // large string into write() might have undesirable effects, but this is manageable by
            // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
            // edge case, result in creating at most one complete copy of the string passed in.
            // Set to Infinity to have unlimited buffers.
            sax.MAX_BUFFER_LENGTH = 64 * 1024

            var buffers = [
                'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',
                'procInstName', 'procInstBody', 'entity', 'attribName',
                'attribValue', 'cdata', 'script'
            ]

            sax.EVENTS = [
                'text',
                'processinginstruction',
                'sgmldeclaration',
                'doctype',
                'comment',
                'opentagstart',
                'attribute',
                'opentag',
                'closetag',
                'opencdata',
                'cdata',
                'closecdata',
                'error',
                'end',
                'ready',
                'script',
                'opennamespace',
                'closenamespace'
            ]

            function SAXParser (strict, opt) {
                if (!(this instanceof SAXParser)) {
                    return new SAXParser(strict, opt)
                }

                var parser = this
                clearBuffers(parser)
                parser.q = parser.c = ''
                parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
                parser.opt = opt || {}
                parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
                parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'
                parser.tags = []
                parser.closed = parser.closedRoot = parser.sawRoot = false
                parser.tag = parser.error = null
                parser.strict = !!strict
                parser.noscript = !!(strict || parser.opt.noscript)
                parser.state = S.BEGIN
                parser.strictEntities = parser.opt.strictEntities
                parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)
                parser.attribList = []

                // namespaces form a prototype chain.
                // it always points at the current tag,
                // which protos to its parent tag.
                if (parser.opt.xmlns) {
                    parser.ns = Object.create(rootNS)
                }

                // mostly just for error reporting
                parser.trackPosition = parser.opt.position !== false
                if (parser.trackPosition) {
                    parser.position = parser.line = parser.column = 0
                }
                emit(parser, 'onready')
            }

            if (!Object.create) {
                Object.create = function (o) {
                    function F () {}
                    F.prototype = o
                    var newf = new F()
                    return newf
                }
            }

            if (!Object.keys) {
                Object.keys = function (o) {
                    var a = []
                    for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
                    return a
                }
            }

            function checkBufferLength (parser) {
                var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
                var maxActual = 0
                for (var i = 0, l = buffers.length; i < l; i++) {
                    var len = parser[buffers[i]].length
                    if (len > maxAllowed) {
                        // Text/cdata nodes can get big, and since they're buffered,
                        // we can get here under normal conditions.
                        // Avoid issues by emitting the text node now,
                        // so at least it won't get any bigger.
                        switch (buffers[i]) {
                            case 'textNode':
                                closeText(parser)
                                break

                            case 'cdata':
                                emitNode(parser, 'oncdata', parser.cdata)
                                parser.cdata = ''
                                break

                            case 'script':
                                emitNode(parser, 'onscript', parser.script)
                                parser.script = ''
                                break

                            default:
                                error(parser, 'Max buffer length exceeded: ' + buffers[i])
                        }
                    }
                    maxActual = Math.max(maxActual, len)
                }
                // schedule the next check for the earliest possible buffer overrun.
                var m = sax.MAX_BUFFER_LENGTH - maxActual
                parser.bufferCheckPosition = m + parser.position
            }

            function clearBuffers (parser) {
                for (var i = 0, l = buffers.length; i < l; i++) {
                    parser[buffers[i]] = ''
                }
            }

            function flushBuffers (parser) {
                closeText(parser)
                if (parser.cdata !== '') {
                    emitNode(parser, 'oncdata', parser.cdata)
                    parser.cdata = ''
                }
                if (parser.script !== '') {
                    emitNode(parser, 'onscript', parser.script)
                    parser.script = ''
                }
            }

            SAXParser.prototype = {
                end: function () { end(this) },
                write: write,
                resume: function () { this.error = null; return this },
                close: function () { return this.write(null) },
                flush: function () { flushBuffers(this) }
            }

            var Stream
            try {
                Stream = require('stream').Stream
            } catch (ex) {
                Stream = function () {}
            }

            var streamWraps = sax.EVENTS.filter(function (ev) {
                return ev !== 'error' && ev !== 'end'
            })

            function createStream (strict, opt) {
                return new SAXStream(strict, opt)
            }

            function SAXStream (strict, opt) {
                if (!(this instanceof SAXStream)) {
                    return new SAXStream(strict, opt)
                }

                Stream.apply(this)

                this._parser = new SAXParser(strict, opt)
                this.writable = true
                this.readable = true

                var me = this

                this._parser.onend = function () {
                    me.emit('end')
                }

                this._parser.onerror = function (er) {
                    me.emit('error', er)

                    // if didn't throw, then means error was handled.
                    // go ahead and clear error, so we can write again.
                    me._parser.error = null
                }

                this._decoder = null

                streamWraps.forEach(function (ev) {
                    Object.defineProperty(me, 'on' + ev, {
                        get: function () {
                            return me._parser['on' + ev]
                        },
                        set: function (h) {
                            if (!h) {
                                me.removeAllListeners(ev)
                                me._parser['on' + ev] = h
                                return h
                            }
                            me.on(ev, h)
                        },
                        enumerable: true,
                        configurable: false
                    })
                })
            }

            SAXStream.prototype = Object.create(Stream.prototype, {
                constructor: {
                    value: SAXStream
                }
            })

            SAXStream.prototype.write = function (data) {
                if (typeof Buffer === 'function' &&
                    typeof Buffer.isBuffer === 'function' &&
                    Buffer.isBuffer(data)) {
                    if (!this._decoder) {
                        var SD = require('string_decoder').StringDecoder
                        this._decoder = new SD('utf8')
                    }
                    data = this._decoder.write(data)
                }

                this._parser.write(data.toString())
                this.emit('data', data)
                return true
            }

            SAXStream.prototype.end = function (chunk) {
                if (chunk && chunk.length) {
                    this.write(chunk)
                }
                this._parser.end()
                return true
            }

            SAXStream.prototype.on = function (ev, handler) {
                var me = this
                if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
                    me._parser['on' + ev] = function () {
                        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)
                        args.splice(0, 0, ev)
                        me.emit.apply(me, args)
                    }
                }

                return Stream.prototype.on.call(me, ev, handler)
            }

            // character classes and tokens
            var whitespace = '\r\n\t '

            // this really needs to be replaced with character classes.
            // XML allows all manner of ridiculous numbers and digits.
            var number = '0124356789'
            var letter = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

            // (Letter | "_" | ":")
            var quote = '\'"'
            var attribEnd = whitespace + '>'
            var CDATA = '[CDATA['
            var DOCTYPE = 'DOCTYPE'
            var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'
            var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'
            var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

            // turn all the string character sets into character class objects.
            whitespace = charClass(whitespace)
            number = charClass(number)
            letter = charClass(letter)

            // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
            // This implementation works on strings, a single character at a time
            // as such, it cannot ever support astral-plane characters (10000-EFFFF)
            // without a significant breaking change to either this  parser, or the
            // JavaScript language.  Implementation of an emoji-capable xml parser
            // is left as an exercise for the reader.
            var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

            var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

            var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/
            var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

            quote = charClass(quote)
            attribEnd = charClass(attribEnd)

            function charClass (str) {
                return str.split('').reduce(function (s, c) {
                    s[c] = true
                    return s
                }, {})
            }

            function isRegExp (c) {
                return Object.prototype.toString.call(c) === '[object RegExp]'
            }

            function is (charclass, c) {
                return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
            }

            function not (charclass, c) {
                return !is(charclass, c)
            }

            var S = 0
            sax.STATE = {
                BEGIN: S++, // leading byte order mark or whitespace
                BEGIN_WHITESPACE: S++, // leading whitespace
                TEXT: S++, // general stuff
                TEXT_ENTITY: S++, // &amp and such.
                OPEN_WAKA: S++, // <
                SGML_DECL: S++, // <!BLARG
                SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
                DOCTYPE: S++, // <!DOCTYPE
                DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
                DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
                DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
                COMMENT_STARTING: S++, // <!-
                COMMENT: S++, // <!--
                COMMENT_ENDING: S++, // <!-- blah -
                COMMENT_ENDED: S++, // <!-- blah --
                CDATA: S++, // <![CDATA[ something
                CDATA_ENDING: S++, // ]
                CDATA_ENDING_2: S++, // ]]
                PROC_INST: S++, // <?hi
                PROC_INST_BODY: S++, // <?hi there
                PROC_INST_ENDING: S++, // <?hi "there" ?
                OPEN_TAG: S++, // <strong
                OPEN_TAG_SLASH: S++, // <strong /
                ATTRIB: S++, // <a
                ATTRIB_NAME: S++, // <a foo
                ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
                ATTRIB_VALUE: S++, // <a foo=
                ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
                ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
                ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
                ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
                ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
                CLOSE_TAG: S++, // </a
                CLOSE_TAG_SAW_WHITE: S++, // </a   >
                SCRIPT: S++, // <script> ...
                SCRIPT_ENDING: S++ // <script> ... <
            }

            sax.XML_ENTITIES = {
                'amp': '&',
                'gt': '>',
                'lt': '<',
                'quot': '"',
                'apos': "'"
            }

            sax.ENTITIES = {
                'amp': '&',
                'gt': '>',
                'lt': '<',
                'quot': '"',
                'apos': "'",
                'AElig': 198,
                'Aacute': 193,
                'Acirc': 194,
                'Agrave': 192,
                'Aring': 197,
                'Atilde': 195,
                'Auml': 196,
                'Ccedil': 199,
                'ETH': 208,
                'Eacute': 201,
                'Ecirc': 202,
                'Egrave': 200,
                'Euml': 203,
                'Iacute': 205,
                'Icirc': 206,
                'Igrave': 204,
                'Iuml': 207,
                'Ntilde': 209,
                'Oacute': 211,
                'Ocirc': 212,
                'Ograve': 210,
                'Oslash': 216,
                'Otilde': 213,
                'Ouml': 214,
                'THORN': 222,
                'Uacute': 218,
                'Ucirc': 219,
                'Ugrave': 217,
                'Uuml': 220,
                'Yacute': 221,
                'aacute': 225,
                'acirc': 226,
                'aelig': 230,
                'agrave': 224,
                'aring': 229,
                'atilde': 227,
                'auml': 228,
                'ccedil': 231,
                'eacute': 233,
                'ecirc': 234,
                'egrave': 232,
                'eth': 240,
                'euml': 235,
                'iacute': 237,
                'icirc': 238,
                'igrave': 236,
                'iuml': 239,
                'ntilde': 241,
                'oacute': 243,
                'ocirc': 244,
                'ograve': 242,
                'oslash': 248,
                'otilde': 245,
                'ouml': 246,
                'szlig': 223,
                'thorn': 254,
                'uacute': 250,
                'ucirc': 251,
                'ugrave': 249,
                'uuml': 252,
                'yacute': 253,
                'yuml': 255,
                'copy': 169,
                'reg': 174,
                'nbsp': 160,
                'iexcl': 161,
                'cent': 162,
                'pound': 163,
                'curren': 164,
                'yen': 165,
                'brvbar': 166,
                'sect': 167,
                'uml': 168,
                'ordf': 170,
                'laquo': 171,
                'not': 172,
                'shy': 173,
                'macr': 175,
                'deg': 176,
                'plusmn': 177,
                'sup1': 185,
                'sup2': 178,
                'sup3': 179,
                'acute': 180,
                'micro': 181,
                'para': 182,
                'middot': 183,
                'cedil': 184,
                'ordm': 186,
                'raquo': 187,
                'frac14': 188,
                'frac12': 189,
                'frac34': 190,
                'iquest': 191,
                'times': 215,
                'divide': 247,
                'OElig': 338,
                'oelig': 339,
                'Scaron': 352,
                'scaron': 353,
                'Yuml': 376,
                'fnof': 402,
                'circ': 710,
                'tilde': 732,
                'Alpha': 913,
                'Beta': 914,
                'Gamma': 915,
                'Delta': 916,
                'Epsilon': 917,
                'Zeta': 918,
                'Eta': 919,
                'Theta': 920,
                'Iota': 921,
                'Kappa': 922,
                'Lambda': 923,
                'Mu': 924,
                'Nu': 925,
                'Xi': 926,
                'Omicron': 927,
                'Pi': 928,
                'Rho': 929,
                'Sigma': 931,
                'Tau': 932,
                'Upsilon': 933,
                'Phi': 934,
                'Chi': 935,
                'Psi': 936,
                'Omega': 937,
                'alpha': 945,
                'beta': 946,
                'gamma': 947,
                'delta': 948,
                'epsilon': 949,
                'zeta': 950,
                'eta': 951,
                'theta': 952,
                'iota': 953,
                'kappa': 954,
                'lambda': 955,
                'mu': 956,
                'nu': 957,
                'xi': 958,
                'omicron': 959,
                'pi': 960,
                'rho': 961,
                'sigmaf': 962,
                'sigma': 963,
                'tau': 964,
                'upsilon': 965,
                'phi': 966,
                'chi': 967,
                'psi': 968,
                'omega': 969,
                'thetasym': 977,
                'upsih': 978,
                'piv': 982,
                'ensp': 8194,
                'emsp': 8195,
                'thinsp': 8201,
                'zwnj': 8204,
                'zwj': 8205,
                'lrm': 8206,
                'rlm': 8207,
                'ndash': 8211,
                'mdash': 8212,
                'lsquo': 8216,
                'rsquo': 8217,
                'sbquo': 8218,
                'ldquo': 8220,
                'rdquo': 8221,
                'bdquo': 8222,
                'dagger': 8224,
                'Dagger': 8225,
                'bull': 8226,
                'hellip': 8230,
                'permil': 8240,
                'prime': 8242,
                'Prime': 8243,
                'lsaquo': 8249,
                'rsaquo': 8250,
                'oline': 8254,
                'frasl': 8260,
                'euro': 8364,
                'image': 8465,
                'weierp': 8472,
                'real': 8476,
                'trade': 8482,
                'alefsym': 8501,
                'larr': 8592,
                'uarr': 8593,
                'rarr': 8594,
                'darr': 8595,
                'harr': 8596,
                'crarr': 8629,
                'lArr': 8656,
                'uArr': 8657,
                'rArr': 8658,
                'dArr': 8659,
                'hArr': 8660,
                'forall': 8704,
                'part': 8706,
                'exist': 8707,
                'empty': 8709,
                'nabla': 8711,
                'isin': 8712,
                'notin': 8713,
                'ni': 8715,
                'prod': 8719,
                'sum': 8721,
                'minus': 8722,
                'lowast': 8727,
                'radic': 8730,
                'prop': 8733,
                'infin': 8734,
                'ang': 8736,
                'and': 8743,
                'or': 8744,
                'cap': 8745,
                'cup': 8746,
                'int': 8747,
                'there4': 8756,
                'sim': 8764,
                'cong': 8773,
                'asymp': 8776,
                'ne': 8800,
                'equiv': 8801,
                'le': 8804,
                'ge': 8805,
                'sub': 8834,
                'sup': 8835,
                'nsub': 8836,
                'sube': 8838,
                'supe': 8839,
                'oplus': 8853,
                'otimes': 8855,
                'perp': 8869,
                'sdot': 8901,
                'lceil': 8968,
                'rceil': 8969,
                'lfloor': 8970,
                'rfloor': 8971,
                'lang': 9001,
                'rang': 9002,
                'loz': 9674,
                'spades': 9824,
                'clubs': 9827,
                'hearts': 9829,
                'diams': 9830
            }

            Object.keys(sax.ENTITIES).forEach(function (key) {
                var e = sax.ENTITIES[key]
                var s = typeof e === 'number' ? String.fromCharCode(e) : e
                sax.ENTITIES[key] = s
            })

            for (var s in sax.STATE) {
                sax.STATE[sax.STATE[s]] = s
            }

            // shorthand
            S = sax.STATE

            function emit (parser, event, data) {
                parser[event] && parser[event](data)
            }

            function emitNode (parser, nodeType, data) {
                if (parser.textNode) closeText(parser)
                emit(parser, nodeType, data)
            }

            function closeText (parser) {
                parser.textNode = textopts(parser.opt, parser.textNode)
                if (parser.textNode) emit(parser, 'ontext', parser.textNode)
                parser.textNode = ''
            }

            function textopts (opt, text) {
                if (opt.trim) text = text.trim()
                if (opt.normalize) text = text.replace(/\s+/g, ' ')
                return text
            }

            function error (parser, er) {
                closeText(parser)
                if (parser.trackPosition) {
                    er += '\nLine: ' + parser.line +
                        '\nColumn: ' + parser.column +
                        '\nChar: ' + parser.c
                }
                er = new Error(er)
                parser.error = er
                emit(parser, 'onerror', er)
                return parser
            }

            function end (parser) {
                if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')
                if ((parser.state !== S.BEGIN) &&
                    (parser.state !== S.BEGIN_WHITESPACE) &&
                    (parser.state !== S.TEXT)) {
                    error(parser, 'Unexpected end')
                }
                closeText(parser)
                parser.c = ''
                parser.closed = true
                emit(parser, 'onend')
                SAXParser.call(parser, parser.strict, parser.opt)
                return parser
            }

            function strictFail (parser, message) {
                if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
                    throw new Error('bad call to strictFail')
                }
                if (parser.strict) {
                    error(parser, message)
                }
            }

            function newTag (parser) {
                if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
                var parent = parser.tags[parser.tags.length - 1] || parser
                var tag = parser.tag = { name: parser.tagName, attributes: {} }

                // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
                if (parser.opt.xmlns) {
                    tag.ns = parent.ns
                }
                parser.attribList.length = 0
                emitNode(parser, 'onopentagstart', tag)
            }

            function qname (name, attribute) {
                var i = name.indexOf(':')
                var qualName = i < 0 ? [ '', name ] : name.split(':')
                var prefix = qualName[0]
                var local = qualName[1]

                // <x "xmlns"="http://foo">
                if (attribute && name === 'xmlns') {
                    prefix = 'xmlns'
                    local = ''
                }

                return { prefix: prefix, local: local }
            }

            function attrib (parser) {
                if (!parser.strict) {
                    parser.attribName = parser.attribName[parser.looseCase]()
                }

                if (parser.attribList.indexOf(parser.attribName) !== -1 ||
                    parser.tag.attributes.hasOwnProperty(parser.attribName)) {
                    parser.attribName = parser.attribValue = ''
                    return
                }

                if (parser.opt.xmlns) {
                    var qn = qname(parser.attribName, true)
                    var prefix = qn.prefix
                    var local = qn.local

                    if (prefix === 'xmlns') {
                        // namespace binding attribute. push the binding into scope
                        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
                            strictFail(parser,
                                'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' +
                                'Actual: ' + parser.attribValue)
                        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
                            strictFail(parser,
                                'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' +
                                'Actual: ' + parser.attribValue)
                        } else {
                            var tag = parser.tag
                            var parent = parser.tags[parser.tags.length - 1] || parser
                            if (tag.ns === parent.ns) {
                                tag.ns = Object.create(parent.ns)
                            }
                            tag.ns[local] = parser.attribValue
                        }
                    }

                    // defer onattribute events until all attributes have been seen
                    // so any new bindings can take effect. preserve attribute order
                    // so deferred events can be emitted in document order
                    parser.attribList.push([parser.attribName, parser.attribValue])
                } else {
                    // in non-xmlns mode, we can emit the event right away
                    parser.tag.attributes[parser.attribName] = parser.attribValue
                    emitNode(parser, 'onattribute', {
                        name: parser.attribName,
                        value: parser.attribValue
                    })
                }

                parser.attribName = parser.attribValue = ''
            }

            function openTag (parser, selfClosing) {
                if (parser.opt.xmlns) {
                    // emit namespace binding events
                    var tag = parser.tag

                    // add namespace info to tag
                    var qn = qname(parser.tagName)
                    tag.prefix = qn.prefix
                    tag.local = qn.local
                    tag.uri = tag.ns[qn.prefix] || ''

                    if (tag.prefix && !tag.uri) {
                        strictFail(parser, 'Unbound namespace prefix: ' +
                            JSON.stringify(parser.tagName))
                        tag.uri = qn.prefix
                    }

                    var parent = parser.tags[parser.tags.length - 1] || parser
                    if (tag.ns && parent.ns !== tag.ns) {
                        Object.keys(tag.ns).forEach(function (p) {
                            emitNode(parser, 'onopennamespace', {
                                prefix: p,
                                uri: tag.ns[p]
                            })
                        })
                    }

                    // handle deferred onattribute events
                    // Note: do not apply default ns to attributes:
                    //   http://www.w3.org/TR/REC-xml-names/#defaulting
                    for (var i = 0, l = parser.attribList.length; i < l; i++) {
                        var nv = parser.attribList[i]
                        var name = nv[0]
                        var value = nv[1]
                        var qualName = qname(name, true)
                        var prefix = qualName.prefix
                        var local = qualName.local
                        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')
                        var a = {
                            name: name,
                            value: value,
                            prefix: prefix,
                            local: local,
                            uri: uri
                        }

                        // if there's any attributes with an undefined namespace,
                        // then fail on them now.
                        if (prefix && prefix !== 'xmlns' && !uri) {
                            strictFail(parser, 'Unbound namespace prefix: ' +
                                JSON.stringify(prefix))
                            a.uri = prefix
                        }
                        parser.tag.attributes[name] = a
                        emitNode(parser, 'onattribute', a)
                    }
                    parser.attribList.length = 0
                }

                parser.tag.isSelfClosing = !!selfClosing

                // process the tag
                parser.sawRoot = true
                parser.tags.push(parser.tag)
                emitNode(parser, 'onopentag', parser.tag)
                if (!selfClosing) {
                    // special case for <script> in non-strict mode.
                    if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
                        parser.state = S.SCRIPT
                    } else {
                        parser.state = S.TEXT
                    }
                    parser.tag = null
                    parser.tagName = ''
                }
                parser.attribName = parser.attribValue = ''
                parser.attribList.length = 0
            }

            function closeTag (parser) {
                if (!parser.tagName) {
                    strictFail(parser, 'Weird empty close tag.')
                    parser.textNode += '</>'
                    parser.state = S.TEXT
                    return
                }

                if (parser.script) {
                    if (parser.tagName !== 'script') {
                        parser.script += '</' + parser.tagName + '>'
                        parser.tagName = ''
                        parser.state = S.SCRIPT
                        return
                    }
                    emitNode(parser, 'onscript', parser.script)
                    parser.script = ''
                }

                // first make sure that the closing tag actually exists.
                // <a><b></c></b></a> will close everything, otherwise.
                var t = parser.tags.length
                var tagName = parser.tagName
                if (!parser.strict) {
                    tagName = tagName[parser.looseCase]()
                }
                var closeTo = tagName
                while (t--) {
                    var close = parser.tags[t]
                    if (close.name !== closeTo) {
                        // fail the first time in strict mode
                        strictFail(parser, 'Unexpected close tag')
                    } else {
                        break
                    }
                }

                // didn't find it.  we already failed for strict, so just abort.
                if (t < 0) {
                    strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)
                    parser.textNode += '</' + parser.tagName + '>'
                    parser.state = S.TEXT
                    return
                }
                parser.tagName = tagName
                var s = parser.tags.length
                while (s-- > t) {
                    var tag = parser.tag = parser.tags.pop()
                    parser.tagName = parser.tag.name
                    emitNode(parser, 'onclosetag', parser.tagName)

                    var x = {}
                    for (var i in tag.ns) {
                        x[i] = tag.ns[i]
                    }

                    var parent = parser.tags[parser.tags.length - 1] || parser
                    if (parser.opt.xmlns && tag.ns !== parent.ns) {
                        // remove namespace bindings introduced by tag
                        Object.keys(tag.ns).forEach(function (p) {
                            var n = tag.ns[p]
                            emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })
                        })
                    }
                }
                if (t === 0) parser.closedRoot = true
                parser.tagName = parser.attribValue = parser.attribName = ''
                parser.attribList.length = 0
                parser.state = S.TEXT
            }

            function parseEntity (parser) {
                var entity = parser.entity
                var entityLC = entity.toLowerCase()
                var num
                var numStr = ''

                if (parser.ENTITIES[entity]) {
                    return parser.ENTITIES[entity]
                }
                if (parser.ENTITIES[entityLC]) {
                    return parser.ENTITIES[entityLC]
                }
                entity = entityLC
                if (entity.charAt(0) === '#') {
                    if (entity.charAt(1) === 'x') {
                        entity = entity.slice(2)
                        num = parseInt(entity, 16)
                        numStr = num.toString(16)
                    } else {
                        entity = entity.slice(1)
                        num = parseInt(entity, 10)
                        numStr = num.toString(10)
                    }
                }
                entity = entity.replace(/^0+/, '')
                if (numStr.toLowerCase() !== entity) {
                    strictFail(parser, 'Invalid character entity')
                    return '&' + parser.entity + ';'
                }

                return String.fromCodePoint(num)
            }

            function beginWhiteSpace (parser, c) {
                if (c === '<') {
                    parser.state = S.OPEN_WAKA
                    parser.startTagPosition = parser.position
                } else if (not(whitespace, c)) {
                    // have to process this as a text node.
                    // weird, but happens.
                    strictFail(parser, 'Non-whitespace before first tag.')
                    parser.textNode = c
                    parser.state = S.TEXT
                }
            }

            function charAt (chunk, i) {
                var result = ''
                if (i < chunk.length) {
                    result = chunk.charAt(i)
                }
                return result
            }

            function write (chunk) {
                var parser = this
                if (this.error) {
                    throw this.error
                }
                if (parser.closed) {
                    return error(parser,
                        'Cannot write after close. Assign an onready handler.')
                }
                if (chunk === null) {
                    return end(parser)
                }
                if (typeof chunk === 'object') {
                    chunk = chunk.toString()
                }
                var i = 0
                var c = ''
                while (true) {
                    c = charAt(chunk, i++)
                    parser.c = c
                    if (!c) {
                        break
                    }
                    if (parser.trackPosition) {
                        parser.position++
                        if (c === '\n') {
                            parser.line++
                            parser.column = 0
                        } else {
                            parser.column++
                        }
                    }
                    switch (parser.state) {
                        case S.BEGIN:
                            parser.state = S.BEGIN_WHITESPACE
                            if (c === '\uFEFF') {
                                continue
                            }
                            beginWhiteSpace(parser, c)
                            continue

                        case S.BEGIN_WHITESPACE:
                            beginWhiteSpace(parser, c)
                            continue

                        case S.TEXT:
                            if (parser.sawRoot && !parser.closedRoot) {
                                var starti = i - 1
                                while (c && c !== '<' && c !== '&') {
                                    c = charAt(chunk, i++)
                                    if (c && parser.trackPosition) {
                                        parser.position++
                                        if (c === '\n') {
                                            parser.line++
                                            parser.column = 0
                                        } else {
                                            parser.column++
                                        }
                                    }
                                }
                                parser.textNode += chunk.substring(starti, i - 1)
                            }
                            if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                                parser.state = S.OPEN_WAKA
                                parser.startTagPosition = parser.position
                            } else {
                                if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {
                                    strictFail(parser, 'Text data outside of root node.')
                                }
                                if (c === '&') {
                                    parser.state = S.TEXT_ENTITY
                                } else {
                                    parser.textNode += c
                                }
                            }
                            continue

                        case S.SCRIPT:
                            // only non-strict
                            if (c === '<') {
                                parser.state = S.SCRIPT_ENDING
                            } else {
                                parser.script += c
                            }
                            continue

                        case S.SCRIPT_ENDING:
                            if (c === '/') {
                                parser.state = S.CLOSE_TAG
                            } else {
                                parser.script += '<' + c
                                parser.state = S.SCRIPT
                            }
                            continue

                        case S.OPEN_WAKA:
                            // either a /, ?, !, or text is coming next.
                            if (c === '!') {
                                parser.state = S.SGML_DECL
                                parser.sgmlDecl = ''
                            } else if (is(whitespace, c)) {
                                // wait for it...
                            } else if (is(nameStart, c)) {
                                parser.state = S.OPEN_TAG
                                parser.tagName = c
                            } else if (c === '/') {
                                parser.state = S.CLOSE_TAG
                                parser.tagName = ''
                            } else if (c === '?') {
                                parser.state = S.PROC_INST
                                parser.procInstName = parser.procInstBody = ''
                            } else {
                                strictFail(parser, 'Unencoded <')
                                // if there was some whitespace, then add that in.
                                if (parser.startTagPosition + 1 < parser.position) {
                                    var pad = parser.position - parser.startTagPosition
                                    c = new Array(pad).join(' ') + c
                                }
                                parser.textNode += '<' + c
                                parser.state = S.TEXT
                            }
                            continue

                        case S.SGML_DECL:
                            if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                                emitNode(parser, 'onopencdata')
                                parser.state = S.CDATA
                                parser.sgmlDecl = ''
                                parser.cdata = ''
                            } else if (parser.sgmlDecl + c === '--') {
                                parser.state = S.COMMENT
                                parser.comment = ''
                                parser.sgmlDecl = ''
                            } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                                parser.state = S.DOCTYPE
                                if (parser.doctype || parser.sawRoot) {
                                    strictFail(parser,
                                        'Inappropriately located doctype declaration')
                                }
                                parser.doctype = ''
                                parser.sgmlDecl = ''
                            } else if (c === '>') {
                                emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)
                                parser.sgmlDecl = ''
                                parser.state = S.TEXT
                            } else if (is(quote, c)) {
                                parser.state = S.SGML_DECL_QUOTED
                                parser.sgmlDecl += c
                            } else {
                                parser.sgmlDecl += c
                            }
                            continue

                        case S.SGML_DECL_QUOTED:
                            if (c === parser.q) {
                                parser.state = S.SGML_DECL
                                parser.q = ''
                            }
                            parser.sgmlDecl += c
                            continue

                        case S.DOCTYPE:
                            if (c === '>') {
                                parser.state = S.TEXT
                                emitNode(parser, 'ondoctype', parser.doctype)
                                parser.doctype = true // just remember that we saw it.
                            } else {
                                parser.doctype += c
                                if (c === '[') {
                                    parser.state = S.DOCTYPE_DTD
                                } else if (is(quote, c)) {
                                    parser.state = S.DOCTYPE_QUOTED
                                    parser.q = c
                                }
                            }
                            continue

                        case S.DOCTYPE_QUOTED:
                            parser.doctype += c
                            if (c === parser.q) {
                                parser.q = ''
                                parser.state = S.DOCTYPE
                            }
                            continue

                        case S.DOCTYPE_DTD:
                            parser.doctype += c
                            if (c === ']') {
                                parser.state = S.DOCTYPE
                            } else if (is(quote, c)) {
                                parser.state = S.DOCTYPE_DTD_QUOTED
                                parser.q = c
                            }
                            continue

                        case S.DOCTYPE_DTD_QUOTED:
                            parser.doctype += c
                            if (c === parser.q) {
                                parser.state = S.DOCTYPE_DTD
                                parser.q = ''
                            }
                            continue

                        case S.COMMENT:
                            if (c === '-') {
                                parser.state = S.COMMENT_ENDING
                            } else {
                                parser.comment += c
                            }
                            continue

                        case S.COMMENT_ENDING:
                            if (c === '-') {
                                parser.state = S.COMMENT_ENDED
                                parser.comment = textopts(parser.opt, parser.comment)
                                if (parser.comment) {
                                    emitNode(parser, 'oncomment', parser.comment)
                                }
                                parser.comment = ''
                            } else {
                                parser.comment += '-' + c
                                parser.state = S.COMMENT
                            }
                            continue

                        case S.COMMENT_ENDED:
                            if (c !== '>') {
                                strictFail(parser, 'Malformed comment')
                                // allow <!-- blah -- bloo --> in non-strict mode,
                                // which is a comment of " blah -- bloo "
                                parser.comment += '--' + c
                                parser.state = S.COMMENT
                            } else {
                                parser.state = S.TEXT
                            }
                            continue

                        case S.CDATA:
                            if (c === ']') {
                                parser.state = S.CDATA_ENDING
                            } else {
                                parser.cdata += c
                            }
                            continue

                        case S.CDATA_ENDING:
                            if (c === ']') {
                                parser.state = S.CDATA_ENDING_2
                            } else {
                                parser.cdata += ']' + c
                                parser.state = S.CDATA
                            }
                            continue

                        case S.CDATA_ENDING_2:
                            if (c === '>') {
                                if (parser.cdata) {
                                    emitNode(parser, 'oncdata', parser.cdata)
                                }
                                emitNode(parser, 'onclosecdata')
                                parser.cdata = ''
                                parser.state = S.TEXT
                            } else if (c === ']') {
                                parser.cdata += ']'
                            } else {
                                parser.cdata += ']]' + c
                                parser.state = S.CDATA
                            }
                            continue

                        case S.PROC_INST:
                            if (c === '?') {
                                parser.state = S.PROC_INST_ENDING
                            } else if (is(whitespace, c)) {
                                parser.state = S.PROC_INST_BODY
                            } else {
                                parser.procInstName += c
                            }
                            continue

                        case S.PROC_INST_BODY:
                            if (!parser.procInstBody && is(whitespace, c)) {
                                continue
                            } else if (c === '?') {
                                parser.state = S.PROC_INST_ENDING
                            } else {
                                parser.procInstBody += c
                            }
                            continue

                        case S.PROC_INST_ENDING:
                            if (c === '>') {
                                emitNode(parser, 'onprocessinginstruction', {
                                    name: parser.procInstName,
                                    body: parser.procInstBody
                                })
                                parser.procInstName = parser.procInstBody = ''
                                parser.state = S.TEXT
                            } else {
                                parser.procInstBody += '?' + c
                                parser.state = S.PROC_INST_BODY
                            }
                            continue

                        case S.OPEN_TAG:
                            if (is(nameBody, c)) {
                                parser.tagName += c
                            } else {
                                newTag(parser)
                                if (c === '>') {
                                    openTag(parser)
                                } else if (c === '/') {
                                    parser.state = S.OPEN_TAG_SLASH
                                } else {
                                    if (not(whitespace, c)) {
                                        strictFail(parser, 'Invalid character in tag name')
                                    }
                                    parser.state = S.ATTRIB
                                }
                            }
                            continue

                        case S.OPEN_TAG_SLASH:
                            if (c === '>') {
                                openTag(parser, true)
                                closeTag(parser)
                            } else {
                                strictFail(parser, 'Forward-slash in opening tag not followed by >')
                                parser.state = S.ATTRIB
                            }
                            continue

                        case S.ATTRIB:
                            // haven't read the attribute name yet.
                            if (is(whitespace, c)) {
                                continue
                            } else if (c === '>') {
                                openTag(parser)
                            } else if (c === '/') {
                                parser.state = S.OPEN_TAG_SLASH
                            } else if (is(nameStart, c)) {
                                parser.attribName = c
                                parser.attribValue = ''
                                parser.state = S.ATTRIB_NAME
                            } else {
                                strictFail(parser, 'Invalid attribute name')
                            }
                            continue

                        case S.ATTRIB_NAME:
                            if (c === '=') {
                                parser.state = S.ATTRIB_VALUE
                            } else if (c === '>') {
                                strictFail(parser, 'Attribute without value')
                                parser.attribValue = parser.attribName
                                attrib(parser)
                                openTag(parser)
                            } else if (is(whitespace, c)) {
                                parser.state = S.ATTRIB_NAME_SAW_WHITE
                            } else if (is(nameBody, c)) {
                                parser.attribName += c
                            } else {
                                strictFail(parser, 'Invalid attribute name')
                            }
                            continue

                        case S.ATTRIB_NAME_SAW_WHITE:
                            if (c === '=') {
                                parser.state = S.ATTRIB_VALUE
                            } else if (is(whitespace, c)) {
                                continue
                            } else {
                                strictFail(parser, 'Attribute without value')
                                parser.tag.attributes[parser.attribName] = ''
                                parser.attribValue = ''
                                emitNode(parser, 'onattribute', {
                                    name: parser.attribName,
                                    value: ''
                                })
                                parser.attribName = ''
                                if (c === '>') {
                                    openTag(parser)
                                } else if (is(nameStart, c)) {
                                    parser.attribName = c
                                    parser.state = S.ATTRIB_NAME
                                } else {
                                    strictFail(parser, 'Invalid attribute name')
                                    parser.state = S.ATTRIB
                                }
                            }
                            continue

                        case S.ATTRIB_VALUE:
                            if (is(whitespace, c)) {
                                continue
                            } else if (is(quote, c)) {
                                parser.q = c
                                parser.state = S.ATTRIB_VALUE_QUOTED
                            } else {
                                strictFail(parser, 'Unquoted attribute value')
                                parser.state = S.ATTRIB_VALUE_UNQUOTED
                                parser.attribValue = c
                            }
                            continue

                        case S.ATTRIB_VALUE_QUOTED:
                            if (c !== parser.q) {
                                if (c === '&') {
                                    parser.state = S.ATTRIB_VALUE_ENTITY_Q
                                } else {
                                    parser.attribValue += c
                                }
                                continue
                            }
                            attrib(parser)
                            parser.q = ''
                            parser.state = S.ATTRIB_VALUE_CLOSED
                            continue

                        case S.ATTRIB_VALUE_CLOSED:
                            if (is(whitespace, c)) {
                                parser.state = S.ATTRIB
                            } else if (c === '>') {
                                openTag(parser)
                            } else if (c === '/') {
                                parser.state = S.OPEN_TAG_SLASH
                            } else if (is(nameStart, c)) {
                                strictFail(parser, 'No whitespace between attributes')
                                parser.attribName = c
                                parser.attribValue = ''
                                parser.state = S.ATTRIB_NAME
                            } else {
                                strictFail(parser, 'Invalid attribute name')
                            }
                            continue

                        case S.ATTRIB_VALUE_UNQUOTED:
                            if (not(attribEnd, c)) {
                                if (c === '&') {
                                    parser.state = S.ATTRIB_VALUE_ENTITY_U
                                } else {
                                    parser.attribValue += c
                                }
                                continue
                            }
                            attrib(parser)
                            if (c === '>') {
                                openTag(parser)
                            } else {
                                parser.state = S.ATTRIB
                            }
                            continue

                        case S.CLOSE_TAG:
                            if (!parser.tagName) {
                                if (is(whitespace, c)) {
                                    continue
                                } else if (not(nameStart, c)) {
                                    if (parser.script) {
                                        parser.script += '</' + c
                                        parser.state = S.SCRIPT
                                    } else {
                                        strictFail(parser, 'Invalid tagname in closing tag.')
                                    }
                                } else {
                                    parser.tagName = c
                                }
                            } else if (c === '>') {
                                closeTag(parser)
                            } else if (is(nameBody, c)) {
                                parser.tagName += c
                            } else if (parser.script) {
                                parser.script += '</' + parser.tagName
                                parser.tagName = ''
                                parser.state = S.SCRIPT
                            } else {
                                if (not(whitespace, c)) {
                                    strictFail(parser, 'Invalid tagname in closing tag')
                                }
                                parser.state = S.CLOSE_TAG_SAW_WHITE
                            }
                            continue

                        case S.CLOSE_TAG_SAW_WHITE:
                            if (is(whitespace, c)) {
                                continue
                            }
                            if (c === '>') {
                                closeTag(parser)
                            } else {
                                strictFail(parser, 'Invalid characters in closing tag')
                            }
                            continue

                        case S.TEXT_ENTITY:
                        case S.ATTRIB_VALUE_ENTITY_Q:
                        case S.ATTRIB_VALUE_ENTITY_U:
                            var returnState
                            var buffer
                            switch (parser.state) {
                                case S.TEXT_ENTITY:
                                    returnState = S.TEXT
                                    buffer = 'textNode'
                                    break

                                case S.ATTRIB_VALUE_ENTITY_Q:
                                    returnState = S.ATTRIB_VALUE_QUOTED
                                    buffer = 'attribValue'
                                    break

                                case S.ATTRIB_VALUE_ENTITY_U:
                                    returnState = S.ATTRIB_VALUE_UNQUOTED
                                    buffer = 'attribValue'
                                    break
                            }

                            if (c === ';') {
                                parser[buffer] += parseEntity(parser)
                                parser.entity = ''
                                parser.state = returnState
                            } else if (is(parser.entity.length ? entityBody : entityStart, c)) {
                                parser.entity += c
                            } else {
                                strictFail(parser, 'Invalid character in entity name')
                                parser[buffer] += '&' + parser.entity + c
                                parser.entity = ''
                                parser.state = returnState
                            }

                            continue

                        default:
                            throw new Error(parser, 'Unknown state: ' + parser.state)
                    }
                } // while

                if (parser.position >= parser.bufferCheckPosition) {
                    checkBufferLength(parser)
                }
                return parser
            }

            /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
            if (!String.fromCodePoint) {
                (function () {
                    var stringFromCharCode = String.fromCharCode
                    var floor = Math.floor
                    var fromCodePoint = function () {
                        var MAX_SIZE = 0x4000
                        var codeUnits = []
                        var highSurrogate
                        var lowSurrogate
                        var index = -1
                        var length = arguments.length
                        if (!length) {
                            return ''
                        }
                        var result = ''
                        while (++index < length) {
                            var codePoint = Number(arguments[index])
                            if (
                                !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
                                codePoint < 0 || // not a valid Unicode code point
                                codePoint > 0x10FFFF || // not a valid Unicode code point
                                floor(codePoint) !== codePoint // not an integer
                            ) {
                                throw RangeError('Invalid code point: ' + codePoint)
                            }
                            if (codePoint <= 0xFFFF) { // BMP code point
                                codeUnits.push(codePoint)
                            } else { // Astral code point; split in surrogate halves
                                // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                                codePoint -= 0x10000
                                highSurrogate = (codePoint >> 10) + 0xD800
                                lowSurrogate = (codePoint % 0x400) + 0xDC00
                                codeUnits.push(highSurrogate, lowSurrogate)
                            }
                            if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                                result += stringFromCharCode.apply(null, codeUnits)
                                codeUnits.length = 0
                            }
                        }
                        return result
                    }
                    if (Object.defineProperty) {
                        Object.defineProperty(String, 'fromCodePoint', {
                            value: fromCodePoint,
                            configurable: true,
                            writable: true
                        })
                    } else {
                        String.fromCodePoint = fromCodePoint
                    }
                }())
            }
        })(typeof exports === 'undefined' ? this.sax = {} : exports)

    }).call(this,require("buffer").Buffer)
},{"buffer":5,"stream":152,"string_decoder":153}],151:[function(require,module,exports){
    (function (global){
        ; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
            (function(){var g={};
                (function(window){var k,aa=this;function p(a,b){var c=a.split("."),d=aa;c[0]in d||!d.execScript||d.execScript("var "+c[0]);for(var e;c.length&&(e=c.shift());)c.length||void 0===b?d[e]?d=d[e]:d=d[e]={}:d[e]=b}function q(a,b){function c(){}c.prototype=b.prototype;a.Yb=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Xb=function(a,c,f){return b.prototype[c].apply(a,Array.prototype.slice.call(arguments,2))}};/*

                 Copyright 2015 Google Inc.

                 Licensed under the Apache License, Version 2.0 (the "License");
                 you may not use this file except in compliance with the License.
                 You may obtain a copy of the License at

                 http://www.apache.org/licenses/LICENSE-2.0

                 Unless required by applicable law or agreed to in writing, software
                 distributed under the License is distributed on an "AS IS" BASIS,
                 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                 See the License for the specific language governing permissions and
                 limitations under the License.
                 */
                    function ba(){};function ca(a){var b=console[a];b?b.bind||(console[a]=function(){b.apply(console,arguments)}):console[a]=function(){}}ca("error");ca("warn");ca("info");ca("log");ca("debug");function da(a){ea[a]={na:fa(),end:NaN}}function ga(a){if(a=ea[a])a.end=fa()}function ha(a){return(a=ea[a])&&a.end?a.end-a.na:NaN}var fa=window.performance&&window.performance.now?window.performance.now.bind(window.performance):Date.now,ea={};function ia(a,b,c){this.id=a;this.bandwidth=b||0;this.lang=c||"unknown";this.active=!1}p("shaka.player.AudioTrack.compare",function(a,b){return a.lang<b.lang?-1:a.lang>b.lang?1:a.bandwidth<b.bandwidth?-1:a.bandwidth>b.bandwidth?1:0});function ja(){this.minBandwidth=this.maxBandwidth=this.maxWidth=this.minHeight=this.maxHeight=null}ja.prototype.clone=function(){var a=new ja;a.maxHeight=this.maxHeight;a.minHeight=this.minHeight;a.maxWidth=this.maxWidth;a.maxBandwidth=this.maxBandwidth;a.minBandwidth=this.minBandwidth;return a};function r(){this.fontSize="100%";this.fontColor=ka;this.fontOpacity=la;this.backgroundColor=ma;this.backgroundOpacity=la;this.fontEdge=na}p("shaka.player.TextStyle",r);r.prototype.a=function(){var a=window.localStorage.getItem("ShakaPlayerTextStyle");if(a){var b;try{b=JSON.parse(a)}catch(c){return}if(b&&"object"==typeof b){var a=b,d;for(d in a)d in this&&(this[d]=a[d])}}};r.prototype.load=r.prototype.a;r.prototype.b=function(){window.localStorage.setItem("ShakaPlayerTextStyle",JSON.stringify(this))};
                    r.prototype.store=r.prototype.b;function oa(a){var b=[];b.push("font-size: "+a.fontSize);b.push("color: "+pa(a.fontColor,a.fontOpacity));b.push("background-color: "+pa(a.backgroundColor,a.backgroundOpacity));for(var c=[],d=0;d<a.fontEdge.length;++d){var e=a.fontEdge[d].slice(3,6);c.push(pa(a.fontEdge[d].slice(0,3),a.fontOpacity)+" "+e.join("px ")+"px")}b.push("text-shadow: "+c.join(","));return b.join("; ")}function pa(a,b){return"rgba("+a.concat(b).join(",")+")"}var ka=[255,255,255],ma=[0,0,0];
                    r.StandardColors={WHITE:ka,BLACK:ma,RED:[255,0,0],GREEN:[0,255,0],BLUE:[0,0,255],YELLOW:[255,255,0],MAGENTA:[255,0,255],CYAN:[0,255,255]};var la=1;r.StandardOpacities={OPAQUE:la,SEMI_HIGH:.75,SEMI_LOW:.25,TRANSPARENT:0};var na=[];
                    r.EdgeStyles={NONE:na,RAISED:[[34,34,34,1,1,0],[34,34,34,2,2,0],[34,34,34,3,3,0]],DEPRESSED:[[204,204,204,1,1,0],[204,204,204,0,1,0],[34,34,34,-1,-1,0],[34,34,34,0,-1,0]],UNIFORM:[[34,34,34,0,0,4],[34,34,34,0,0,4],[34,34,34,0,0,4],[34,34,34,0,0,4]],DROP:[[34,34,34,2,2,3],[34,34,34,2,2,4],[34,34,34,2,2,5]]};function qa(a,b){this.id=a;this.lang=b||"unknown";this.enabled=this.active=!1}p("shaka.player.TextTrack.compare",function(a,b){return a.lang<b.lang?-1:a.lang>b.lang?1:0});function ra(a,b,c,d){this.id=a;this.bandwidth=b||0;this.width=c||0;this.height=d||0;this.active=!1}function sa(a,b){var c=a.width*a.height,d=b.width*b.height;return c<d?-1:c>d?1:a.bandwidth<b.bandwidth?-1:a.bandwidth>b.bandwidth?1:0}p("shaka.player.VideoTrack.compare",sa);function ta(){var a="CustomEvent"in window;if(a)try{new CustomEvent("")}catch(b){a=!1}a||(window.CustomEvent=ua)}p("shaka.polyfill.CustomEvent.install",ta);function ua(a,b){var c=document.createEvent("CustomEvent"),d=b||{bubbles:!1,cancelable:!1,detail:null};c.initCustomEvent(a,!!d.bubbles,!!d.cancelable,d.detail);return c};function va(){var a=Element.prototype;a.requestFullscreen=a.requestFullscreen||a.mozRequestFullScreen||a.msRequestFullscreen||a.webkitRequestFullscreen;a=Document.prototype;a.exitFullscreen=a.exitFullscreen||a.mozCancelFullScreen||a.msExitFullscreen||a.webkitExitFullscreen;"fullscreenElement"in document||Object.defineProperty(document,"fullscreenElement",{get:function(){return document.mozFullScreenElement||document.msFullscreenElement||document.webkitFullscreenElement}});document.addEventListener("webkitfullscreenchange",
                        xa);document.addEventListener("webkitfullscreenerror",xa);document.addEventListener("mozfullscreenchange",xa);document.addEventListener("mozfullscreenerror",xa);document.addEventListener("MSFullscreenChange",xa);document.addEventListener("MSFullscreenError",xa)}p("shaka.polyfill.Fullscreen.install",va);function xa(a){var b=a.type.replace(/^(webkit|moz|MS)/,"").toLowerCase(),b=new Event(b,a);a.target.dispatchEvent(b)};function ya(){return Promise.reject(Error("The key system specified is not supported."))}function za(a){return null==a?Promise.resolve():Promise.reject(Error("MediaKeys not supported."))}function Aa(){throw new TypeError("Illegal constructor.");}Aa.prototype.createSession=function(){};Aa.prototype.setServerCertificate=function(){};function Ba(){throw new TypeError("Illegal constructor.");}Ba.prototype.getConfiguration=function(){};Ba.prototype.createMediaKeys=function(){};function u(a){this.c=[];this.b=[];this.ba=Ca;if(a)try{a(this.W.bind(this),this.a.bind(this))}catch(b){this.a(b)}}var Ca=0;function Da(){window.Promise||(window.Promise=u,window.Promise.resolve=Ea,window.Promise.reject=Fa,window.Promise.all=Ga,window.Promise.race=Ha,window.setImmediate?(Ja=function(a){return window.setImmediate(a)},Ka=function(a){return window.clearImmediate(a)}):(Ja=function(a){return window.setTimeout(a,0)},Ka=function(a){return window.clearTimeout(a)}))}
                    p("shaka.polyfill.Promise.install",Da);function Ea(a){var b=new u;b.W(a);return b}function Fa(a){var b=new u;b.a(a);return b}function Ga(a){function b(a,b,c){a.ba==Ca&&(e[b]=c,d++,d==e.length&&a.W(e))}var c=new u;if(!a.length)return c.W([]),c;for(var d=0,e=Array(a.length),f=c.a.bind(c),g=0;g<a.length;++g)a[g]&&a[g].then?a[g].then(b.bind(null,c,g),f):b(c,g,a[g]);return c}function Ha(a){for(var b=new u,c=b.W.bind(b),d=b.a.bind(b),e=0;e<a.length;++e)a[e]&&a[e].then?a[e].then(c,d):c(a[e]);return b}
                    u.prototype.then=function(a,b){var c=new u;switch(this.ba){case 1:La(this,c,a);break;case 2:La(this,c,b);break;case Ca:this.c.push({Ia:c,Ba:a}),this.b.push({Ia:c,Ba:b})}return c};u.prototype.then=u.prototype.then;u.prototype.catch=function(a){return this.then(void 0,a)};u.prototype["catch"]=u.prototype.catch;u.prototype.W=function(a){if(this.ba==Ca){this.wa=a;this.ba=1;for(a=0;a<this.c.length;++a)La(this,this.c[a].Ia,this.c[a].Ba);this.c=[];this.b=[]}};
                    u.prototype.a=function(a){if(this.ba==Ca){this.wa=a;this.ba=2;for(a=0;a<this.b.length;++a)La(this,this.b[a].Ia,this.b[a].Ba);this.c=[];this.b=[]}};function La(a,b,c){Ma.push(function(){if(c&&"function"==typeof c){try{var a=c(this.wa)}catch(e){b.a(e);return}a instanceof u?a==b?b.a(new TypeError("Chaining cycle detected")):a.then(b.W.bind(b),b.a.bind(b)):b.W(a)}else 1==this.ba?b.W(this.wa):b.a(this.wa)}.bind(a));null==Na&&(Na=Ja(Oa))}
                    function Oa(){for(;Ma.length;){null!=Na&&(Ka(Na),Na=null);var a=Ma;Ma=[];for(var b=0;b<a.length;++b)a[b]()}}function Ja(){return 0}function Ka(){}var Na=null,Ma=[];function Pa(){var a=HTMLVideoElement.prototype;!a.getVideoPlaybackQuality&&"webkitDroppedFrameCount"in a&&(a.getVideoPlaybackQuality=Qa)}p("shaka.polyfill.VideoPlaybackQuality.install",Pa);function Qa(){return{droppedVideoFrames:this.webkitDroppedFrameCount,totalVideoFrames:this.webkitDecodedFrameCount,corruptedVideoFrames:0,creationTime:NaN,totalFrameDelay:0}};function Ra(a,b){for(var c=[],d=0;d<a.length;++d){for(var e=!1,f=0;f<c.length&&!(e=b?b(a[d],c[f]):a[d]===c[f]);++f);e||c.push(a[d])}return c};function v(){return Date.now()+Sa}var Sa=0;function Ta(a){this.b=a;this.c=0==Ua;this.a=0}var Ua=1;function Va(a){return a.a<a.b.byteLength}function Wa(a){var b=a.b.getUint8(a.a);a.a+=1;return b}function w(a){var b=a.b.getUint32(a.a,a.c);a.a+=4;return b}function Xa(a){var b,c;a.c?(b=a.b.getUint32(a.a,!0),c=a.b.getUint32(a.a+4,!0)):(c=a.b.getUint32(a.a,!1),b=a.b.getUint32(a.a+4,!1));if(2097151<c)throw new RangeError("DataViewReader: Overflow reading 64-bit value.");a.a+=8;return c*Math.pow(2,32)+b}
                    function Ya(a){if(a.a+16>a.b.byteLength)throw new RangeError("DataViewReader: Read past end of DataView.");var b=new Uint8Array(a.b.buffer,a.a,16);a.a+=16;return b}function Za(a,b){if(a.a+b>a.b.byteLength)throw new RangeError("DataViewReader: Skip past end of DataView.");a.a+=b};function $a(a){this.b=a;this.a=new Ta(a);ab||(ab=[new Uint8Array([255]),new Uint8Array([127,255]),new Uint8Array([63,255,255]),new Uint8Array([31,255,255,255]),new Uint8Array([15,255,255,255,255]),new Uint8Array([7,255,255,255,255,255]),new Uint8Array([3,255,255,255,255,255,255]),new Uint8Array([1,255,255,255,255,255,255,255])])}var ab;
                    function bb(a){var b;b=cb(a);if(7<b.length)throw new RangeError("EbmlParser: EBML ID must be at most 7 bytes.");for(var c=0,d=0;d<b.length;d++)c=256*c+b[d];b=c;c=cb(a);a:{for(d=0;d<ab.length;d++)if(db(c,ab[d])){d=!0;break a}d=!1}if(d)c=a.b.byteLength-a.a.a;else{if(8==c.length&&c[1]&224)throw new RangeError("EbmlParser: Variable sized integer value must be at most 53 bits.");for(var d=c[0]&(1<<8-c.length)-1,e=1;e<c.length;e++)d=256*d+c[e];c=d}c=a.a.a+c<=a.b.byteLength?c:a.b.byteLength-a.a.a;d=new DataView(a.b.buffer,
                        a.b.byteOffset+a.a.a,c);Za(a.a,c);return new eb(b,d)}function cb(a){var b=Wa(a.a),c;for(c=1;8>=c&&!(b&1<<8-c);c++);if(8<c)throw new RangeError("EbmlParser: Variable sized integer must fit within 8 bytes.");var d=new Uint8Array(c);d[0]=b;for(b=1;b<c;b++)d[b]=Wa(a.a);return d}function eb(a,b){this.id=a;this.a=b}
                    function fb(a){if(8<a.a.byteLength)throw new RangeError("EbmlElement: Unsigned integer has too many bytes.");if(8==a.a.byteLength&&a.a.getUint8(0)&224)throw new RangeError("EbmlParser: Unsigned integer must be at most 53 bits.");for(var b=0,c=0;c<a.a.byteLength;c++)var d=a.a.getUint8(c),b=256*b+d;return b};var gb={"output-restricted":"The required output protection is not available.","output-not-allowed":"The required output protection is not available.",expired:"The decryption key has expired.","internal-error":"The key system has encountered an unspecified error."};function hb(a){this.c=Math.exp(Math.log(.5)/a);this.a=this.b=0}hb.prototype.sample=function(a,b){var c=Math.pow(this.c,a);this.b=b*(1-c)+c*this.b;this.a+=a};function ib(a){return a.b/(1-Math.pow(a.c,a.a))};function x(a){var b=new CustomEvent(a.type,{detail:a.detail,bubbles:!!a.bubbles}),c;for(c in a)c in b||(b[c]=a[c]);return b}function y(a){return new CustomEvent("error",{detail:a,bubbles:!0})};function jb(a,b,c){kb(b);kb(c);return c==b||a>=lb&&c==b.split("-")[0]||a>=mb&&c.split("-")[0]==b.split("-")[0]?!0:!1}var lb=1,mb=2;function kb(a){a=a.toLowerCase().split("-");var b=nb[a[0]];b&&(a[0]=b);return a.join("-")}
                    var nb={aar:"aa",abk:"ab",afr:"af",aka:"ak",alb:"sq",amh:"am",ara:"ar",arg:"an",arm:"hy",asm:"as",ava:"av",ave:"ae",aym:"ay",aze:"az",bak:"ba",bam:"bm",baq:"eu",bel:"be",ben:"bn",bih:"bh",bis:"bi",bod:"bo",bos:"bs",bre:"br",bul:"bg",bur:"my",cat:"ca",ces:"cs",cha:"ch",che:"ce",chi:"zh",chu:"cu",chv:"cv",cor:"kw",cos:"co",cre:"cr",cym:"cy",cze:"cs",dan:"da",deu:"de",div:"dv",dut:"nl",dzo:"dz",ell:"el",eng:"en",epo:"eo",est:"et",eus:"eu",ewe:"ee",fao:"fo",fas:"fa",fij:"fj",fin:"fi",fra:"fr",fre:"fr",
                        fry:"fy",ful:"ff",geo:"ka",ger:"de",gla:"gd",gle:"ga",glg:"gl",glv:"gv",gre:"el",grn:"gn",guj:"gu",hat:"ht",hau:"ha",heb:"he",her:"hz",hin:"hi",hmo:"ho",hrv:"hr",hun:"hu",hye:"hy",ibo:"ig",ice:"is",ido:"io",iii:"ii",iku:"iu",ile:"ie",ina:"ia",ind:"id",ipk:"ik",isl:"is",ita:"it",jav:"jv",jpn:"ja",kal:"kl",kan:"kn",kas:"ks",kat:"ka",kau:"kr",kaz:"kk",khm:"km",kik:"ki",kin:"rw",kir:"ky",kom:"kv",kon:"kg",kor:"ko",kua:"kj",kur:"ku",lao:"lo",lat:"la",lav:"lv",lim:"li",lin:"ln",lit:"lt",ltz:"lb",lub:"lu",
                        lug:"lg",mac:"mk",mah:"mh",mal:"ml",mao:"mi",mar:"mr",may:"ms",mkd:"mk",mlg:"mg",mlt:"mt",mon:"mn",mri:"mi",msa:"ms",mya:"my",nau:"na",nav:"nv",nbl:"nr",nde:"nd",ndo:"ng",nep:"ne",nld:"nl",nno:"nn",nob:"nb",nor:"no",nya:"ny",oci:"oc",oji:"oj",ori:"or",orm:"om",oss:"os",pan:"pa",per:"fa",pli:"pi",pol:"pl",por:"pt",pus:"ps",que:"qu",roh:"rm",ron:"ro",rum:"ro",run:"rn",rus:"ru",sag:"sg",san:"sa",sin:"si",slk:"sk",slo:"sk",slv:"sl",sme:"se",smo:"sm",sna:"sn",snd:"sd",som:"so",sot:"st",spa:"es",sqi:"sq",
                        srd:"sc",srp:"sr",ssw:"ss",sun:"su",swa:"sw",swe:"sv",tah:"ty",tam:"ta",tat:"tt",tel:"te",tgk:"tg",tgl:"tl",tha:"th",tib:"bo",tir:"ti",ton:"to",tsn:"tn",tso:"ts",tuk:"tk",tur:"tr",twi:"tw",uig:"ug",ukr:"uk",urd:"ur",uzb:"uz",ven:"ve",vie:"vi",vol:"vo",wel:"cy",wln:"wa",wol:"wo",xho:"xh",yid:"yi",yor:"yo",zha:"za",zho:"zh",zul:"zu"};function ob(a){return Object.keys(a).map(function(b){return a[b]})}function pb(a,b){return qb(a,b,"boolean")}function rb(a,b){var c=qb(a,b,"number");if(null==c)return null;if(isNaN(c)||c==Number.NEGATIVE_INFINITY||c==Number.POSITIVE_INFINITY)throw new RangeError("'"+b+"' must be finite.");if(0>c)throw new RangeError("'"+b+"' must be >= 0");return c}function sb(a,b){return qb(a,b,"string")}
                    function qb(a,b,c){a=a[b];if(null==a)return null;if(typeof a!=c)throw new TypeError("'"+b+"' must be a "+c+".");return a}function tb(a,b,c){a=a[b];if(null==a)return null;if(!(a instanceof c))throw new TypeError("'"+b+"' must be an instance of "+c.name+".");return a};function z(){this.a={}}z.prototype.push=function(a,b){this.a.hasOwnProperty(a)?this.a[a].push(b):this.a[a]=[b]};z.prototype.set=function(a,b){this.a[a]=b};z.prototype.get=function(a){return(a=this.a[a])?a.slice():null};function ub(a){var b=[],c;for(c in a.a)b.push.apply(b,a.a[c]);return b}function vb(a,b,c){if(a=a.a[b])for(b=0;b<a.length;++b)a[b]==c&&(a.splice(b,1),--b)}function wb(a){var b=[],c;for(c in a.a)b.push(c);return b};function B(){this.a=new z}B.prototype.destroy=function(){xb(this);this.a=null};function C(a,b,c,d){b=new yb(b,c,d);a.a.push(c,b)}B.prototype.sa=function(a,b){for(var c=this.a.get(b)||[],d=0;d<c.length;++d){var e=c[d];e.target==a&&(e.sa(),vb(this.a,b,e))}};function xb(a){for(var b=ub(a.a),c=0;c<b.length;++c)b[c].sa();a.a.a={}}function yb(a,b,c){this.target=a;this.type=b;this.a=c;this.target.addEventListener(b,c,!1)}
                    yb.prototype.sa=function(){this.target&&(this.target.removeEventListener(this.type,this.a,!1),this.a=this.target=null)};function D(a){this.ya=new z;this.v=a}p("shaka.util.FakeEventTarget",D);D.prototype.addEventListener=function(a,b,c){c||this.ya.push(a,b)};D.prototype.removeEventListener=function(a,b,c){c||vb(this.ya,a,b)};
                    D.prototype.dispatchEvent=function(a){a.hasOwnProperty("srcElement")||(delete a.srcElement,Object.defineProperty(a,"srcElement",{get:function(){return null}}));if(a.hasOwnProperty("target"))a.target=this;else{delete a.target;var b=this;Object.defineProperty(a,"target",{get:function(){return b},set:function(a){b=a}})}if(a.hasOwnProperty("currentTarget"))a.currentTarget=null;else{delete a.currentTarget;var c=null;Object.defineProperty(a,"currentTarget",{get:function(){return c},set:function(a){c=a}})}return zb(this,
                        a)};function zb(a,b){b.currentTarget=a;for(var c=a.ya.get(b.type)||[],d=0;d<c.length;++d){var e=c[d];try{e.handleEvent?e.handleEvent(b):e.call(a,b)}catch(f){}}a.v&&b.bubbles&&zb(a.v,b);return b.defaultPrevented};function Ab(){D.call(this,null);this.a=new hb(3);this.c=new hb(10);this.b=0}q(Ab,D);p("shaka.util.EWMABandwidthEstimator",Ab);Ab.prototype.sample=function(a,b){if(!(65536>b)){a=Math.max(a,50);var c=8E3*b/a,d=a/1E3;this.a.sample(d,c);this.c.sample(d,c);this.dispatchEvent(x({type:"bandwidth"}));this.b=Date.now()}};Ab.prototype.getBandwidth=function(){return.5>this.a.a?5E5:Math.min(ib(this.a),ib(this.c))};Ab.prototype.getDataAge=function(){return(Date.now()-this.b)/1E3};
                    Ab.prototype.supportsCaching=function(){return!1};function E(){var a,b,c=new Promise(function(c,e){a=c;b=e});c.resolve=a;c.reject=b;c.destroy=E.prototype.destroy;return c}E.prototype.destroy=function(){this.catch(function(){});var a=Error("Destroyed!");a.type="destroy";this.reject(a)};function Bb(a){return a.split("").reduce(function(a,c,d){return a+(d&&0==d%4?" "+c:c)})};function Cb(){this.g=new E;this.f=!1;this.a=null;this.b=[];this.c=null}function Db(a,b){if(a.f)throw Error("Cannot append to a running task!");a.b.push(b)}Cb.prototype.start=function(){if(this.f)throw Error("Task already started!");this.f=!0;this.b.unshift(function(){});Eb(this,void 0)};Cb.prototype.end=function(){this.b.splice(1)};
                    function Eb(a,b){var c=a.b[0](b),d;c?(d=c[0],a.c=c[1]):(d=Promise.resolve(),a.c=null);d.then(F(a,function(a){this.a?(this.b=[],this.c=null,Fb(this)):(this.b.shift(),this.b.length?Eb(this,a):(this.g.resolve(a),this.c=null))})).catch(F(a,function(a){this.b=[];this.c=null;this.a?Fb(this):this.g.reject(a)}))}function Fb(a){var b=Error("Task aborted.");b.type="aborted";a.g.reject(b);window.setTimeout(function(){this.a.resolve();this.a=null}.bind(a),5)};function F(a,b){return b.bind(a)};function Gb(a,b){D.call(this,b);this.a=null;this.h=a}q(Gb,D);
                    function Hb(a){if(!window.indexedDB)return a=Error("Persistant storage requires IndexedDB support."),a.type="storage",Promise.reject(a);if(a.a)return a=Error("A database connection is already open."),a.type="storage",Promise.reject(a);var b=new E,c=window.indexedDB.open("content_database",1);c.onupgradeneeded=F(a,function(a){this.a=a.target.result;Ib(this,"group_store",{keyPath:"group_id"});Ib(this,"stream_index_store",{keyPath:"stream_id"});a=Ib(this,"content_store",{autoIncrement:"true"});a.createIndex("segment",
                        ["stream_id","segment_id"],{unique:!0});a.createIndex("stream","stream_id",{unique:!1})});c.onsuccess=F(a,function(a){this.a=a.target.result;b.resolve()});c.onerror=function(){b.reject(c.error)};return b}function Jb(a){a.a&&(a.a.close(),a.a=null)}function Ib(a,b,c){a.a.objectStoreNames.contains(b)&&a.a.deleteObjectStore(b);return a.a.createObjectStore(b,c)}function Kb(a){return Lb(a,"content_store")}function Mb(a){return Lb(a,"stream_index_store")}function Ob(a){return Lb(a,"group_store")}
                    function Lb(a,b){return a.a.transaction([b],a.h).objectStore(b)}function Pb(a,b){var c=new E,d=a.get(b);d.onerror=function(){c.reject(d.error)};d.onsuccess=function(){if(d.result)c.resolve(d.result);else{var a=Error("Item not found.");a.type="storage";c.reject(a)}};return c};function Qb(){Gb.call(this,"readonly",null)}q(Qb,Gb);function Rb(a){var b=new E,c=[],d=Ob(a).openCursor();d.onerror=function(){b.reject(d.error)};d.onsuccess=function(a){(a=a.target.result)?(c.push(a.key),a.continue()):b.resolve(c)};return b}
                    function Sb(a,b){return Pb(Ob(a),b).then(F(a,function(a){a.session_ids=Ra(a.session_ids);return a.hasOwnProperty("duration")||a.hasOwnProperty("key_system")?Promise.resolve(a):Tb(this,a.stream_ids[0]).then(function(b){a.duration=b.duration;a.key_system=b.key_system;a.license_server=b.license_server;a.with_credentials=b.with_credentials;a.distinctive_identifier=b.distinctive_identifier;a.audio_robustness=b.audio_robustness;a.video_robustness=b.video_robustness;return Promise.resolve(a)})}))}
                    function Tb(a,b){return Pb(Mb(a),b)}function Ub(a,b,c){return Pb(Kb(a).index("segment"),[b,c]).then(function(a){return Promise.resolve(a.content)})};function Vb(a,b,c){MediaSource.isTypeSupported(b);b=a.addSourceBuffer(b);this.i=a;this.c=b;this.l=c;this.j=new B;this.g=null;this.b=[];this.w=0;this.f=this.a=null;this.s=0;C(this.j,this.c,"updateend",this.B.bind(this))}var Wb=1/60;Vb.prototype.destroy=function(){Xb(this).catch(function(){});this.f&&this.f.destroy();this.a=this.f=null;this.g&&(Jb(this.g),this.g=null);this.b=null;this.j.destroy();this.i=this.c=this.j=null};
                    function Yb(a,b){for(var c=a.c.buffered,d=0;d<c.length;++d){var e=c.start(d)-Wb,f=c.end(d)+Wb;if(b>=e&&b<=f)return c.end(d)-b}return 0}
                    function Zb(a,b,c,d){if(a.a)return a=Error("Cannot fetch ("+a.v+"): previous operation not complete."),a.type="stream",Promise.reject(a);a.a=new Cb;c!=a.c.timestampOffset&&(a.c.timestampOffset=c);"idb"!=b.url.b[0].P||a.g||(a.g=new Qb,Db(a.a,function(){return[Hb(this.g)]}.bind(a)));d&&Db(a.a,function(){return[$b(this,d),this.h.bind(this)]}.bind(a));Db(a.a,function(){var a=b.a?b.a-b.b:1,c=new ac;c.a=3;c.h=1E3*a;c.c=1E3*this.s;c.i=this.g;return[bc(b.url,c,this.l),G.prototype.g.bind(b.url)]}.bind(a));
                        Db(a.a,F(a,function(a){this.l.getBandwidth();return[$b(this,a),this.h.bind(this)]}));var e=0==a.c.buffered.length&&0==a.b.length,f=null;Db(a.a,function(){if(0==this.c.buffered.length){var a=Error("Failed to buffer segment ("+this.v+").");a.type="stream";return[Promise.reject(a)]}e&&(a=b.b,f=this.c.buffered.start(0)-a);a=cc(this.b,b.b);0<=a?this.b.splice(a+1,0,b):this.b.push(b)}.bind(a));return dc(a).then(function(){return Promise.resolve(f)}.bind(a))}
                    function ec(a){if(a.a)return a=Error("Cannot clear ("+a.v+"): previous operation not complete."),a.type="stream",Promise.reject(a);a.a=new Cb;Db(a.a,function(){var a;a:if(0==this.c.buffered.length)a=Promise.resolve();else{try{this.c.remove(0,this.i.duration)}catch(c){a=Promise.reject(c);break a}this.b=[];a=this.f=new E}return[a,this.h.bind(this)]}.bind(a));return dc(a)}
                    function fc(a,b){if(a.a){var c=Error("Cannot clearAfter ("+a.v+"): previous operation not complete.");c.type="stream";return Promise.reject(c)}a.a=new Cb;Db(a.a,function(){return[gc(this,b),this.h.bind(this)]}.bind(a));return dc(a)}function Xb(a){a.a?(a=a.a,a.a?a=a.a:a.f?(a.c&&a.c(),a.a=new E,a=a.a):(a.f=!0,a=Promise.resolve())):a=Promise.resolve();return a}function dc(a){a.a.start();return a.a.g.then(F(a,function(){this.a=null})).catch(F(a,function(a){this.a=null;return Promise.reject(a)}))}
                    function $b(a,b){try{a.c.appendBuffer(b)}catch(c){return Promise.reject(c)}a.f=new E;return a.f}function gc(a,b){if(0==a.c.buffered.length)return Promise.resolve();var c=cc(a.b,b);if(-1==c||c==a.b.length-1)return Promise.resolve();try{a.c.remove(a.b[c+1].b,a.i.duration)}catch(d){return Promise.reject(d)}a.b=a.b.slice(0,c+1);a.f=new E;return a.f}Vb.prototype.h=function(){this.f&&"open"==this.i.readyState&&this.c.abort()};Vb.prototype.B=function(){this.f&&(this.f.resolve(),this.f=null)};function hc(a){return String.fromCharCode.apply(null,a)}p("shaka.util.Uint8ArrayUtils.toString",hc);function ic(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;++c)b[c]=a.charCodeAt(c);return b}p("shaka.util.Uint8ArrayUtils.fromString",ic);p("shaka.util.Uint8ArrayUtils.toBase64",function(a,b){var c=void 0==b?!0:b,d=window.btoa(hc(a)).replace(/\+/g,"-").replace(/\//g,"_");return c?d:d.replace(/=*$/,"")});function jc(a){return ic(window.atob(a.replace(/-/g,"+").replace(/_/g,"/")))}
                    p("shaka.util.Uint8ArrayUtils.fromBase64",jc);p("shaka.util.Uint8ArrayUtils.fromHex",function(a){for(var b=new Uint8Array(a.length/2),c=0;c<a.length;c+=2)b[c/2]=window.parseInt(a.substr(c,2),16);return b});function kc(a){for(var b="",c=0;c<a.length;++c){var d=a[c].toString(16);1==d.length&&(d="0"+d);b+=d}return b}p("shaka.util.Uint8ArrayUtils.toHex",kc);function db(a,b){if(!a&&!b)return!0;if(!a||!b||a.length!=b.length)return!1;for(var c=0;c<a.length;++c)if(a[c]!=b[c])return!1;return!0};function lc(){this.h=this.a="";this.i=!1;this.s=this.l=null;this.v=this.g=!1;this.j=this.f="";this.c=null;this.b=[]}
                    function mc(a){var b=new lc;if(!a)return b;var c=sb(a,"keySystem");if(null!=c)b.a=c;else throw Error("'keySystem' cannot be null.");var d=sb(a,"licenseServerUrl");if(null!=d)b.h=d;else if(c)throw Error("For encrypted streaming content, 'licenseServerUrl' cannot be null or empty.");c=pb(a,"withCredentials");null!=c&&(b.i=c);c=tb(a,"licensePostProcessor",Function);null!=c&&(b.l=c);c=tb(a,"licensePreProcessor",Function);null!=c&&(b.s=c);c=pb(a,"distinctiveIdentifierRequired");null!=c&&(b.g=c);c=pb(a,
                        "persistentStateRequired");null!=c&&(b.v=c);c=sb(a,"audioRobustness");null!=c&&(b.f=c);c=sb(a,"videoRobustness");null!=c&&(b.j=c);c=tb(a,"serverCertificate",Uint8Array);null!=c&&(b.c=c);if(c=tb(a,"initData",Object)){a=tb(c,"initData",Uint8Array);if(null==a)throw Error("'initData.initData' cannot be null.");c=sb(c,"initDataType");if(null==c)throw Error("'initData.initDataType' cannot be null.");b.b.push({initData:new Uint8Array(a.buffer),initDataType:c})}return b}
                    function nc(a,b){var c=new lc;c.a=a.a;c.h=a.h;c.i=a.i;c.l=a.l;c.s=a.s;c.g=a.g;c.v=a.v;c.f=a.f;c.j=a.j;c.c=a.c?new Uint8Array(a.c.buffer):null;oc(c,a.b);oc(c,b.b);return c}function oc(a,b){var c=a.b.concat(b.map(function(a){return{initData:new Uint8Array(a.initData.buffer),initDataType:a.initDataType}}));a.b=Ra(c,pc)}function pc(a,b){return a.initDataType==b.initDataType&&db(a.initData,b.initData)};function qc(a,b){try{var c=new rc(a,b);return Promise.resolve(c)}catch(d){return Promise.reject(d)}}function sc(a){var b=this.mediaKeys;b&&b!=a&&tc(b,null);delete this.mediaKeys;(this.mediaKeys=a)&&tc(a,this);return Promise.resolve()}
                    function rc(a,b){this.a=this.keySystem=a;var c=!0;"org.w3.clearkey"==a&&(this.a="webkit-org.w3.clearkey",c=!1);var d=!1,e;e=document.getElementsByTagName("video");e=e.length?e[0]:document.createElement("video");for(var f=0;f<b.length;++f){var g=b[f],h={audioCapabilities:[],videoCapabilities:[],persistentState:"optional",distinctiveIdentifier:"optional",initDataTypes:g.initDataTypes,sessionTypes:["temporary"]},l=!1;if(g.audioCapabilities)for(var m=0;m<g.audioCapabilities.length;++m){var n=g.audioCapabilities[m];
                        n.contentType&&(l=!0,e.canPlayType(n.contentType.split(";")[0],this.a)&&(h.audioCapabilities.push(n),d=!0))}if(g.videoCapabilities)for(m=0;m<g.videoCapabilities.length;++m)n=g.videoCapabilities[m],n.contentType&&(l=!0,e.canPlayType(n.contentType,this.a)&&(h.videoCapabilities.push(n),d=!0));l||(d=e.canPlayType("video/mp4",this.a)||e.canPlayType("video/webm",this.a));"required"==g.persistentState&&(c?(h.persistentState="required",h.sessionTypes=["persistent-license"]):d=!1);if(d){this.b=h;return}}c=
                        "Unsupported keySystem";if("org.w3.clearkey"==a||"com.widevine.alpha"==a)c="None of the requested configurations were supported.";c=Error(c);c.name="NotSupportedError";c.code=DOMException.NOT_SUPPORTED_ERR;throw c;}rc.prototype.createMediaKeys=function(){var a=new uc(this.a);return Promise.resolve(a)};rc.prototype.getConfiguration=function(){return this.b};function uc(a){this.g=a;this.b=null;this.a=new B;this.c=[];this.f={}}
                    function tc(a,b){a.b=b;xb(a.a);b&&(C(a.a,b,"webkitneedkey",a.Ob.bind(a)),C(a.a,b,"webkitkeymessage",a.Nb.bind(a)),C(a.a,b,"webkitkeyadded",a.Lb.bind(a)),C(a.a,b,"webkitkeyerror",a.Mb.bind(a)))}k=uc.prototype;k.createSession=function(a){var b=a||"temporary";if("temporary"!=b&&"persistent-license"!=b)throw new TypeError("Session type "+a+" is unsupported on this platform.");a=this.b||document.createElement("video");a.src||(a.src="about:blank");b=new vc(a,this.g,b);this.c.push(b);return b};
                    k.setServerCertificate=function(){return Promise.reject(Error("setServerCertificate not supported on this platform."))};k.Ob=function(a){a=x({type:"encrypted",initDataType:"webm",initData:a.initData});this.b.dispatchEvent(a)};k.Nb=function(a){var b=wc(this,a.sessionId);b&&(a=x({type:"message",messageType:void 0==b.keyStatuses.Fa()?"licenserequest":"licenserenewal",message:a.message}),b.b&&(b.b.resolve(),b.b=null),b.dispatchEvent(a))};
                    k.Lb=function(a){if(a=wc(this,a.sessionId))xc(a,"usable"),a.a&&a.a.resolve(),a.a=null};
                    k.Mb=function(a){var b=wc(this,a.sessionId);if(b){var c=Error("EME v0.1b key error");c.errorCode=a.errorCode;c.errorCode.systemCode=a.systemCode;!a.sessionId&&b.b?(c.method="generateRequest",45==a.systemCode&&(c.message="Unsupported session type."),b.b.reject(c),b.b=null):a.sessionId&&b.a?(c.method="update",b.a.reject(c),b.a=null):(c=a.systemCode,a.errorCode.code==MediaKeyError.MEDIA_KEYERR_OUTPUT?xc(b,"output-restricted"):1==c?xc(b,"expired"):xc(b,"internal-error"))}};
                    function wc(a,b){var c=a.f[b];return c?c:(c=a.c.shift())?(c.sessionId=b,a.f[b]=c):null}function vc(a,b,c){D.call(this,null);this.f=a;this.h=!1;this.a=this.b=null;this.c=b;this.g=c;this.sessionId="";this.expiration=NaN;this.closed=new E;this.keyStatuses=new yc}q(vc,D);
                    function zc(a,b,c){if(a.h)return Promise.reject(Error("The session is already initialized."));a.h=!0;var d;try{if("persistent-license"==a.g)if(c)d=ic("LOAD_SESSION|"+c);else{var e=new Uint8Array(b);d=ic("PERSISTENT|"+hc(e))}else d=new Uint8Array(b)}catch(f){return Promise.reject(f)}a.b=new E;try{a.f.webkitGenerateKeyRequest(a.c,d)}catch(g){if("InvalidStateError"!=g.name)return a.b=null,Promise.reject(g);setTimeout(function(){try{this.f.webkitGenerateKeyRequest(this.c,d)}catch(a){this.b.reject(a),
                        this.b=null}}.bind(a),10)}return a.b}k=vc.prototype;k.Qa=function(a,b){if(this.a)this.a.then(this.Qa.bind(this,a,b)).catch(this.Qa.bind(this,a,b));else{this.a=a;var c,d;"webkit-org.w3.clearkey"==this.c?(c=hc(new Uint8Array(b)),d=JSON.parse(c),"oct"!=d.keys[0].kty&&(this.a.reject(Error("Response is not a valid JSON Web Key Set.")),this.a=null),c=jc(d.keys[0].k),d=jc(d.keys[0].kid)):(c=new Uint8Array(b),d=null);try{this.f.webkitAddKey(this.c,c,d,this.sessionId)}catch(e){this.a.reject(e),this.a=null}}};
                    function xc(a,b){a.keyStatuses.Ma(b);var c=x({type:"keystatuseschange"});a.dispatchEvent(c)}k.generateRequest=function(a,b){return zc(this,b,null)};k.load=function(a){return"persistent-license"==this.g?zc(this,null,a):Promise.reject(Error("Not a persistent session."))};k.update=function(a){var b=new E;this.Qa(b,a);return b};
                    k.close=function(){if("persistent-license"!=this.g){if(!this.sessionId)return this.closed.reject(Error("The session is not callable.")),this.closed;this.f.webkitCancelKeyRequest(this.c,this.sessionId)}this.closed.resolve();return this.closed};k.remove=function(){return"persistent-license"!=this.g?Promise.reject(Error("Not a persistent session.")):this.close()};function yc(){this.size=0;this.a=void 0}var Ac;k=yc.prototype;k.Ma=function(a){this.size=void 0==a?0:1;this.a=a};k.Fa=function(){return this.a};
                    k.forEach=function(a){this.a&&a(Ac,this.a)};k.get=function(a){if(this.has(a))return this.a};k.has=function(a){var b=Ac;return this.a&&db(new Uint8Array(a),new Uint8Array(b))?!0:!1};function Bc(a){this.systemIds=[];this.cencKeyIds=[];this.a=[];a=new Ta(new DataView(a.buffer));try{for(;Va(a);){var b=a.a,c=w(a),d=w(a);1==c?c=Xa(a):0==c&&(c=a.b.byteLength-b);if(1886614376!=d)Za(a,c-(a.a-b));else{var e=Wa(a);if(1<e)Za(a,c-(a.a-b));else{Za(a,3);var f=kc(Ya(a)),g=[];if(0<e)for(var h=w(a),l=0;l<h;++l){var m=kc(Ya(a));g.push(m)}var n=w(a);Za(a,n);this.cencKeyIds.push.apply(this.cencKeyIds,g);this.systemIds.push(f);this.a.push({start:b,end:a.a-1});a.a!=b+c&&Za(a,c-(a.a-b))}}}}catch(t){}}
                    ;function Cc(a,b){try{var c=new Dc(a,b);return Promise.resolve(c)}catch(d){return Promise.reject(d)}}
                    function Dc(a,b){this.keySystem=a;for(var c=!1,d=0;d<b.length;++d){var e=b[d],f={audioCapabilities:[],videoCapabilities:[],persistentState:"optional",distinctiveIdentifier:"optional",initDataTypes:e.initDataTypes,sessionTypes:["temporary"]},g=!1;if(e.audioCapabilities)for(var h=0;h<e.audioCapabilities.length;++h){var l=e.audioCapabilities[h];if(l.contentType){var g=!0,m=l.contentType.split(";")[0];MSMediaKeys.isTypeSupported(this.keySystem,m)&&(f.audioCapabilities.push(l),c=!0)}}if(e.videoCapabilities)for(h=
h<e.videoCapabilities.length;++h)l=e.videoCapabilities[h],l.contentType&&(g=!0,m=l.contentType.split(";")[0],MSMediaKeys.isTypeSupported(this.keySystem,m)&&(f.videoCapabilities.push(l),c=!0));g||(c=MSMediaKeys.isTypeSupported(this.keySystem,"video/mp4"));"required"==e.persistentState&&(f.persistentState="required",f.sessionTypes=["persistent-license"]);if(c){this.a=f;return}}c=Error("Unsupported keySystem");c.name="NotSupportedError";c.code=DOMException.NOT_SUPPORTED_ERR;throw c;}
                    Dc.prototype.createMediaKeys=function(){var a=new Ec(this.keySystem);return Promise.resolve(a)};Dc.prototype.getConfiguration=function(){return this.a};function Fc(a){var b=this.mediaKeys;b&&b!=a&&Gc(b,null);delete this.mediaKeys;return(this.mediaKeys=a)?Gc(a,this):Promise.resolve()}function Ec(a){this.a=new MSMediaKeys(a);this.b=new B}Ec.prototype.createSession=function(a){if("temporary"!=(a||"temporary"))throw new TypeError("Session type "+a+" is unsupported on this platform.");return new Hc(this.a)};
                    Ec.prototype.setServerCertificate=function(){return Promise.reject(Error("setServerCertificate not supported on this platform."))};function Gc(a,b){function c(){b.msSetMediaKeys(d.a);b.removeEventListener("loadedmetadata",c)}xb(a.b);if(!b)return Promise.resolve();C(a.b,b,"msneedkey",Ic);var d=a;try{return 1<=b.readyState?b.msSetMediaKeys(a.a):b.addEventListener("loadedmetadata",c),Promise.resolve()}catch(e){return Promise.reject(e)}}
                    function Hc(a){D.call(this,null);this.c=null;this.g=a;this.b=this.a=null;this.f=new B;this.sessionId="";this.expiration=NaN;this.closed=new E;this.keyStatuses=new Jc}q(Hc,D);k=Hc.prototype;k.generateRequest=function(a,b){this.a=new E;try{this.c=this.g.createSession("video/mp4",new Uint8Array(b),null),C(this.f,this.c,"mskeymessage",this.Bb.bind(this)),C(this.f,this.c,"mskeyadded",this.zb.bind(this)),C(this.f,this.c,"mskeyerror",this.Ab.bind(this)),Kc(this,"status-pending")}catch(c){this.a.reject(c)}return this.a};
                    k.load=function(){return Promise.reject(Error("MediaKeySession.load not yet supported"))};k.update=function(a){this.b=new E;try{this.c.update(new Uint8Array(a))}catch(b){this.b.reject(b)}return this.b};k.close=function(){try{this.c.close(),this.closed.resolve(),xb(this.f)}catch(a){this.closed.reject(a)}return this.closed};k.remove=function(){return Promise.reject(Error("MediaKeySession.remove is only applicable for persistent licenses, which are not supported on this platform"))};
                    function Ic(a){var b=a.initData;if(b){var c=new Bc(b);if(1>=c.a.length)a=b;else{var d=[];for(a=0;a<c.a.length;a++)d.push(b.subarray(c.a[a].start,c.a[a].end+1));b=Ra(d,Lc);for(a=c=0;a<b.length;a++)c+=b[a].length;c=new Uint8Array(c);for(a=d=0;a<b.length;a++)c.set(b[a],d),d+=b[a].length;a=c}}else a=b;a=x({type:"encrypted",initDataType:"cenc",initData:a});this.dispatchEvent(a)}function Lc(a,b){return db(a,b)}
                    k.Bb=function(a){this.a&&(this.a.resolve(),this.a=null);a=x({type:"message",messageType:void 0==this.keyStatuses.Fa()?"licenserequest":"licenserenewal",message:a.message.buffer});this.dispatchEvent(a)};k.zb=function(){this.a?(this.a.resolve(),this.a=null):this.b&&(Kc(this,"usable"),this.b.resolve(),this.b=null)};
                    k.Ab=function(){var a=Error("EME v20140218 key error");a.errorCode=this.c.error;if(null!=this.a)this.a.reject(a),this.a=null;else if(null!=this.b)this.b.reject(a),this.b=null;else switch(this.c.error.code){case MSMediaKeyError.MS_MEDIA_KEYERR_OUTPUT:case MSMediaKeyError.MS_MEDIA_KEYERR_HARDWARECHANGE:Kc(this,"output-not-allowed");default:Kc(this,"internal-error")}};function Kc(a,b){a.keyStatuses.Ma(b);var c=x({type:"keystatuseschange"});a.dispatchEvent(c)}function Jc(){this.size=0;this.a=void 0}var Mc;
                    k=Jc.prototype;k.Ma=function(a){this.size=void 0==a?0:1;this.a=a};k.Fa=function(){return this.a};k.forEach=function(a){this.a&&a(Mc,this.a)};k.get=function(a){if(this.has(a))return this.a};k.has=function(a){var b=Mc;return this.a&&db(new Uint8Array(a),new Uint8Array(b))?!0:!1};function Nc(){Navigator.prototype.requestMediaKeySystemAccess&&MediaKeySystemAccess.prototype.getConfiguration||(HTMLMediaElement.prototype.webkitGenerateKeyRequest?(Ac=(new Uint8Array([0])).buffer,Navigator.prototype.requestMediaKeySystemAccess=qc,delete HTMLMediaElement.prototype.mediaKeys,HTMLMediaElement.prototype.mediaKeys=null,HTMLMediaElement.prototype.setMediaKeys=sc,window.MediaKeys=uc,window.MediaKeySystemAccess=rc):window.MSMediaKeys?(Mc=(new Uint8Array([0])).buffer,delete HTMLMediaElement.prototype.mediaKeys,
                        HTMLMediaElement.prototype.mediaKeys=null,HTMLMediaElement.prototype.setMediaKeys=Fc,window.MediaKeys=Ec,window.MediaKeySystemAccess=Dc,Navigator.prototype.requestMediaKeySystemAccess=Cc):(Navigator.prototype.requestMediaKeySystemAccess=ya,delete HTMLMediaElement.prototype.mediaKeys,HTMLMediaElement.prototype.mediaKeys=null,HTMLMediaElement.prototype.setMediaKeys=za,window.MediaKeys=Aa,window.MediaKeySystemAccess=Ba))}p("shaka.polyfill.MediaKeys.install",Nc);p("shaka.polyfill.installAll",function(){ta();va();Pa();Da();Nc()});var Oc=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#(.*))?$/;function H(a){var b;a instanceof H?(Pc(this,a.P),this.ca=a.ca,this.S=a.S,Qc(this,a.ia),this.O=a.O,Rc(this,a.a.clone()),this.aa=a.aa):a&&(b=String(a).match(Oc))?(Pc(this,b[1]||"",!0),this.ca=Sc(b[2]||""),this.S=Sc(b[3]||"",!0),Qc(this,b[4]),this.O=Sc(b[5]||"",!0),Rc(this,b[6]||"",!0),this.aa=Sc(b[7]||"")):this.a=new Tc(null)}k=H.prototype;k.P="";k.ca="";k.S="";k.ia=null;k.O="";k.aa="";
                    k.toString=function(){var a=[],b=this.P;b&&a.push(Vc(b,Wc,!0),":");if(b=this.S){a.push("//");var c=this.ca;c&&a.push(Vc(c,Wc,!0),"@");a.push(encodeURIComponent(b).replace(/%25([0-9a-fA-F]{2})/g,"%$1"));b=this.ia;null!=b&&a.push(":",String(b))}if(b=this.O)this.S&&"/"!=b.charAt(0)&&a.push("/"),a.push(Vc(b,"/"==b.charAt(0)?Xc:Yc,!0));(b=this.a.toString())&&a.push("?",b);(b=this.aa)&&a.push("#",Vc(b,Zc));return a.join("")};
                    k.resolve=function(a){var b=this.clone();"data"===b.P&&(b=new H);var c=!!a.P;c?Pc(b,a.P):c=!!a.ca;c?b.ca=a.ca:c=!!a.S;c?b.S=a.S:c=null!=a.ia;var d=a.O;if(c)Qc(b,a.ia);else if(c=!!a.O){if("/"!=d.charAt(0))if(this.S&&!this.O)d="/"+d;else{var e=b.O.lastIndexOf("/");-1!=e&&(d=b.O.substr(0,e+1)+d)}if(".."==d||"."==d)d="";else if(-1!=d.indexOf("./")||-1!=d.indexOf("/.")){for(var e=0==d.lastIndexOf("/",0),d=d.split("/"),f=[],g=0;g<d.length;){var h=d[g++];"."==h?e&&g==d.length&&f.push(""):".."==h?((1<f.length||
                    1==f.length&&""!=f[0])&&f.pop(),e&&g==d.length&&f.push("")):(f.push(h),e=!0)}d=f.join("/")}}c?b.O=d:c=""!==a.a.toString();c?Rc(b,a.a.clone()):c=!!a.aa;c&&(b.aa=a.aa);return b};k.clone=function(){return new H(this)};function Pc(a,b,c){a.P=c?Sc(b,!0):b;a.P&&(a.P=a.P.replace(/:$/,""))}function Qc(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.ia=b}else a.ia=null}function Rc(a,b,c){b instanceof Tc?a.a=b:(c||(b=Vc(b,$c)),a.a=new Tc(b))}
                    function Sc(a,b){return a?b?decodeURI(a):decodeURIComponent(a):""}function Vc(a,b,c){return"string"==typeof a?(a=encodeURI(a).replace(b,ad),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function ad(a){a=a.charCodeAt(0);return"%"+(a>>4&15).toString(16)+(a&15).toString(16)}var Wc=/[#\/\?@]/g,Yc=/[\#\?:]/g,Xc=/[\#\?]/g,$c=/[\#\?@]/g,Zc=/#/g;function Tc(a){this.b=a||null}Tc.prototype.a=null;Tc.prototype.c=null;
                    function bd(a,b,c){if(!a.a&&(a.a={},a.c=0,a.b))for(var d=a.b.split("&"),e=0;e<d.length;e++){var f=d[e].indexOf("="),g=null,h=null;0<=f?(g=d[e].substring(0,f),h=d[e].substring(f+1)):g=d[e];g=decodeURIComponent(g.replace(/\+/g," "));h=h||"";bd(a,g,decodeURIComponent(h.replace(/\+/g," ")))}a.b=null;(d=a.a.hasOwnProperty(b)&&a.a[b])||(a.a[b]=d=[]);d.push(c);a.c++}
                    Tc.prototype.toString=function(){if(this.b)return this.b;if(!this.a)return"";var a=[],b;for(b in this.a)for(var c=encodeURIComponent(b),d=this.a[b],e=0;e<d.length;e++){var f=c;""!==d[e]&&(f+="="+encodeURIComponent(d[e]));a.push(f)}return this.b=a.join("&")};Tc.prototype.clone=function(){var a=new Tc;a.b=this.b;if(this.a){var b={},c;for(c in this.a)b[c]=this.a[c].concat();a.a=b;a.c=this.c}return a};function cd(){this.id=this.url=null;this.type="static";this.b=this.j=this.u=this.hb=null;this.h=5;this.f=this.c=this.g=null;this.i=1;this.a=[]}function dd(){this.g=this.f=this.c=this.u=this.a=this.start=this.id=null;this.b=[]}function ed(){this.i=this.b=this.height=this.width=this.contentType=this.lang=this.group=this.id=null;this.c=!1;this.h=this.g=this.f=this.u=null;this.j=[];this.a=[]}function fd(){this.value=null}function gd(){this.contentType=this.lang=this.id=null}
                    function hd(){this.a=this.b=this.g=this.u=this.h=this.f=this.height=this.width=this.bandwidth=this.lang=this.id=null;this.c=[]}function id(){this.b=this.a=this.c=this.f=null}function jd(){this.parsedPssh=this.psshBox=null}function kd(){this.url=null}function ld(){this.url=null}function md(){this.u=null;this.g=1;this.c=this.b=this.a=this.f=null}md.prototype.clone=function(){var a=new md;a.u=nd(this.u);a.g=this.g;a.f=this.f;a.a=J(this.a);a.b=J(this.b);a.c=J(this.c);return a};
                    function od(){this.a=this.url=null}od.prototype.clone=function(){var a=new od;a.url=nd(this.url);a.a=J(this.a);return a};function pd(){this.a=this.url=null}pd.prototype.clone=function(){var a=new pd;a.url=nd(this.url);a.a=J(this.a);return a};function qd(){this.u=null;this.f=1;this.b=this.g=null;this.i=1;this.h=null;this.a=[];this.c=null}qd.prototype.clone=function(){var a=new qd;a.u=nd(this.u);a.f=this.f;a.g=this.g;a.b=this.b;a.i=this.i;a.h=J(this.h);a.a=nd(this.a)||[];a.c=J(this.c);return a};
                    function rd(){this.a=this.b=null}rd.prototype.clone=function(){var a=new rd;a.b=nd(this.b);a.a=J(this.a);return a};function sd(){this.a=1;this.b=this.i=null;this.j=1;this.c=this.g=this.f=this.h=null}sd.prototype.clone=function(){var a=new sd;a.a=this.a;a.i=this.i;a.b=this.b;a.j=this.j;a.h=this.h;a.f=this.f;a.g=this.g;a.c=J(this.c);return a};function td(){this.a=[]}td.prototype.clone=function(){var a=new td;a.a=nd(this.a)||[];return a};function ud(){this.c=this.a=this.b=null}
                    ud.prototype.clone=function(){var a=new ud;a.b=this.b;a.a=this.a;a.c=this.c;return a};function vd(a,b){this.na=a;this.end=b}vd.prototype.clone=function(){return new vd(this.na,this.end)};cd.TAG_NAME="MPD";dd.TAG_NAME="Period";ed.TAG_NAME="AdaptationSet";fd.TAG_NAME="Role";gd.TAG_NAME="ContentComponent";hd.TAG_NAME="Representation";id.TAG_NAME="ContentProtection";jd.TAG_NAME="cenc:pssh";kd.TAG_NAME="BaseURL";ld.TAG_NAME="Location";md.TAG_NAME="SegmentBase";od.TAG_NAME="RepresentationIndex";
                    pd.TAG_NAME="Initialization";qd.TAG_NAME="SegmentList";rd.TAG_NAME="SegmentURL";sd.TAG_NAME="SegmentTemplate";td.TAG_NAME="SegmentTimeline";ud.TAG_NAME="S";
                    cd.prototype.parse=function(a,b){this.url=a.hb;this.id=K(b,"id",L);this.type=K(b,"type",L)||"static";this.b=K(b,"mediaPresentationDuration",wd);this.h=K(b,"minBufferTime",wd,this.h);this.g=K(b,"minimumUpdatePeriod",wd,this.g);this.c=K(b,"availabilityStartTime",xd,this.c);this.f=K(b,"timeShiftBufferDepth",wd,this.f);this.i=K(b,"suggestedPresentationDelay",wd,this.i);var c=a.u,d=M(this,b,kd);this.u=yd(c,d);if(d=O(this,b,ld))this.j=zd(c,d.url);this.a=M(this,b,dd)};
                    dd.prototype.parse=function(a,b){this.id=K(b,"id",L);this.start=K(b,"start",wd);this.a=K(b,"duration",wd);var c=M(this,b,kd);this.u=yd(a.u,c);this.c=O(this,b,md);this.f=O(this,b,qd);this.g=O(this,b,sd);this.b=M(this,b,ed);Ad(this)};function Ad(a){for(var b=[],c=0;c<a.b.length;++c){var d=a.b[c];null!=d.group&&(b[d.group]=!0)}for(c=0;c<a.b.length;++c)if(d=a.b[c],null==d.group){for(var e=1;1==b[e];)++e;b[e]=!0;d.group=e}}
                    ed.prototype.parse=function(a,b){var c=O(this,b,gd)||{},d=O(this,b,fd);this.id=K(b,"id",L);this.group=K(b,"group",P);this.lang=K(b,"lang",L,c.lang);this.contentType=K(b,"contentType",L,c.contentType);this.width=K(b,"width",Q);this.height=K(b,"height",Q);this.b=K(b,"mimeType",L);this.i=K(b,"codecs",L);this.c=d&&"main"==d.value;this.lang&&(this.lang=kb(this.lang));c=M(this,b,kd);this.u=yd(a.u,c);this.j=M(this,b,id);!this.contentType&&this.b&&(this.contentType=this.b.split("/")[0]);this.f=a.c?Bd(this,
                        b,a.c):O(this,b,md);this.g=a.f?Bd(this,b,a.f):O(this,b,qd);this.h=a.g?Bd(this,b,a.g):O(this,b,sd);this.a=M(this,b,hd);!this.b&&this.a.length&&(this.b=this.a[0].f,!this.contentType&&this.b&&(this.contentType=this.b.split("/")[0]))};fd.prototype.parse=function(a,b){this.value=K(b,"value",L)};gd.prototype.parse=function(a,b){this.id=K(b,"id",L);this.lang=K(b,"lang",L);this.contentType=K(b,"contentType",L);this.lang&&(this.lang=kb(this.lang))};
                    hd.prototype.parse=function(a,b){this.id=K(b,"id",L);this.bandwidth=K(b,"bandwidth",Q);this.width=K(b,"width",Q,a.width);this.height=K(b,"height",Q,a.height);this.f=K(b,"mimeType",L,a.b);this.h=K(b,"codecs",L,a.i);this.lang=a.lang;var c=M(this,b,kd);this.u=yd(a.u,c);this.c=M(this,b,id);this.g=a.f?Bd(this,b,a.f):O(this,b,md);this.b=a.g?Bd(this,b,a.g):O(this,b,qd);this.a=a.h?Bd(this,b,a.h):O(this,b,sd);this.c=this.c.concat(a.j)};
                    id.prototype.parse=function(a,b){this.f=b;this.c=K(b,"schemeIdUri",L);var c=K(b,"cenc:default_KID",L);c&&(this.b=c.replace(/[-]/g,""));this.a=O(this,b,jd)};jd.prototype.parse=function(a,b){var c=Cd(b);if(c){this.psshBox=jc(c);try{this.parsedPssh=new Bc(this.psshBox)}catch(d){if(!(d instanceof RangeError))throw d;}}};kd.prototype.parse=function(a,b){this.url=Cd(b)};ld.prototype.parse=function(a,b){this.url=Cd(b)};
                    md.prototype.parse=function(a,b){this.u=a.u||this.u;this.g=K(b,"timescale",Q,this.g);this.f=K(b,"presentationTimeOffset",P,this.f);this.a=K(b,"indexRange",Dd,this.a);this.b=O(this,b,od)||this.b;this.c=O(this,b,pd)||this.c};od.prototype.parse=function(a,b){var c=K(b,"sourceURL",L);this.url=zd(a.u,c);this.a=K(b,"range",Dd,J(a.a))};pd.prototype.parse=function(a,b){var c=K(b,"sourceURL",L);this.url=zd(a.u,c);this.a=K(b,"range",Dd)};
                    qd.prototype.parse=function(a,b){this.u=a.u||this.u;this.f=K(b,"timescale",Q,this.f);this.g=K(b,"presentationTimeOffset",P,this.g);this.b=K(b,"duration",Q,this.b);var c=K(b,"startNumber",Q);null!=c&&(this.i=c);this.h=O(this,b,pd)||this.h;this.a=(c=M(this,b,rd))&&0<c.length?c:this.a;this.c=O(this,b,td)||this.c};rd.prototype.parse=function(a,b){var c=K(b,"media",L);this.b=zd(a.u,c);this.a=K(b,"mediaRange",Dd)};
                    sd.prototype.parse=function(a,b){this.a=K(b,"timescale",Q,this.a);this.i=K(b,"presentationTimeOffset",P,this.i);this.b=K(b,"duration",Q,this.b);var c=K(b,"startNumber",P);null!=c&&(this.j=c);this.h=K(b,"media",L,this.h);this.f=K(b,"index",L,this.f);this.g=K(b,"initialization",L,this.g);this.c=O(this,b,td)||this.c};td.prototype.parse=function(a,b){this.a=M(this,b,ud)};ud.prototype.parse=function(a,b){this.b=K(b,"t",P);this.a=K(b,"d",P);this.c=K(b,"r",Ed)};
                    function yd(a,b){if(!b||0===b.length)return a;for(var c=[],d=0;d<b.length;d++){var e=b[d].url;null==a||0===a.length?c.push(new H(e)):(e=zd(a.slice(0,1),e),c.push(e[0]))}return c}function zd(a,b){if(!b)return a;var c=new H(b);return a?a.map(function(a){return a.resolve(c)}):[c]}function Bd(a,b,c){var d=J(c);(b=Fd(b,c.constructor.TAG_NAME))&&d.parse(a,b);return d}function O(a,b,c){var d=null;if(b=Fd(b,c.TAG_NAME))d=new c,d.parse(a,b);return d}
                    function Fd(a,b){for(var c=null,d=0;d<a.childNodes.length;d++)if(a.childNodes[d].tagName==b){if(c)return null;c=a.childNodes[d]}return c}function M(a,b,c){for(var d=[],e=0;e<b.childNodes.length;e++)if(b.childNodes[e].tagName==c.TAG_NAME){var f=new c;f.parse.call(f,a,b.childNodes[e]);d.push(f)}return d}function Cd(a){a=a.firstChild;return a.nodeType!=Node.TEXT_NODE?null:a.nodeValue}function nd(a){return a?a.map(function(a){return a.clone()}):null}function J(a){return a?a.clone():null}
                    function K(a,b,c,d){a=c(a.getAttribute(b));return null!=a?a:void 0!==d?d:null}function xd(a){if(!a)return null;a=Date.parse(a);return isNaN(a)?null:Math.floor(a/1E3)}
                    function wd(a){if(!a)return null;var b=/^P(?:([0-9]*)Y)?(?:([0-9]*)M)?(?:([0-9]*)D)?(?:T(?:([0-9]*)H)?(?:([0-9]*)M)?(?:([0-9.]*)S)?)?$/.exec(a);if(!b)return null;a=0;var c=P(b[1]);c&&(a+=31536E3*c);(c=P(b[2]))&&(a+=2592E3*c);(c=P(b[3]))&&(a+=86400*c);(c=P(b[4]))&&(a+=3600*c);(c=P(b[5]))&&(a+=60*c);b=window.parseFloat(b[6]);(b=isNaN(b)?null:b)&&(a+=b);return a}
                    function Dd(a){var b=/([0-9]+)-([0-9]+)/.exec(a);if(!b)return null;a=P(b[1]);if(null==a)return null;b=P(b[2]);return null==b?null:new vd(a,b)}function Ed(a){a=window.parseInt(a,10);return isNaN(a)?null:a}function Q(a){a=window.parseInt(a,10);return 0<a?a:null}function P(a){a=window.parseInt(a,10);return 0<=a?a:null}function L(a){return a};function Gd(a,b){this.url=a;this.b=b||new ac;this.g=this.i=this.h=0;this.a=null;this.c=new E;this.f=null}function ac(){this.body=null;this.a=1;this.h=1E3;this.c=0;this.method="GET";this.f="arraybuffer";this.b={};this.g=this.j=!1;this.i=null}var Hd=!0;function Id(a){Jd(a);a.b.body=null;a.c.destroy();a.c=null;a.f=null}function Jd(a){a.a&&(a.a.onload=null,a.a.onreadystatechange=null,a.a.onerror=null,a.a.ontimeout=null);a.a=null}k=Gd.prototype;
                    k.rb=function(){if(this.a)return this.c;if(0==this.url.lastIndexOf("data:",0)){var a=this.url.split(":")[1].split(";").pop().split(","),b=a.pop(),b="base64"==a.pop()?window.atob(b.replace(/-/g,"+").replace(/_/g,"/")):window.decodeURIComponent(b);"arraybuffer"==this.b.f&&(b=ic(b).buffer);a=JSON.parse(JSON.stringify(new XMLHttpRequest));a.response=b;a.responseText=b.toString();b=this.c;b.resolve(a);Id(this);return b}if(0==this.url.lastIndexOf("idb:",0))return Kd(this);this.h++;this.i=Date.now();this.g||
                    (this.g=this.b.h);this.a=new XMLHttpRequest;a=this.url;Hd&&0!==a.indexOf("blob:")&&(this.f&&!this.f.supportsCaching()||this.b.g)&&(a=new H(a),bd(a.a,"_",Date.now()),a=a.toString());this.a.open(this.b.method,a,!0);this.a.responseType=this.b.f;this.a.timeout=this.b.c;this.a.withCredentials=this.b.j;this.a.onload=this.xb.bind(this);this.b.g&&(this.a.onreadystatechange=this.Eb.bind(this));this.a.onerror=this.Tb.bind(this);this.a.ontimeout=this.Ib.bind(this);for(b in this.b.b)this.a.setRequestHeader(b,
                        this.b.b[b]);this.a.send(this.b.body);return this.c};function Kd(a){var b=a.url.split("/");return Ub(a.b.i,parseInt(b[2],10),parseInt(b[3],10)).then(F(a,function(a){var b=JSON.parse(JSON.stringify(new XMLHttpRequest));b.response=a;a=this.c;a.resolve(b);Id(this);return a})).catch(F(a,function(a){Id(this);return Promise.reject(a)}))}function Ld(a,b,c){b=Error(b);b.type=c;b.status=a.a.status;b.url=a.url;b.method=a.b.method;b.body=a.b.body;b.xhr=a.a;return b}
                    k.xb=function(a){this.f&&this.f.sample(Date.now()-this.i,a.loaded);200<=this.a.status&&299>=this.a.status?(this.c.resolve(this.a),Id(this)):this.h<this.b.a?Md(this):(a=Ld(this,"HTTP error.","net"),this.c.reject(a),Id(this))};k.Eb=function(){if(this.a.readyState==XMLHttpRequest.HEADERS_RECEIVED){var a=Date.parse(this.a.getResponseHeader("Date"));a&&(Sa=a-Date.now())}};k.Tb=function(){var a=Ld(this,"Network failure.","net");this.c.reject(a);Id(this)};
                    k.Ib=function(){if(this.h<this.b.a)Md(this);else{var a=Ld(this,"Request timed out.","net");this.c.reject(a);Id(this)}};function Md(a){Jd(a);window.setTimeout(a.rb.bind(a),a.g*(1+.5*(2*Math.random()-1)));a.g*=2};function G(a,b,c,d){this.b=b;this.f=c||0;this.i=null!=d?d:null;this.c=this.a=null;this.j=a;this.h=null}function Nd(a,b){return a&&0!==a.length?a.map(function(a){return a.resolve(b)}):[b]}function bc(a,b,c){if(a.a)return a.a;b=b||new ac;if(a.f||a.i)b.b.Range="bytes="+(a.f+"-"+(null!=a.i?a.i:""));a.a=Od(a,0,b,c);return a.a}
                    G.prototype.g=function(){if(this.c){this.a=null;var a=this.c;if(a.a&&a.a.readyState!=XMLHttpRequest.DONE){a.a.abort();var b=Ld(a,"Request aborted.","aborted");a.c.reject(b);Id(a)}this.h=this.c=null}};
                    function Od(a,b,c,d){var e=a.b[b].toString();a.j&&(e=a.j(e,c.b)||e);a.c=new Gd(e,c);d&&(a.c.f=d);e=a.c.rb().then(F(a,function(a){this.h=this.c=this.a=null;this.h=a.a?new H(a.a):this.b[b];return Promise.resolve(a.response)}));return e=e.catch(F(a,function(a){if(this.a&&b+1<this.b.length)return this.a=Od(this,b+1,c,d);this.a=this.c=null;return Promise.reject(a)}))}G.prototype.clone=function(){return new G(this.j,this.b.map(function(a){return a.clone()}),this.f,this.i)};G.prototype.toString=function(){return this.b[0].toString()};function Pd(a,b){this.a=new ac;this.a.f="text";this.a.a=3;this.a.c=1E3*(null!=b?b:0);this.a.g=!0;this.b=a}function Qd(a){var b=a.b;return bc(b,a.a).then(function(a){var d;d=b.b;var e=[b.h];d=(a=(new DOMParser).parseFromString(a,"text/xml"))?O({hb:d,u:e},a,cd):null;if(d)return Promise.resolve(d);d=Error("MPD parse failure.");d.type="dash";return Promise.reject(d)})};function Rd(a,b,c,d){for(var e=b.a,f=[],g=0;g<d;++g){var h=g+c,l=(h-1)*e.b,m=l/e.a,n=(l+e.b)/e.a,h=Sd(a,b,e.j+h-1,l);if(!h)return null;f.push(new Td(m,n,h))}return f}function Sd(a,b,c,d){if(!b.a)return null;var e=b.a.h;if(!e)return b.u?new G(a,b.u,0,null):null;c=Ud(e,b.id,c,b.bandwidth,d);if(!c)return null;b=Nd(b.u,c);return new G(a,b,0,null)}
                    function Ud(a,b,c,d,e){var f={RepresentationID:b,Number:c,Bandwidth:d,Time:e};a=a.replace(/\$(RepresentationID|Number|Bandwidth|Time)?(?:%0([0-9]+)d)?\$/g,function(a,b,c){if("$$"==a)return"$";var d=f[b];if(null==d)return a;"RepresentationID"==b&&c&&(c=void 0);a=d.toString();c=window.parseInt(c,10)||1;c=Math.max(0,c-a.length);return Array(c+1).join("0")+a});try{return new H(a)}catch(g){if(g instanceof URIError)return null;throw g;}}
                    function Vd(a,b,c){var d=0;b*=c;a=a.a;c=[];for(var e=0;e<a.length&&a[e].a;++e){var f=a[e].b,f=null!=f?f:d,g=a[e].c||0;0>g&&(g=a[e].a,g=e+1===a.length?Math.ceil((a[0].b+b-f)/g)-1:Math.ceil((a[e+1].b-f)/g)-1);0<c.length&&f!=d&&(c[c.length-1].end=f);for(var h=0;h<=g;++h)d=f+a[e].a,c.push({start:f,end:d}),f=d}return c};function Wd(a,b){this.a=a;this.b=b||null}Wd.prototype.destroy=function(){this.a&&(this.a.g(),this.a=null);this.b=null};Wd.prototype.create=function(){return this.a?bc(this.a):Promise.resolve(this.b)};function Td(a,b,c){this.b=a;this.a=b;this.url=c}function Xd(a,b,c){return new Td(b,c,a.url)}function cc(a,b){for(var c=a.length-1;0<=c;--c){var d=a[c];if(b>=d.b&&(null==d.a||b<d.a))return c}return-1}function Yd(a,b){return a.map(function(a){return Xd(a,a.b+b,null!=a.a?a.a+b:null)})};function Zd(){}
                    Zd.prototype.parse=function(a,b,c,d){var e=null;try{a:{var f=[],g=new Ta(a),h=w(g);if(1936286840!=w(g))e=null;else{1==h&&(h=Xa(g));var l=Wa(g);Za(g,3);Za(g,4);var m=w(g);if(0==m)e=null;else{var n,t;0==l?(n=w(g),t=w(g)):(n=Xa(g),t=Xa(g));Za(g,2);var A=g.b.getUint16(g.a,g.c);g.a+=2;a=n;b=b+h+t;for(h=0;h<A;h++){var N=w(g);t=(N&2147483648)>>>31;var l=N&2147483647,I=w(g);w(g);if(1==t){e=null;break a}var wa=new G(d,c,b,b+l-1);f.push(new Td(a/m,(a+I)/m,wa));a+=I;b+=l}e=f}}}}catch(Nb){if(!(Nb instanceof RangeError))throw Nb;
                    }return e};function R(a){this.o=a;this.i=0}R.prototype.destroy=function(){this.o=null};k=R.prototype;k.length=function(){return this.o.length};function S(a){if(0==a.o.length)throw new RangeError("SegmentIndex: There is no first SegmentReference.");return a.o[0]}k.A=function(){if(0==this.o.length)throw new RangeError("SegmentIndex: There is no last SegmentReference.");return this.o[this.o.length-1]};
                    k.get=function(a){if(0>a||a>=this.o.length)throw new RangeError("SegmentIndex: The specified index is out of range.");return this.o[a]};k.la=function(a){a=cc(this.o,a);return 0<=a?this.o[a]:null};k.Ha=function(a){$d(this,a);return!0};
                    function $d(a,b){a.i!=b.i&&(b=new R(Yd(b.o,a.i-b.i)));if(0==a.length())a.o=b.o.slice(0);else if(0!=b.length()&&null!=a.A().a&&!(null!=b.A().a&&b.A().a<a.A().a)){if(a.A().a<=S(b).b)var c=Xd(a.A(),a.A().b,S(b).b),c=a.o.slice(0,-1).concat([c]);else{var d;for(d=0;d<a.o.length&&!(a.o[d].a>=S(b).b);++d);a.o[d].b<S(b).b?(c=Xd(a.o[d],a.o[d].b,S(b).b),c=a.o.slice(0,d).concat([c])):(S(a).b>S(b).b||S(b),c=a.o.slice(0,d))}a.o=c.concat(b.o)}}
                    k.ka=function(a){var b=a-this.i;if(0==b)return 0;this.o=Yd(this.o,b);this.i=a;return b};k.Ea=function(){return 0<this.length()?{start:S(this).b,end:this.A().a}:{start:0,end:0}};function T(a,b,c,d){R.call(this,a);this.g=b;this.w=c;this.f=d;this.h=this.g.b||this.g.a.reduce(function(a,b){return null==b.a?NaN:a+b.a},0)||0;this.a=this.l=this.c=null;ae(this)}q(T,R);T.prototype.destroy=function(){this.w=this.g=null;R.prototype.destroy.call(this)};T.prototype.la=function(a){be(this,v()/1E3);return R.prototype.la.call(this,a)};T.prototype.Ha=function(a){if(!(a instanceof T))return!1;$d(this,a);this.h=Math.max(this.h,a.h);null==this.c?(this.f=a.f,ae(this)):ce(this);return!0};
                    function ae(a){ce(a);if(0!=a.length()){a.length();var b=null!=a.A().a?a.A().a:a.A().b;if(a.g.c>a.f)a.c=b;else{var c=a.f-(a.g.c+a.w.start);0>c?a.c=b:c<Math.max(a.A().b,a.A().a||0)?(a.A(),a.c=b):a.c=c}a.l=a.A().b;a.a=S(a).b}}T.prototype.ka=function(a){a=R.prototype.ka.call(this,a);Math.min.apply(null,this.o.filter(function(a){return null!=a.a}).map(function(a){return a.a-a.b}));null!=this.c&&(this.l+=a,this.a+=a,this.c+=a);return a};T.prototype.Ea=function(){return de(this,v()/1E3)};
                    function de(a,b){be(a,b);if(null==a.c||null==a.l||null==a.a)return{start:0,end:0};var c=Number.POSITIVE_INFINITY;a.h&&(c=a.h);var d=b-a.f,e=a.c+d;null!=a.g.f&&(e=e-a.a-a.g.f,0<e&&(a.a+=e));a.a=Math.min(a.a,c);d=a.l+d;if(d<a.a)return{start:a.a,end:a.a};d=0<a.length()?null!=a.A().a?Math.min(d,a.A().a):d:a.a;d=Math.max(d,a.a);d=Math.min(d,c);return{start:a.a,end:d}}
                    function be(a,b){ce(a);if(null!=a.g.f)if(null==a.c)a.length();else{for(var c=a.c+(b-a.f),d=0,e=0;e<a.o.length;++e){var f=null;e<a.o.length-1?f=a.o[e+1].a:(f=a.o[e],f=null!=f.a?f.a+(f.a-f.b):null);if(null!=f&&f<c-a.g.f)++d;else break}0<d&&a.o.splice(0,d)}}function ce(a){if(a.h){for(var b=0,c=a.o.length-1;0<=c;--c)if(a.o[c].b>a.h)++b;else break;0<b&&a.o.splice(-b)}};function oe(a,b,c,d,e){var f=1,g=0,h;if(a.c>d)h=null;else{var l=a.i||0,m=a.f||0;h=c.a;h=h.b/h.a;var n=d-(a.c+b.start);0>n?h=null:(m=n-2*h-m,0>m&&(m=0),m=Math.ceil(m/h)*h,n-=h,0>n?h=null:(l=Math.floor(n/h)*h-l,0>l&&(l=0),l=Math.floor(l/h)*h,h={Ya:m/h+1,current:(l>=m?l:m)/h+1}))}h&&(f=h.Ya,g=h.current-h.Ya+1);f=Rd(e,c,f,g);if(null==f)throw a=Error("Failed to generate SegmentReferences."),a.type="stream",a;T.call(this,f,a,b,d);this.s=c;this.v=this.b=0<this.length()?a.c+b.start+this.A().a:null;this.j=
                        h?h.current+1:null;this.B=e}q(oe,T);oe.prototype.destroy=function(){this.B=this.s=null;T.prototype.destroy.call(this)};oe.prototype.la=function(a){var b=v()/1E3;pe(this,b);be(this,b);return R.prototype.la.call(this,a)};oe.prototype.Ha=function(a){if(null!=this.b||!(a instanceof oe)||null==a.b)return!1;this.b=a.b;this.v=a.v;this.j=a.j;this.f=a.f;this.h=a.h;$d(this,a);pe(this,v()/1E3);ae(this);return!0};oe.prototype.ka=function(a){a=T.prototype.ka.call(this,a);null!=this.b&&(this.b+=a,this.v+=a);return a};
                    oe.prototype.Ea=function(){var a=v()/1E3;pe(this,a);return de(this,a)};function pe(a,b){if(null!=a.b&&null!=a.v&&null!=a.j){var c=a.s.a,c=c.b/c.a,d=Math.floor((a.v+(b-a.f)-a.b)/c);if(0!=d){var e=Rd(a.B,a.s,a.j,d);Array.prototype.push.apply(a.o,Yd(e,a.i));a.b+=d*c;a.j+=d}}};function qe(a,b,c,d,e){this.f=a;this.b=b;this.c=c;this.h=d;this.a=null;this.g=e}qe.prototype.destroy=function(){this.g=this.c=this.b=this.f=null;this.a&&(this.a.destroy(),this.a=null)};
                    qe.prototype.create=function(){if(this.a)return Promise.resolve(this.a);if("dynamic"==this.f.type)try{this.a=new oe(this.f,this.b,this.c,this.h,this.g)}catch(a){return Promise.reject(a)}else{var b;b=this.c.a;if(b=Rd(this.g,this.c,1,Math.ceil(this.b.a/(b.b/b.a)))){if(0<b.length){var c=b[b.length-1];b[b.length-1]=Xd(c,c.b,this.b.a)}b=new R(b)}else b=null;this.a=b;if(!this.a)return b=Error("Failed to generate SegmentReferences"),b.type="stream",Promise.reject(b)}return Promise.resolve(this.a)};function re(a,b,c,d,e){this.c=a;this.b=b;this.g=c;this.a=null;this.h=d;this.f=e}re.prototype.destroy=function(){this.f=this.g=this.b=this.c=null;this.a&&(this.a.destroy(),this.a=null)};
                    re.prototype.create=function(){if(this.a)return Promise.resolve(this.a);var a=this.g.b,b=[];a.c&&(b=Vd(a.c,a.f||1,this.b.a||0));var c=0;a.b&&a.i?c=(a.i-1)*a.b:0<b.length&&(c=b[0].start-(a.g||0));var d=a.a.length;0<b.length&&b.length!=a.a.length&&(d=Math.min(b.length,a.a.length));for(var e=[],f=0;f<d;++f){var g=a.a[f],h=c/a.f,l=null,m=null;a.b?(l=c+a.b,m=l/a.f):0<b.length?(l=b[f].end-(a.g||0),m=l/a.f):(m=h+this.b.a,l=m*a.f);var c=l,l=0,n=null;g.a&&(l=g.a.na,n=g.a.end);e.push(new Td(h,m,new G(this.f,
                        g.b,l,n)))}"dynamic"==this.c.type?this.a=new T(e,this.c,this.b,this.h):this.a=new R(e);return Promise.resolve(this.a)};function se(a,b,c,d,e){this.b=a;this.c=b;this.f=c;this.h=d;this.a=null;this.g=e}se.prototype.destroy=function(){this.g=this.f=this.c=this.b=null;this.a&&(this.a.destroy(),this.a=null)};
                    se.prototype.create=function(){if(this.a)return Promise.resolve(this.a);for(var a=this.f.a,b=Vd(a.c,a.a||1,this.c.a||0),c=[],d=0;d<b.length;++d){var e=b[d].start,f=e/a.a,g=b[d].end/a.a,e=Sd(this.g,this.f,d+a.j,e);if(!e)return a=Error("Failed to generate media URL."),a.type="dash",Promise.reject(a);var h=(a.i||0)/a.a;c.push(new Td(f-h,g-h,e))}"dynamic"==this.b.type?this.a=new T(c,this.b,this.c,this.h):this.a=new R(c);return Promise.resolve(this.a)};function te(a){this.b=a;this.a=null}te.prototype.destroy=function(){this.b=null;this.a&&(this.a.destroy(),this.a=null)};te.prototype.create=function(){if(this.a)return Promise.resolve(this.a);for(var a=[],b=0;b<this.b.length;++b){var c=this.b[b];a.push(new Td(c.start_time,c.end_time,new G(null,[new H(c.url)],c.start_byte,null)))}this.b=null;this.a=new R(a);return Promise.resolve(this.a)};function ue(){this.C=ve++;this.id=this.H=this.I=null;this.c=0;this.height=this.width=this.bandwidth=null;this.b=this.a="";this.f=[];this.N=!1;this.J=!0}var ve=0;ue.prototype.destroy=function(){this.I&&(this.I.destroy(),this.I=null);this.H&&(this.H.destroy(),this.H=null)};function we(a){var b=a.a||"";a.b&&(b+='; codecs="'+a.b+'"');return b}function xe(){this.C=ye++;this.id=null;this.contentType=this.lang="";this.b=!1;this.m=[];this.a=[]}var ye=0;
                    xe.prototype.destroy=function(){for(var a=0;a<this.m.length;++a)this.m[a].destroy();this.a=this.m=null};function ze(a){for(var b=[],c=0;c<a.a.length;++c){var d=new Ae;d.id=a.C;d.a=a.a[c];d.contentType=a.contentType;d.b=a.m.length?we(a.m[0]):"";b.push(d)}return b}function Be(){this.id=null;this.start=0;this.b=null;this.a=[]}Be.prototype.destroy=function(){for(var a=0;a<this.a.length;++a)this.a[a].destroy();this.a=null};function Ce(){this.b=!1;this.h=this.g=this.f=null;this.c=0;this.a=[]}
                    Ce.prototype.destroy=function(){for(var a=0;a<this.a.length;++a)this.a[a].destroy();this.a=null};function Ae(){this.id=0;this.a=null;this.b=this.contentType=""};function De(a,b,c,d,e){D.call(this,a);this.c=b;this.a=new Vb(c,d,e);this.w=this.G=this.b=null;this.K=!1;this.g=null;this.l=!1;this.i=null;this.s=!1;this.h=new E;this.j=this.f=!1;this.B=0;this.L=15;this.D=!1}q(De,D);De.prototype.F=function(a){null!=a.initialStreamBufferSize&&(this.B=Number(a.initialStreamBufferSize));null!=a.streamBufferSize&&(this.L=Number(a.streamBufferSize));null!=a.segmentRequestTimeout&&(this.a.s=Number(a.segmentRequestTimeout))};
                    De.prototype.destroy=function(){Ee(this);this.h.destroy();this.b=this.h=null;this.a.destroy();this.v=this.c=this.a=null};k=De.prototype;k.oa=function(){return this.b};k.bb=function(){return this.G};k.sb=function(a){this.f||a.then(function(){this.f=!0;this.g||Fe(this,0)}.bind(this)).catch(function(){});return this.h};k.Ga=function(){return this.j};
                    k.ra=function(a,b,c){if(a!=this.b){var d=[a.I.create(),a.H.create()];Promise.all(d).then(F(this,function(d){if(this.c){var f=this.b;this.b=a;this.G=d[0];this.w=d[1];this.K=!0;this.l||(f?b&&Ge(this,!0,c):Fe(this,0))}})).catch(F(this,function(a){"aborted"!=a.type&&(this.f?(a=y(a),this.dispatchEvent(a)):this.h.reject(a))}))}};k.jb=function(){return Ge(this,!1)};
                    function Ge(a,b,c){a.b&&!a.l&&(a.l=!0,Ee(a),Xb(a.a).then(F(a,function(){var a=this.c.currentTime;if(!b&&0<Yb(this.a,a)&&0<=cc(this.a.b,a))return Promise.resolve();if(c)return fc(this.a,this.c.currentTime+c);this.D=!0;return ec(this.a)})).then(F(a,function(){this.l=!1;Fe(this,0)})).catch(F(a,function(a){this.l=!1;this.f?(a=y(a),this.dispatchEvent(a)):this.h.reject(a)})))}k.kb=function(a){return 0<Yb(this.a,a)&&0<=cc(this.a.b,a)};k.va=function(){};k.Da=function(){return!0};
                    k.Kb=function(){if(this.s&&!this.f)this.g=null;else{var a;if(a=this.f&&!this.j)a=1<this.a.c.buffered.length?!0:!1;if(a)Ge(this,!0);else{this.g=null;a=this.b;var b=this.G,c=this.c.currentTime;Yb(this.a,this.s?c:c+(this.i||0))>=(this.s?Math.max(this.B,this.L):this.B)?(He(this),Fe(this,1E3/(Math.abs(this.c.playbackRate)||1))):(b=Ie(this,c,b))?(b=Zb(this.a,b,a.c,this.w),this.w=null,this.K&&(this.K=!1,Je(this,a)),this.j=!1,b.then(F(this,function(a){null==this.i&&(this.i=a);this.D&&0<Yb(this.a,c)&&(this.D=
                        !1,this.c.currentTime+=.001);Fe(this,0)})).catch(F(this,function(a){if("aborted"!=a.type){var b=[0,404,410];"net"==a.type&&-1!=b.indexOf(a.xhr.status)&&this.b&&Fe(this,5E3);a=y(a);this.dispatchEvent(a)}}))):(He(this),this.f&&!this.j&&(this.j=!0,Ke(this)),Fe(this,1E3))}}};function Ie(a,b,c){a=a.a;var d=a.b.length;a=0<d?a.b[d-1]:null;return null!=a?null!=a.a?c.la(a.a):null:c.la(b)||(c.length()?c.A():null)}
                    function He(a){if(!a.s&&null!=a.i){a.s=!0;var b=a.a,c=a.i,d=c-b.w;0!=d&&(b.b=Yd(b.b,d),b.w=c);a.h.resolve(a.i)}}function Je(a,b){var c;c=b.a.split("/")[0];c=x({type:"adaptation",bubbles:!0,contentType:c,size:"video"!=c?null:{width:b.width,height:b.height},bandwidth:b.bandwidth});a.dispatchEvent(c)}function Ke(a){var b=x({type:"ended"});a.dispatchEvent(b)}function Fe(a,b){a.g=window.setTimeout(a.Kb.bind(a),b)}function Ee(a){null!=a.g&&(window.clearTimeout(a.g),a.g=null)};function Le(a){this.b=a;this.a=null}Le.prototype.destroy=function(){this.a&&(this.a.destroy(),this.a=null)};Le.prototype.create=function(){if(this.a)return Promise.resolve(this.a);var a=new Td(0,null,this.b);this.a=new R([a]);return Promise.resolve(this.a)};function Me(a,b){D.call(this,a);this.b=b;this.g=!0;this.h=this.f=null;this.c=new E;this.a=null}q(Me,D);Me.prototype.F=function(){};Me.prototype.destroy=function(){this.a&&this.b.removeChild(this.a);this.c.destroy();this.v=this.b=this.f=this.h=this.a=this.c=null};k=Me.prototype;k.oa=function(){return this.f};k.bb=function(){return this.h};k.sb=function(){return this.c};k.Ga=function(){return!0};
                    k.ra=function(a){a.I.create().then(F(this,function(b){if(this.b){if(0==b.length())return Promise.reject(Error("No subtitles URL available."));var c=this.f;this.f=a;this.h=b;b=S(b).url.b[0].toString();var d=this.Da();this.a&&(this.va(!1),this.b.removeChild(this.a));this.a=document.createElement("track");this.b.appendChild(this.a);this.a.src=b;this.va(d);b=x({type:"adaptation",bubbles:!0,contentType:"text",size:null,bandwidth:a.bandwidth});this.dispatchEvent(b);c||this.c.resolve(0)}}))};k.jb=function(){};
                    k.kb=function(){return!0};k.va=function(a){this.g=a;this.a&&(this.a.track.mode=a?"showing":"disabled")};k.Da=function(){this.a&&(this.g="showing"==this.a.track.mode);return this.g};function Ne(){}
                    Ne.prototype.parse=function(a,b,c,d){var e=null;try{var f;var g=new $a(b);if(440786851!=bb(g).id)f=null;else{var h=bb(g);if(408125543!=h.id)f=null;else{var l=h.a.byteOffset,m;var n=new $a(h.a);for(b=null;Va(n.a);){var t=bb(n);if(357149030==t.id){b=t;break}}if(b){for(var A=new $a(b.a),n=1E6;Va(A.a);){var N=bb(A);if(2807729==N.id){n=fb(N);break}}m=n/1E9}else m=null;f=m?{Qb:l,Ub:m}:null}}if(f){var I=bb(new $a(a));if(475249515!=I.id)e=null;else{var wa=f.Qb,Nb=f.Ub;a=[];var ee=new $a(I.a);for(f=I=-1;Va(ee.a);){var fe=
                        bb(ee);if(187==fe.id){var Ia;var ge=new $a(fe.a),he=bb(ge);if(179!=he.id)Ia=null;else{var Cf=fb(he),ie=bb(ge);if(183!=ie.id)Ia=null;else{for(var je=new $a(ie.a),l=0;Va(je.a);){var ke=bb(je);if(241==ke.id){l=fb(ke);break}}Ia={Wb:Cf,Pb:l}}}if(Ia){var le=Nb*Ia.Wb,me=wa+Ia.Pb;if(0<=I){var Uc=new G(d,c,f,me-1);a.push(new Td(I,le,Uc))}I=le;f=me}}}0<=I&&(Uc=new G(d,c,f,null),a.push(new Td(I,null,Uc)));e=a}}else e=null}catch(ne){if(!(ne instanceof RangeError))throw ne;}return e};function Oe(a,b,c,d,e,f,g){this.g=a;this.i=b;this.f=c;this.a=d;this.c=e;this.j=f;this.b=null;this.h=g}Oe.prototype.destroy=function(){this.h=this.i=this.g=null;this.a.g();this.a=null;this.c&&(this.c.g(),this.c=null);this.b=null};
                    Oe.prototype.create=function(){if(this.b)return this.b;var a=[bc(this.a)];"webm"==this.f&&a.push(bc(this.c));return this.b=Promise.all(a).then(F(this,function(a){var c=a[0];a=a[1]||null;var d=null;"mp4"==this.f?(d=new Zd,d=d.parse(new DataView(c),this.a.f,this.a.b,this.h)):"webm"==this.f&&(d=new Ne,d=d.parse(new DataView(c),new DataView(a),this.a.b,this.h));if(!d)return c=Error("Failed to parse SegmentReferences from "+this.a.toString()+" (or one of its fallbacks)."),c.type="stream",Promise.reject(c);
                        var e;"dynamic"==this.g.type?e=new T(d,this.g,this.i,this.j):e=new R(d);return Promise.resolve(e)}))};function Pe(a){this.a=a}
                    function Qe(a,b,c){for(var d=v()/1E3,e=0;e<b.a.length;++e)for(var f=b.a[e],g=0;g<f.b.length;++g){var h=f.b[g];if("text"!=h.contentType)for(var l=0;l<h.a.length;++l){var m=h.a[l],n=0,n=n+(m.g?1:0),n=n+(m.b?1:0),n=n+(m.a?1:0);0==n?(h.a.splice(l,1),--l):1!=n&&(m.g?(m.b=null,m.a=null):m.b&&(m.a=null))}}Re(b);for(e=0;e<b.a.length;++e)for(f=b.a[e],g=0;g<f.b.length;++g){l=h=f.b[g];m=null;for(n=0;n<l.a.length;++n){var t=l.a[n].f||"";m?t!=m&&(l.a.splice(n,1),--n):m=t}0==h.a.length&&(f.b.splice(g,1),--g)}"dynamic"==
                    b.type&&null==b.c&&(b.c=d);e=new Ce;"dynamic"==b.type&&(e.b=!0,e.f=b.g,e.g=new G(c,b.j||b.url),e.h=b.c);e.c=b.h||5;for(f=0;f<b.a.length;++f){g=b.a[f];if(null==g.start)break;g=Se(a,b,g,d,c);e.a.push(g)}return e}
                    function Re(a){if(a.a.length){null==a.a[0].start&&(a.a[0].start=0);var b=function(a){return 0==a||!!a};"dynamic"==a.type&&(a.b=null);b(a.b)&&1==a.a.length&&!b(a.a[0].a)&&(a.a[0].a=a.b);for(var c=0,d=!0,e=0;e<a.a.length;++e){var f=a.a[e-1],g=a.a[e],h=a.a[e+1]||{start:a.b};!b(g.start)&&f&&b(f.start)&&b(f.a)&&(g.start=f.start+f.a);!b(g.a)&&b(h.start)&&(g.a=h.start-g.start);null!=g.start&&null!=g.a?c+=g.a:d=!1}b(a.b)||(e=a.a[a.a.length-1],d?a.b=c:b(e.start)&&b(e.a)?a.b=e.start+e.a:"dynamic"!=a.type&&
                    (a.b=c))}}function Se(a,b,c,d,e){var f=new Be;f.id=c.id;f.start=c.start;f.b=c.a;var g=new z;c.b.forEach(function(a){g.push(a.contentType||"",a)});for(var h=wb(g),l=0;l<h.length;++l){var m=new z;g.get(h[l]).forEach(function(a){m.push(a.group,a)});for(var n=wb(m),t=0;t<n.length;++t){var A=new z;m.get(n[t]).forEach(function(a){A.push(a.lang,a)});for(var N=wb(A),I=0;I<N.length;++I){var wa=A.get(N[I]),wa=Te(a,b,c,wa,d,e);f.a.push(wa)}}}return f}
                    function Te(a,b,c,d,e,f){ba(d.every(function(a){return a.group==d[0].group&&(a.lang||"")==(d[0].lang||"")&&(a.contentType||"")==(d[0].contentType||"")}));var g=new xe,h=d.filter(function(a){return null!=a.id});h.length==d.length&&(g.id=h.map(function(a){return a.id}).sort().reduce(function(a,b){return a+","+b}));g.lang=d[0].lang||"";g.contentType=d[0].contentType||"";g.b=d.some(function(a){return a.c});for(var h={},l=0;l<d.length;++l)for(var m=d[l],n=0;n<m.a.length;++n){var t=m.a[n],A=Ue(a,t),N=g.a.slice(0);
                        Ve(A,N);0==N.length&&0<g.a.length||!(t=We(b,c,t,e,f))||(g.m.push(t),g.a=N,h[t.C]=m)}if(g.a.some(function(a){return""==a.a}))return g.m.forEach(function(a){a.N=!0}),g;a=Xe(d);for(l=0;l<g.m.length;++l)t=g.m[l],m=h[t.C],m==a&&(t.N=!0);return g}function Xe(a){for(var b=null,c=null,d=0;d<a.length;++d)for(var e=a[d],f=0;f<e.a.length;++f){var g=e.a[f],g=(g.width||1)*(g.height||1)*(g.bandwidth||1);if(null==b||g<b)b=g,c=e}return c}
                    function Ve(a,b){if(0==b.length)Array.prototype.push.apply(b,a);else for(var c=0;c<b.length;++c){for(var d=!1,e=0;e<a.length;++e){var f=b[c],g=a[e];if(f.a==g.a&&f.h==g.h&&f.i==g.i&&f.g==g.g&&f.v==g.v&&f.f==g.f&&f.j==g.j&&db(f.c,g.c)){d=!0;oc(b[c],a[e].b);break}}d||(b.splice(c,1),--c)}}function Ue(a,b){var c=[];if(0==b.c.length)c.push(new lc);else if(a.a)for(var d=0;d<b.c.length;++d)c.push.apply(c,Ye(a,b.c[d]));return c}
                    function Ye(a,b){var c=[];if(2!=a.a.length)return[];var d=a.a(b.c||"",b.f);if(!(d&&d instanceof Array))return[];for(var e=0;e<d.length;++e){var f=mc(d[e]);0==f.b.length&&b.a&&b.a.psshBox&&oc(f,[{initData:b.a.psshBox,initDataType:"cenc"}]);c.push(f)}return c}
                    function We(a,b,c,d,e){if(!c.u||0===c.u.length)return null;var f=null,g=1,h=0;if(c.g)f=c.f.split("/")[1],"mp4"!=f&&"webm"!=f?f=null:(g=c.g,"webm"!=f||g.c?g.a||g.b&&g.b.a?(h=g.b,h||(h=new od,h.url=c.u,h.a=g.a?g.a.clone():null),h=Ze(h,e),g=g.c?Ze(g.c,e):null,a=new Oe(a,b,f,h,g,d,e),b=new Wd(g),d=new ue,d.I=a,d.H=b,f=d):f=null:f=null),g=c.g.g,h=c.g.f;else if(c.b)f=c.b,!f.b&&!f.c&&1<f.a.length?f=null:f.b||b.a||f.c||1!=f.a.length?f.c&&0===f.c.a.length?f=null:(f=f.h?Ze(f.h,e):null,a=new re(a,b,c,d,e),b=
                        new Wd(f),d=new ue,d.I=a,d.H=b,f=d):f=null,g=c.b.f,h=c.b.g;else if(c.a){a:if(f=c.a,g=0+(f.f?1:0),g+=f.c?1:0,g+=f.b?1:0,0==g?g=!1:(1!=g&&(f.f?(f.c=null,f.b=null):f.c&&(f.b=null)),g=!0),g){g=null;if(f.g&&(g=(f=c.a.g)?$e(c,f,pd):null,!g)){f=null;break a}f=g?Ze(g,e):null;g=c.a;g.f?(g=c.f.split("/")[1],"mp4"!=g&&"webm"!=g?a=null:"webm"!=g||f?Sd(e,c,1,0)?(h=(h=c.a.f)?$e(c,h,od):null)?(h=Ze(h,e),a=new Oe(a,b,g,h,f,d,e)):a=null:a=null:a=null):a=g.h?g.c?new se(a,b,c,d,e):g.b?"dynamic"!=a.type&&null==b.a?null:
                        new qe(a,b,c,d,e):null:null;a?(b=new Wd(f),d=new ue,d.I=a,d.H=b,f=d):f=null}else f=null;g=c.a.a;h=c.a.i}else"text"==c.f.split("/")[0]&&(f=new ue,f.I=new Le(new G(e,c.u)));if(!f)return null;f.id=c.id;h&&(f.c=-1*h/g);f.bandwidth=c.bandwidth;f.width=c.width;f.height=c.height;f.a=c.f||"";f.b=c.h||"";for(a=0;a<c.c.length;++a)b=c.c[a],b.b&&f.f.push(b.b);return f}function $e(a,b,c){b=Ud(b,a.id,null,a.bandwidth,null);if(!b)return null;c=new c;c.url=Nd(a.u,b);return c}
                    function Ze(a,b){var c=a.url,d=0,e=null;a.a&&(d=a.a.na,e=a.a.end);return new G(b,c,d,e)};function af(){this.streamStats=null;this.droppedFrames=this.decodedFrames=NaN;this.bufferingTime=this.playTime=this.estimatedBandwidth=0;this.playbackLatency=NaN;this.bufferingHistory=[];this.bandwidthHistory=[];this.streamHistory=[]}function bf(a,b){var c=new cf(b);a.streamHistory.push(new df(c));if(c.videoHeight||!a.streamStats)a.streamStats=c}function cf(a){this.videoWidth=a.width;this.videoHeight=a.height;this.videoMimeType=a.a;this.videoBandwidth=a.bandwidth}
                    function df(a){this.timestamp=v()/1E3;this.value=a};function ef(a,b){Gb.call(this,"readwrite",b);this.j=a;this.b=0}q(ef,Gb);
                    function ff(a,b,c,d,e){for(var f=[],g=[],h=0,l=0,m=[],n=b.map(function(a){return a.I.create()}),n=Promise.all(n),t=b.map(function(a){return a.H.create()}),t=Promise.all(t),n=Promise.all([n,t]).then(function(a){f=a[0];g=a[1];h=f.reduce(function(a,b){return a+b.length()},0)}),t=0;t<b.length;++t)n=n.then(function(a){return gf(this,b[a],f[a],g[a],h,l)}.bind(a,t)),n=n.then(function(a,b){l+=f[a].length();m.push(b)}.bind(a,t));return n.then(F(a,function(){return hf(Ob(this))})).then(F(a,function(a){var b=
                        new E;c=Ra(c);var f={group_id:a,stream_ids:m,session_ids:c,duration:d,key_system:e.a,license_server:e.h,with_credentials:e.i,distinctive_identifier:e.g,audio_robustness:e.f,video_robustness:e.j},g=Ob(this).put(f);g.onsuccess=function(){b.resolve(a)};g.onerror=function(){b.reject(g.error)};return b}))}function jf(a,b){return Pb(Ob(a),b).then(F(a,function(a){var d=[],e;for(e in a.stream_ids)d.push(kf(this,a.stream_ids[e]));a=Ob(this);d.push(a.delete(b));return Promise.all(d)}))}
                    function gf(a,b,c,d,e,f){var g=[hf(Mb(a)),hf(Kb(a).index("stream"))],g=Promise.all(g).then(F(a,function(a){return{qa:Math.max(a[0],a[1]),ja:new ArrayBuffer(0),Ja:0,o:[],Ca:null,Vb:e,ib:f}})),g=g.then(a.f.bind(a,c));return g=g.then(a.g.bind(a,b,d))}function hf(a){var b=new E,c=a.openCursor(null,"prev");c.onsuccess=function(a){a.target.result?b.resolve(a.target.result.key+1):b.resolve(0)};c.onerror=function(){b.reject(c.error)};return b}
                    ef.prototype.g=function(a,b,c){var d=new E;a={stream_id:c.qa,mime_type:a.a,codecs:a.b,init_segment:b,references:c.o};var e=Mb(this).put(a);e.onsuccess=function(){d.resolve(c.qa)};e.onerror=function(){d.reject(e.error)};return d};ef.prototype.f=function(a,b){for(var c=Promise.resolve(),d=0;d<a.length();++d)var e=a.get(d),f=d==a.length()-1,f=this.c.bind(this,e,b,f),c=c.then(this.i.bind(this,e)),c=c.then(f);return c.then(function(){return Promise.resolve(b)}).catch(F(this,function(a){kf(this,b.qa);return Promise.reject(a)}))};
                    ef.prototype.c=function(a,b,c,d){var e=new E;0==b.ja.byteLength&&(b.Ca=a);b.ja=lf(b.ja,d);b.ib++;var f=x({type:"progress",detail:b.ib/b.Vb*100,bubbles:!0});if(1048576<=b.ja.byteLength||c){c={stream_id:b.qa,segment_id:b.Ja,content:b.ja};var g=Kb(this).put(c);b.o.push({start_time:b.Ca.b,start_byte:b.Ca.url.f,end_time:a.a,url:"idb://"+b.qa+"/"+b.Ja});b.Ja++;b.ja=new ArrayBuffer(0);g.onerror=function(){e.reject(g.error)};g.onsuccess=F(this,function(){this.dispatchEvent(f);e.resolve()})}else this.dispatchEvent(f),
                        e.resolve();return e};function lf(a,b){var c=new Uint8Array(a.byteLength+b.byteLength);c.set(new Uint8Array(a),0);c.set(new Uint8Array(b),a.byteLength);return c.buffer}ef.prototype.i=function(a){var b=new ac;b.c=1E3*this.b;return bc(a.url,b,this.j)};
                    function kf(a,b){var c=new E,d=Mb(a).delete(b);d.onerror=function(){c.reject(d.error)};var e=Kb(a);e.index("stream").openKeyCursor(IDBKeyRange.only(b)).onsuccess=function(a){if(a=a.target.result)e.delete(a.primaryKey),a.continue()};e.transaction.oncomplete=function(){c.resolve()};return c};function mf(a,b,c,d,e,f){this.b=new G(null,[new H(a)]);this.a=new ac;this.a.body=b;this.a.method=c;this.a.a=3;this.a.j=d;this.a.c=1E3*(null!=f?f:0);a=e||{};for(var g in a)this.a.b[g]=a[g]}function nf(a){return bc(a.b,a.a).then(function(a){return Promise.resolve(new Uint8Array(a))})};function U(a,b,c){D.call(this,a);this.h=b;this.b=c;this.a=this.i=null;this.l=new B;this.c=[];this.f=[];this.s=0;this.g=new E;this.j=null;this.w=0}q(U,D);U.prototype.destroy=function(){this.v=null;for(var a=0;a<this.f.length;++a)this.f[a].close().catch(function(){});this.f=[];this.c=this.a=this.i=null;this.g.destroy();this.g=null;this.l.destroy();this.l=null;this.j&&(window.clearTimeout(this.j),this.j=null);this.h=this.b=null};
                    U.prototype.initialize=function(){for(var a=new z,b=this.b.ab(),c=0;c<b.length;++c){var d=b[c];d.a.a||d.b&&!of(d.b)||a.push(d.contentType,d)}for(var c={},d=!1,e=0;e<b.length;++e){var f=b[e];if(f.a.a&&!a.a.hasOwnProperty(f.contentType)){var g=f.a.a,h=c[g];h||(h=f.a,h={audioCapabilities:void 0,videoCapabilities:void 0,initDataTypes:void 0,distinctiveIdentifier:h.g?"required":"optional",persistentState:h.v||this.b.ha()?"required":"optional",sessionTypes:[this.b.ha()?"persistent-license":"temporary"]},
                        c[g]=h);if(f.b&&(g=f.contentType+"Capabilities",g in h)){d=!0;h[g]||(h[g]=[]);var l;"audio"==f.contentType?l=f.a.f:"video"==f.contentType&&(l=f.a.j);h[g].push({contentType:f.b,robustness:l})}}}if(!d)if(b.length)this.a=b[0].a;else throw a=Error("No DrmInfo exists!"),a.type="drm",a;if(0==Object.keys(c).length)return this.b.Ka(a),this.g.resolve(),Promise.resolve();l=new E;c=pf(this,c,l);c=c.then(this.D.bind(this,b,a));l.reject(null);return c};
                    function qf(a,b){null==a.j&&(a.j=window.setTimeout(function(){var a=Error("Timeout waiting for sessions.");a.type="storage";this.g.reject(a)}.bind(a),b));return a.g}function rf(a){return Promise.all(a.f.map(function(a){return a.remove()}))}
                    function pf(a,b,c){for(var d in b)c=c.catch(function(a,b){return navigator.requestMediaKeySystemAccess(a,[b])}.bind(null,d,b[d]));a.b.ha()&&(c=c.catch(function(){throw Error("Either none of the requested key systems are supported or none of the requested key systems support persistent state.");}));return c}
                    U.prototype.D=function(a,b,c){if(!this.h)return sf();for(var d=c.keySystem,e=c.getConfiguration(),f=["audio","video"],g=0;g<f.length;++g){var h=f[g];if(!b.a.hasOwnProperty(h)){var l=e[h+"Capabilities"];if(l){for(var l=l[0],m=[],n={},t=0;t<a.length;++t){var A=a[t],N=l?A.b==l.contentType:A.contentType==h;A.a.a!=d||!N||A.id in n||(m.push(A),n[A.id]=!0,this.a=this.a?nc(this.a,A.a):A.a)}b.set(h,m)}}}this.b.Ka(b);return c.createMediaKeys().then(function(a){this.i=a}.bind(this))};
                    function tf(a){return a.h?a.i?a.h.setMediaKeys(a.i).then(F(a,function(){return this.h?this.a.c?this.i.setServerCertificate(this.a.c):Promise.resolve():sf()})).then(F(a,function(){if(!this.h)return sf();if(0<this.b.ua().length)uf(this);else{for(var a=0;a<this.a.b.length;++a){var c=this.a.b[a];this.B({type:"encrypted",initDataType:c.initDataType,initData:c.initData})}0==this.a.b.length&&C(this.l,this.h,"encrypted",this.B.bind(this))}})):Promise.resolve():sf()}
                    function sf(){var a=Error("EmeManager destroyed");a.type="destroy";return Promise.reject(a)}
                    U.prototype.B=function(a){for(var b=new Uint8Array(a.initData),c=0;c<this.c.length;++c)if(db(b,this.c[c].data))return;try{var d=vf(this)}catch(e){b=y(e);this.dispatchEvent(b);this.g.reject(e);return}a=d.generateRequest(a.initDataType,a.initData);this.c.push({data:b,La:d});a.catch(F(this,function(a){if(this.h){for(var b=0;b<this.c.length;++b)if(this.c[b].La==d){this.c.splice(b,1);break}b=y(a);this.dispatchEvent(b);this.g.reject(a)}}));this.f.push(d)};
                    function uf(a){for(var b=a.b.ua(),c=0;c<b.length;++c){var d=vf(a),e=d.load(b[c]);a.f.push(d);e.then(F(a,function(){this.s++;this.s>=this.f.length&&this.g.resolve()})).catch(F(a,function(a){a=y(a);this.dispatchEvent(a)}))}}
                    function vf(a){var b=null;if(a.b.ha())try{b=a.i.createSession("persistent-license")}catch(c){throw Error("Persistent licenses are not supported by this key system or platform.");}else b=a.i.createSession();C(a.l,b,"message",a.G.bind(a));C(a.l,b,"keystatuseschange",a.F.bind(a));return b}U.prototype.G=function(a){wf(this,a.target,this.a,a.message)};
                    U.prototype.F=function(a){a=a.target;var b={};a.keyStatuses.forEach(function(a,c){if("string"==typeof a){var f=a;a=c;c=f}if("com.microsoft.playready"==this.a.a&&16==a.byteLength){var f=new DataView(a),g=f.getUint32(0,!0),h=f.getUint16(4,!0),l=f.getUint16(6,!0);f.setUint32(0,g,!1);f.setUint16(4,h,!1);f.setUint16(6,l,!1)}f=kc(new Uint8Array(a));b[f]=c}.bind(this));if(a.expiration<Date.now()){for(var c=0;c<this.c.length;++c)if(this.c[c].La==a){this.c.splice(c,1);break}a.close();this.f.splice(this.f.indexOf(a),
                        1)}this.b.cb(b)};function wf(a,b,c,d){d=xf(c,d);nf(new mf(d.url,d.body,d.method,c.i,d.headers,a.w)).then(F(a,function(a){c.l&&(a=c.l(a));return b.update(a)})).then(F(a,function(){var a=x({type:"sessionReady",detail:b});this.dispatchEvent(a);this.s++;this.s>=this.f.length&&this.g.resolve()})).catch(F(a,function(a){a.La=b;a=y(a);this.dispatchEvent(a)}))}
                    function xf(a,b){var c={url:a.h,body:b.slice(0),method:"POST",headers:{}};if("com.microsoft.playready"===a.a){for(var d=String.fromCharCode.apply(null,new Uint16Array(c.body)),d=(new DOMParser).parseFromString(d,"application/xml"),e=d.getElementsByTagName("name"),f=d.getElementsByTagName("value"),g=0;g<e.length;g++)c.headers[e[g].childNodes[0].nodeValue]=f[g].childNodes[0].nodeValue;c.body=window.atob(d.getElementsByTagName("Challenge")[0].childNodes[0].nodeValue)}if(!a.s)return c;a.s(c);c.url=sb(c,
                        "url");if(null==c.url)throw Error("'url' cannot be null.");if(!(c.body instanceof ArrayBuffer||"string"==typeof c.body||null==c.body))throw new TypeError("'body' must be an ArrayBuffer, a string, or null.");c.method=sb(c,"method");if("GET"!=c.method&&"POST"!=c.method)throw Error("'method' must be either 'GET' or 'POST'.");c.headers=tb(c,"headers",Object);if(null==c.headers)throw Error("'headers' cannot be null.");return c};function V(a){D.call(this,null);this.a=a;this.b=null;this.f=new B;this.j=this.i=null;this.D=0;this.w=null;this.h=!1;this.g=new af;this.c={enableAdaptation:!0,streamBufferSize:15,liveStreamEndTimeout:15,licenseRequestTimeout:0,mpdRequestTimeout:0,segmentRequestTimeout:0,preferredLanguage:"en",restrictions:new ja};this.l=1;this.F=null}q(V,D);p("shaka.player.Player",V);V.version="1.6.5-npm-dirty";
                    V.isBrowserSupported=function(){return!!window.MediaSource&&!!window.MediaKeys&&!!window.navigator&&!!window.navigator.requestMediaKeySystemAccess&&!!window.MediaKeySystemAccess&&!!window.MediaKeySystemAccess.prototype.getConfiguration&&!!window.Promise&&!!Element.prototype.requestFullscreen&&!!document.exitFullscreen&&"fullscreenElement"in document&&!!window.Uint8Array};function of(a){return"text/vtt"==a?!!window.VTTCue:MediaSource.isTypeSupported(a)}V.isTypeSupported=of;
                    V.setTextStyle=function(a){var b=document.getElementById("ShakaPlayerTextStyle");b||(b=document.createElement("style"),b.id="ShakaPlayerTextStyle",document.head.appendChild(b));for(b=b.sheet;b.cssRules.length;)b.deleteRule(0);b.insertRule("::cue { "+oa(a)+" }",0)};V.prototype.destroy=function(){return this.s().then(F(this,function(){this.f.destroy();this.a=this.f=null})).catch(function(){})};V.prototype.destroy=V.prototype.destroy;
                    V.prototype.s=function(){if(!this.b)return Promise.resolve();this.h&&yf(this);this.a.pause();xb(this.f);zf(this);Af(this);this.i&&(this.i.destroy(),this.i=null);this.a.src="";var a=this.a.setMediaKeys(null);this.b&&(this.b.destroy(),this.b=null);this.h=!1;this.g=new af;return a};V.prototype.unload=V.prototype.s;
                    V.prototype.ea=function(a){var b=this.s();this.a.autoplay&&(da("load"),C(this.f,this.a,"timeupdate",this.wb.bind(this)));a.T(this.c);a.pb(this.F);this.F=null;b=b.then(F(this,function(){return a.X()}));b.catch(F(this,function(b){a.destroy();return Promise.reject(b)}));return b.then(F(this,function(){if(!this.a)return Bf();this.b=a;C(this.f,this.b,"seekrangechanged",this.Fb.bind(this));this.i=new U(this,this.a,this.b);return this.i.initialize()})).then(F(this,function(){if(!this.a)return Bf();C(this.f,
                        this.a,"error",this.Rb.bind(this));C(this.f,this.a,"playing",this.Db.bind(this));C(this.f,this.a,"pause",this.Cb.bind(this));return this.b.lb(this,this.a)})).then(F(this,function(){return this.a?tf(this.i):Bf()})).then(F(this,function(){if(!this.a)return Bf();Df(this)})).catch(F(this,function(a){if(!this.a)return Bf();if("destroy"!=a.type){var b=y(a);this.dispatchEvent(b)}return this.s().then(function(){return Promise.reject(a)})}))};V.prototype.load=V.prototype.ea;
                    function Bf(){var a=Error("Player destroyed");a.type="destroy";return Promise.reject(a)}k=V.prototype;k.wb=function(){ga("load");this.g.playbackLatency=ha("load")/1E3;this.f.sa(this.a,"timeupdate")};k.Rb=function(){if(this.a.error){var a=this.a.error.code;a!=MediaError.MEDIA_ERR_ABORTED&&(a=Error(Ef[a]||"Unknown playback error."),a.type="playback",a=y(a),this.dispatchEvent(a))}};
                    k.Db=function(){da("playing");!this.j&&0>this.l&&(this.a.playbackRate=0,this.B(this.a.currentTime,Date.now(),this.l));this.h&&yf(this)};k.Cb=function(){ga("playing");var a=ha("playing");if(!isNaN(a)){var b=this.g;b.playTime+=a/1E3}Af(this)};k.Fb=function(a){this.D=a.start};
                    k.qb=function(){if(!this.a.paused){ga("playing");var a=ha("playing");if(!isNaN(a)){var b=this.g;b.playTime+=a/1E3;da("playing")}}a=this.g;b=this.a;b.getVideoPlaybackQuality&&(b=b.getVideoPlaybackQuality(),a.decodedFrames=b.totalVideoFrames,a.droppedFrames=b.droppedVideoFrames);return this.g};V.prototype.getStats=V.prototype.qb;V.prototype.da=function(){return this.b?this.b.ma():[]};V.prototype.getVideoTracks=V.prototype.da;V.prototype.Y=function(){return this.b?this.b.pa():[]};
                    V.prototype.getAudioTracks=V.prototype.Y;V.prototype.$=function(){return this.b?this.b.Oa():[]};V.prototype.getTextTracks=V.prototype.$;V.prototype.selectVideoTrack=function(a,b){return this.b?this.b.selectVideoTrack(a,void 0==b?!0:b):!1};V.prototype.selectVideoTrack=V.prototype.selectVideoTrack;V.prototype.M=function(a,b,c){return this.b?this.b.nb(a,void 0==b?!0:b,c):!1};V.prototype.selectAudioTrack=V.prototype.M;V.prototype.fa=function(a){return this.b?this.b.ob(a,!1):!1};
                    V.prototype.selectTextTrack=V.prototype.fa;V.prototype.V=function(a){this.b&&this.b.Na(a)};V.prototype.enableTextTrack=V.prototype.V;V.prototype.T=function(a){Af(this);0<=a?this.a.playbackRate=a:this.a.paused||(this.a.playbackRate=0,this.B(this.a.currentTime,Date.now(),a));this.l=a};V.prototype.setPlaybackRate=V.prototype.T;V.prototype.K=function(){return this.l};V.prototype.getPlaybackRate=V.prototype.K;V.prototype.R=function(a){this.F=a};V.prototype.setPlaybackStartTime=V.prototype.R;
                    V.prototype.G=function(){return this.b?this.b.mb():!1};V.prototype.isLive=V.prototype.G;
                    V.prototype.U=function(a){if(a){var b=pb(a,"enableAdaptation");null!=b&&(this.c.enableAdaptation=b);b=rb(a,"streamBufferSize");null!=b&&(this.c.streamBufferSize=b);b=rb(a,"liveStreamEndTimeout");null!=b&&(this.c.liveStreamEndTimeout=b);b=rb(a,"licenseRequestTimeout");null!=b&&(this.c.licenseRequestTimeout=b);b=rb(a,"mpdRequestTimeout");null!=b&&(this.c.mpdRequestTimeout=b);b=rb(a,"segmentRequestTimeout");null!=b&&(this.c.segmentRequestTimeout=b);b=sb(a,"preferredLanguage");null!=b&&(this.c.preferredLanguage=
                        b);b=tb(a,"restrictions",ja);null!=b&&(this.c.restrictions=b.clone());a=pb(a,"disableCacheBustingEvenThoughItMayAffectBandwidthEstimation");null!=a&&(Hd=!a);this.b&&this.b.T(this.c)}};V.prototype.configure=V.prototype.U;V.prototype.Z=function(){return this.c};V.prototype.getConfiguration=V.prototype.Z;function Af(a){a.j&&(window.clearTimeout(a.j),a.j=null)}function Df(a){zf(a);a.w=window.setTimeout(a.L.bind(a),100)}function zf(a){a.w&&(window.clearTimeout(a.w),a.w=null)}
                    V.prototype.B=function(a,b,c){this.j=null;var d=(Date.now()-b)/1E3*c;this.a.currentTime<this.D+(this.G()?1:.05)?this.a.pause():(d=Math.max(this.D,a+d),this.a.currentTime=d,this.j=window.setTimeout(this.B.bind(this,a,b,c),250))};function yf(a){ga("buffering");var b=a.g;b.bufferingTime+=ha("buffering")/1E3;a.h=!1;a.dispatchEvent(x({type:"bufferingEnd"}))}
                    V.prototype.L=function(){Df(this);if(!this.a.ended&&!this.a.seeking){var a=this.a.buffered,b=a.length?a.end(a.length-1):0,a=Math.max(b-this.a.currentTime,0),c=this.a.duration,c=isNaN(c)?0:Math.max(c-.05,0),b=b>=c||this.a.currentTime>=c;if(this.h){if(c=this.b.$a(),b||a>c)yf(this),this.a.play()}else!this.a.paused&&!b&&.5>a&&(this.h=!0,this.a.pause(),this.g.bufferingHistory.push(v()/1E3),da("buffering"),this.dispatchEvent(x({type:"bufferingStart"})))}};
                    var Ef={2:"A network failure occured while loading media content.",3:"The browser failed to decode the media content.",4:"The browser does not support the media content."};function Ff(a){for(var b=0;b<a.length;++b)for(var c=a[b],d=0;d<c.a.length;++d){for(var e=c.a[d],f=e,g=0;g<f.m.length;++g)of(we(f.m[g]))||(f.m.splice(g,1),--g);0==e.m.length&&(c.a.splice(d,1),--d)}}function Gf(a){for(var b=0;b<a.length;++b)for(var c=a[b],d=0;d<c.a.length;++d)c.a[d].m.sort(Hf)}function Hf(a,b){var c=a.bandwidth||Number.MAX_VALUE,d=b.bandwidth||Number.MAX_VALUE;return c<d?-1:c>d?1:0};function If(a){this.a=a}If.prototype.destroy=function(){this.a.destroy();this.a=null};If.prototype.update=function(a){var b=Jf(a),c=Jf(this.a);return Promise.all([b,c]).then(F(this,function(b){var c=b[0];b=b[1];var f=this.a.a;Ff(f);Gf(f);a.f=this.a.f;a.g=this.a.g?this.a.g.clone():null;a.c=this.a.c;f=[];Kf(a,this.a,c,b,f);c=a.a;Ff(c);Gf(c);return Promise.resolve(f)}))};
                    function Jf(a){function b(a,b){return a.concat(b)}var c=a.a.map(function(a){return a.a}).reduce(b,[]).map(function(a){return a.m}).reduce(b,[]);a=c.map(function(a){return a.I.create()});return Promise.all(a).then(function(a){for(var b={},f=0;f<c.length;++f)b[c[f].C]=a[f];return Promise.resolve(b)})}
                    function Kf(a,b,c,d,e){var f=new z;a.a.forEach(function(a,b){f.push(a.id||""+b,a)});var g=new z;b.a.forEach(function(a,b){g.push(a.id||""+b,a)});a=wb(f);for(b=0;b<a.length;++b){var h=a[b],l=f.get(h);1<l.length||(h=g.get(h))&&0!=h.length&&1==h.length&&(Lf(l[0],h[0],c,d,e),l[0].b=h[0].b)}}
                    function Lf(a,b,c,d,e){var f=new z;a.a.forEach(function(a,b){f.push(a.id||""+b,a)});var g=new z;b.a.forEach(function(a,b){g.push(a.id||""+b,a)});a=wb(f);for(b=0;b<a.length;++b){var h=a[b],l=f.get(h);1<l.length||(h=g.get(h))&&0!=h.length&&1==h.length&&Mf(l[0],h[0],c,d,e)}}
                    function Mf(a,b,c,d,e){var f=new z;a.m.forEach(function(a,b){f.push(a.id||""+b,a)});var g=new z;b.m.forEach(function(a,b){g.push(a.id||""+b,a)});b={};for(var h=wb(f),l=0;l<h.length;++l){var m=h[l];b[m]=m;var n=f.get(m);1<n.length||((m=g.get(m))&&0!=m.length?1==m.length&&(Nf(n[0],m[0],c,d),n[0].H=m[0].H,m[0].H=null,n[0].c=m[0].c):(e.push(n[0]),a.m.splice(a.m.indexOf(n[0]),1)))}h=wb(g);for(l=0;l<h.length;++l)m=h[l],b[m]||(b[m]=m,m=g.get(m),a.m.push(m[0]))}
                    function Nf(a,b,c,d){a=c[a.C];b=d[b.C];a.length();a.Ha(b)&&a.length()};function W(){this.a=this.b=null;this.f=new B;this.c=Number.POSITIVE_INFINITY;this.i=!0;this.g=!1}p("shaka.media.SimpleAbrManager",W);W.prototype.destroy=function(){this.f.destroy();this.a=this.b=this.f=null};W.prototype.initialize=function(a,b){this.b||this.a||(this.b=a,this.a=b)};
                    W.prototype.start=function(){this.b&&this.a&&!this.g&&(this.c=Date.now()+4E3,C(this.f,this.b,"bandwidth",this.v.bind(this)),C(this.f,this.a,"adaptation",this.j.bind(this)),C(this.f,this.a,"trackschanged",this.h.bind(this)),this.g=!0)};W.prototype.enable=function(a){this.i=a};W.prototype.getInitialVideoTrackId=function(){if(!this.b||!this.a)return null;var a=Of(this);return a?a.id:null};W.prototype.selectVideoTrack=function(a,b,c){this.g&&this.a.selectVideoTrack(a.id,b,c)};
                    W.prototype.v=function(){Date.now()<this.c||this.h()};W.prototype.h=function(){if(this.i){var a=Of(this);if(a){if(a.active){this.c=Date.now()+3E3;return}this.selectVideoTrack(a,!1)}this.c=Number.POSITIVE_INFINITY}};W.prototype.j=function(){this.c==Number.POSITIVE_INFINITY&&(this.c=Date.now()+3E4)};
                    function Of(a){var b=a.a.ma();if(0==b.length)return null;b.sort(sa);var c;a:{c=a.a.pa();for(var d=0;d<c.length;++d)if(c[d].active){c=c[d];break a}c=null}c=c?c.bandwidth:0;a=a.b.getBandwidth();for(var d=b[0],e=0;e<b.length;++e){var f=b[e],g=e+1<b.length?b[e+1]:{bandwidth:Number.POSITIVE_INFINITY};if(f.bandwidth&&(g=(g.bandwidth+c)/.85,a>=(f.bandwidth+c)/.95&&a<=g&&(d=f,d.active)))break}return d};function Pf(a,b,c){D.call(this,null);this.f=a;this.c=b;this.b=mc(c);this.a=null}q(Pf,D);p("shaka.player.HttpVideoSource",Pf);Pf.prototype.T=function(){};Pf.prototype.destroy=function(){this.a&&(this.a.parentElement.removeChild(this.a),this.a=null);this.v=this.b=null};k=Pf.prototype;k.lb=function(a,b){this.v=a;var c=b.mediaKeys;b.src=this.f;c=b.setMediaKeys(c);this.c&&(this.a=document.createElement("track"),this.a.src=this.c,b.appendChild(this.a),this.a.track.mode="showing");return c};k.X=function(){return Promise.resolve()};
                    k.ma=function(){return[]};k.pa=function(){return[]};k.Oa=function(){return[]};k.$a=function(){return 5};k.ab=function(){var a=new Ae;a.a=this.b;return[a]};k.Ka=function(){};Pf.prototype.selectVideoTrack=function(){return!1};k=Pf.prototype;k.nb=function(){return!1};k.ob=function(){return!1};k.Na=function(a){this.a&&(this.a.track.mode=a?"showing":"disabled")};k.pb=function(){};k.ua=function(){return[]};k.ha=function(){return!1};k.mb=function(){return!1};
                    k.cb=function(a){for(var b in a){var c=a[b],d=gb[c]||null;if(d){var e=Bb(b),d=Error("Key "+e+" is not usable. "+d);d.type="drm";d.code=c;c=y(d);this.dispatchEvent(c)}}};function X(a,b,c){D.call(this,null);this.a=a;this.Z=b;this.i=new B;this.g=new MediaSource;this.f=null;this.da=0;this.b=new z;this.G=c;this.G.initialize(b,this);this.L=!1;this.K="en";this.fa=!1;this.U=null;this.B=new E;this.h=new ja;this.D=null;this.Va=1;this.c={};this.ea=new E;this.Ta=0;this.Ua=15;this.w=null;this.Ra=this.Sa=!1;this.s={};this.$=this.Y=this.V=null;this.F={}}q(X,D);p("shaka.player.StreamVideoSource",X);
                    X.prototype.T=function(a){null!=a.streamBufferSize&&(this.F.streamBufferSize=a.streamBufferSize);null!=a.segmentRequestTimeout&&(this.F.segmentRequestTimeout=a.segmentRequestTimeout);Qf(this);null!=a.enableAdaptation&&this.G.enable(Boolean(a.enableAdaptation));null!=a.mpdRequestTimeout&&(this.da=Number(a.mpdRequestTimeout));null!=a.liveStreamEndTimeout&&(this.Ua=Number(a.liveStreamEndTimeout));null!=a.preferredLanguage&&(this.K=kb(String(a.preferredLanguage)));null!=a.restrictions&&(this.h=a.restrictions,
                    this.L&&Rf(this))};X.prototype.destroy=function(){this.B.destroy();this.ea.destroy();this.ea=this.B=null;this.Y&&(window.clearTimeout(this.Y),this.Y=null);this.V&&(window.clearTimeout(this.V),this.V=null);this.s=null;this.i.destroy();this.i=null;ob(this.c).forEach(function(a){a.destroy()});this.b=this.c=null;this.a&&(this.a.destroy(),this.a=null);this.G.destroy();this.v=this.h=this.U=this.f=this.g=this.Z=this.G=null};k=X.prototype;
                    k.lb=function(a,b){if(!this.L){var c=Error("Cannot call attach() right now.");c.type="app";return Promise.reject(c)}this.v=a;this.f=b;this.U=a.qb();C(this.i,this.g,"sourceopen",this.yb.bind(this));C(this.i,this.Z,"bandwidth",this.Sb.bind(this));this.a.b&&(C(this.i,a,"bufferingStart",this.vb.bind(this)),C(this.i,a,"bufferingEnd",this.ub.bind(this)));c=this.f.mediaKeys;this.f.src=window.URL.createObjectURL(this.g);c=this.f.setMediaKeys(c);return Promise.all([this.B,c])};
                    k.X=function(){if(this.L){var a=Error("Cannot call load() right now.");a.type="app";return Promise.reject(a)}if(!this.a||0==this.a.a.length)return a=Error("The manifest does not specify any content."),a.type="stream",Promise.reject(a);a=this.a.a;Ff(a);Gf(a);if(0==this.a.a.length||0==this.a.a[0].a.length)return a=Error("The manifest specifies content that cannot be displayed on this browser/platform."),a.type="stream",Promise.reject(a);this.L=!0;this.F.initialStreamBufferSize=this.a.c;Qf(this);Rf(this);
                        return Promise.resolve()};k.gb=function(a){var b=Date.now(),c=this.V=null,d=this.a.g;(a?this.eb():this.fb(d)).then(F(this,function(a){c=new If(a);return c.update(this.a)})).then(F(this,function(a){c.destroy();c=null;for(var d=0;d<a.length;++d)Sf(this,a[d]);this.F.initialStreamBufferSize=this.a.c;Qf(this);Rf(this);0==Object.keys(this.c).length?Tf(this):Uf(this,(Date.now()-b)/1E3)})).catch(F(this,function(a){c&&(c.destroy(),c=null);"aborted"!=a.type&&(a=y(a),this.dispatchEvent(a),this.a&&Uf(this,0))}))};
                    k.fb=function(){return Promise.reject("Cannot update manifest with this VideoSource implementation.")};k.eb=function(){return Promise.reject("Cannot update manifest with this VideoSource implementation.")};function Uf(a,b){if(null!=a.a.f){var c=Math.max(a.a.f,3),c=Math.max(c-b,0);a.V=window.setTimeout(a.gb.bind(a,!1),1E3*c)}}
                    function Sf(a,b){var c=b.a.split("/")[0],d=a.c[c];if(d&&d.oa()==b){var e=a.b.get(b.a.split("/")[0]).map(function(a){return a.m}).reduce(function(a,b){return a.concat(b)},[]).filter(function(a){return a.N&&a.J});if(0==e.length){c=Error("All usable streams have been removed from the manifest.");c.type="app";c=y(c);a.dispatchEvent(c);return}a.s[c].Pa==b&&delete a.s[c];d.ra(e[0],!0);b.destroy()}b.destroy()}
                    k.ma=function(){if(!this.b.a.hasOwnProperty("video"))return[];for(var a=this.c.video,a=(a=a?a.oa():null)?a.C:0,b=[],c=this.b.get("video"),d=0;d<c.length;++d)for(var e=c[d],f=0;f<e.m.length;++f){var g=e.m[f];if(g.N&&g.J){var h=g.C,g=new ra(h,g.bandwidth,g.width,g.height);h==a&&(g.active=!0);b.push(g)}}return b};X.prototype.getVideoTracks=X.prototype.ma;
                    X.prototype.pa=function(){if(!this.b.a.hasOwnProperty("audio"))return[];for(var a=this.c.audio,a=(a=a?a.oa():null)?a.C:0,b=[],c=this.b.get("audio"),d=0;d<c.length;++d)for(var e=c[d],f=e.lang,g=0;g<e.m.length;++g){var h=e.m[g];if(h.N&&h.J){var l=h.C,h=new ia(l,h.bandwidth,f);l==a&&(h.active=!0);b.push(h)}}return b};X.prototype.getAudioTracks=X.prototype.pa;
                    X.prototype.Oa=function(){if(!this.b.a.hasOwnProperty("text"))return[];for(var a=this.c.text,b=a?a.oa():null,b=b?b.C:0,c=[],d=this.b.get("text"),e=0;e<d.length;++e)for(var f=d[e],g=f.lang,h=0;h<f.m.length;++h){var l=f.m[h].C,m=new qa(l,g);l==b&&(m.active=!0,m.enabled=a.Da());c.push(m)}return c};X.prototype.getTextTracks=X.prototype.Oa;X.prototype.$a=function(){return Number(this.F.initialStreamBufferSize)};
                    X.prototype.ab=function(){var a;if(this.L){a=this.a.a[0];for(var b=[],c=0;c<a.a.length;++c)b.push.apply(b,ze(a.a[c]));a=b}else a=[];return a};
                    X.prototype.Ka=function(a){if(this.L){for(var b={},c=this.a.a[0],d=0;d<c.a.length;++d){var e=c.a[d];b[e.C]=e}this.b.a={};c=wb(a);for(d=0;d<c.length;++d){var e=c[d],f=a.get(e);if("video"==e){var g=f[0].id;this.b.push(e,b[g])}else if("audio"==e)for(var g=f[0].b.split(";")[0],h=0;h<f.length;++h){var l=f[h];l.b.split(";")[0]==g&&this.b.push(e,b[l.id])}else for(h=0;h<f.length;++h)g=f[h].id,this.b.push(e,b[g])}this.fa=!0;if(a=this.b.get("audio"))Vf(this,a),this.b.set("audio",a),a=a[0].lang||this.K,jb(2,
                        this.K,a)&&(this.fa=!1);if(a=this.b.get("text"))Vf(this,a),this.b.set("text",a),a=a[0].lang||this.K,jb(2,this.K,a)||(this.fa=!1)}};X.prototype.selectVideoTrack=function(a,b,c){return Wf(this,"video",a,b,c)};k=X.prototype;k.nb=function(a,b,c){return Wf(this,"audio",a,b,c)};k.ob=function(a,b){return Wf(this,"text",a,b)};k.Na=function(a){var b=this.c.text;b&&b.va(a)};k.pb=function(a){this.$=a};
                    function Rf(a){if(a.h){for(var b=!1,c=0;c<a.a.a.length;++c)for(var d=a.a.a[c],e=0;e<d.a.length;++e){var f=d.a[e];if("video"==f.contentType)for(var g=0;g<f.m.length;++g){var h=f.m[g],l=h.J;h.J=!0;a.h.maxWidth&&h.width>a.h.maxWidth&&(h.J=!1);a.h.maxHeight&&h.height>a.h.maxHeight&&(h.J=!1);a.h.minHeight&&h.height<a.h.minHeight&&(h.J=!1);a.h.maxBandwidth&&h.bandwidth>a.h.maxBandwidth&&(h.J=!1);a.h.minBandwidth&&h.bandwidth<a.h.minBandwidth&&(h.J=!1);l!=h.J&&(b=!0)}}0!=ub(a.b).length&&b&&(Xf(a),0<a.ma().length||
                    (b=Error("The application has restricted all video tracks!"),b.type="app",b=y(b),a.dispatchEvent(b)))}}k.ua=function(){return[]};k.ha=function(){return!1};k.mb=function(){return this.a?this.a.b:!1};
                    k.cb=function(a){for(var b,c=!1,d=new z,e=ub(this.b),f=0;f<e.length;++f)for(var g=e[f],h=0;h<g.m.length;++h){var l=g.m[h];l.f.forEach(function(a){d.push(a,l)})}for(b in a)if(e=gb[a[b]]||null,g=d.get(b))for(f=0;f<g.length;++f)l=g[f],h=l.N,l.N=!e,h!=l.N&&(c=!0);else Bb(b);c&&(Xf(this),b=this.pa(),a=this.ma(),b=this.b.a.hasOwnProperty("audio")&&0==b.length,a=this.b.a.hasOwnProperty("video")&&0==a.length,b||a)&&(a=Error("The key system has restricted all "+(b&&a?"audio and video tracks.":b?"audio tracks.":
                            "video tracks.")),a.type="drm",a=y(a),this.dispatchEvent(a))};function Xf(a){var b=x({type:"trackschanged",bubbles:!0});a.dispatchEvent(b)}function Wf(a,b,c,d,e){if(!a.b.a.hasOwnProperty(b)||!a.c[b])return!1;for(var f=a.b.get(b),g=0;g<f.length;++g)for(var h=f[g],l=0;l<h.m.length;++l){var m=h.m[l];if(m.C==c){if(!m.N||!m.J)return!1;if("text"!=b&&!a.Ra)return c=a.s[b],a.s[b]={Pa:m,Wa:null!=c&&c.Wa||d,Xa:null!=c&&c.Xa||e},!0;bf(a.U,m);a.c[b].ra(m,d,e);return!0}}return!1}
                    function Vf(a,b){for(var c=0;2>=c;++c)for(var d=0;d<b.length;++d){var e=b[d];if(jb(c,a.K,e.lang)){b.splice(d,1);b.splice(0,0,e);return}}for(d=0;d<b.length;++d)if(e=b[d],e.b){b.splice(d,1);b.splice(0,0,e);break}}k.yb=function(){this.i.sa(this.g,"sourceopen");Tf(this).then(F(this,function(){this.B&&this.B.resolve()})).catch(F(this,function(a){this.B&&this.B.reject(a)}))};
                    function Tf(a){for(var b=[],c=["audio","video","text"],d=0;d<c.length;++d){var e=c[d];a.b.a.hasOwnProperty(e)&&b.push(a.b.get(e)[0])}for(var f=Yf(a,b),d=0;d<c.length;++d)if(e=c[d],a.b.a.hasOwnProperty(e)&&!f[e])return a=Error("Unable to select an initial "+e+" stream: all "+e+" streams have been restricted (by the application or by the key system)."),a.type="stream",Promise.reject(a);b=ob(f).map(function(a){return a.I.create()});return Promise.all(b).then(F(a,function(a){if(!a.every(function(a){return a.length()}))return a=
                        Error("Some streams are not available."),a.type="stream",Promise.reject(a);a=Zf(this,a);if(!a)return a=Error("Some streams are not available."),a.type="stream",Promise.reject(a);if(!$f(this,f))return a=Error("Failed to create Stream objects."),a.type="stream",Promise.reject(a);this.G.start();ag(this,f,a);return Promise.resolve()})).catch(F(a,function(a){if("aborted"!=a.type)return Object.keys(this.c),this.a.b?(v()<this.a.h?(a=Math.max(this.a.h-Date.now()/1E3,3),this.V=window.setTimeout(this.gb.bind(this,
                        !0),1E3*a)):Uf(this,0),Promise.resolve()):Promise.reject(a)}))}function Yf(a,b){for(var c={},d=0;d<b.length;++d){var e=b[d],f=null;if("video"==e.contentType){var g=a.G.getInitialVideoTrackId();if(null==g)continue;f=e.m.filter(function(a){return a.C==g});if(0==f.length)continue;f=f[0]}else if("audio"==e.contentType){f=e.m.filter(function(a){return a.N&&a.J});if(0==f.length)continue;f=e.m[Math.floor(f.length/2)]}else 0<e.m.length&&(f=e.m[0]);c[e.contentType]=f}return c}
                    function $f(a,b){var c={},d;for(d in b){var e=b[d],e="text"==d?new Me(a,a.f):bg(a,e);if(!e)return ob(c).forEach(function(a){a.destroy()}),!1;c[d]=e}a.c=c;return!0}function bg(a,b){var c=new De(a,a.f,a.g,we(b),a.Z);c.F(a.F);return c}
                    function ag(a,b,c){a.Va=a.f.playbackRate;a.f.playbackRate=0;cg(a,c);var d;a.$&&a.$<=c.end&&a.$>=c.start?d=a.$:a.a.b?(d=c.end,a.Sa=!0):d=c.start;C(a.i,a.f,"seeking",a.Gb.bind(a));a.f.currentTime!=d&&(a.f.currentTime=d,a.D=d);dg(a,c.start,c.end);c=[];for(var e in a.c){d=a.c[e];c.push(d.sb(a.ea));C(a.i,d,"ended",a.Hb.bind(a));var f=b[e];bf(a.U,f);d.ra(f,!1)}Promise.all(c).then(a.tb.bind(a)).catch(F(a,function(a){"destroy"!=a.type&&(a=y(a),this.dispatchEvent(a))}));a.Na(a.fa)}
                    k.tb=function(a){ba(a&&a.length==Object.keys(this.c).length);for(var b=Number.POSITIVE_INFINITY,c=Number.NEGATIVE_INFINITY,d=0;d<a.length;++d)var e=a[d],b=Math.min(b,e),c=Math.max(c,e);a=eg(this);for(d=0;d<a.length;++d)a[d].ka(c);fg(this,a,c);d=ub(this.b).map(function(a){return a.m}).reduce(function(a,b){return a.concat(b)},[]).map(function(a){var b=[a.I.create()];a.H&&b.push(a.H.create());return Promise.all(b)});Promise.all(d).then(F(this,function(a){for(var b=0;b<a.length;++b)a[b][0].ka(c);this.Ra=
                        !0;for(var d in this.s)a=this.s[d],b=this.c[d],bf(this.U,a.Pa),b.ra(a.Pa,a.Wa,a.Xa);this.s={}})).catch(F(this,function(a){"aborted"!=a.type&&(a=y(a),this.dispatchEvent(a))}))};function fg(a,b,c){if(b=Zf(a,b))cg(a,b),dg(a,b.start,b.end);0!=c&&(c=a.f.currentTime+c,a.f.currentTime=c,a.D=c);a.Sa&&b&&(a.f.currentTime=b.end);a.f.playbackRate=a.Va;a.a.b&&null!=a.a.f&&Uf(a,0);gg(a);a.ea.resolve()}
                    function cg(a,b){if(a.a.b)isNaN(a.g.duration)&&(a.g.duration=b.end+2592E3);else if(isNaN(a.g.duration)||b.end>a.g.duration){a.g.duration=b.end;for(var c=0;c<a.g.sourceBuffers.length;++c)a.g.sourceBuffers[c].appendWindowEnd=b.end}}k.Jb=function(){this.Y=null;gg(this);var a=Zf(this,eg(this));a&&(this.a.b&&this.Ta!=a.A&&(this.Ta=a.A,null!=this.w&&(window.clearTimeout(this.w),this.w=null)),dg(this,a.start,a.end),this.f.paused||hg(this,this.f.currentTime,a.start,a.end))};
                    function dg(a,b,c){b=x({type:"seekrangechanged",bubbles:!0,start:b,end:c});a.dispatchEvent(b)}k.Gb=function(){var a=this.f.currentTime;if(null!=this.D){if(a>=this.D-.01&&a<=this.D+.01){this.D=null;return}this.D=null}var b=Zf(this,eg(this));if(b){var c=b.end;(b=hg(this,a,b.start,c))||(a<=c+.01?b=!1:(this.f.currentTime=c,b=!0));if(!b)for(var d in this.c)this.c[d].jb()}};
                    function hg(a,b,c,d){if(b>=c-.01)return!1;b=0;if(a.a.b){b=.5;for(var e in a.c)if(!a.c[e].kb(c+b)){b=a.a.c;break}}a.f.currentTime=Math.min(c+b,d);return!0}k.Hb=function(){if(!this.a.b){for(var a in this.c)if(!this.c[a].Ga())return;this.Za()}};k.vb=function(){ob(this.c).every(function(a){return a.Ga()})&&(this.w=window.setTimeout(this.Za.bind(this),1E3*this.Ua))};k.ub=function(){null!=this.w&&(window.clearTimeout(this.w),this.w=null)};
                    k.Sb=function(){var a=this.U,b=this.Z.getBandwidth();a.estimatedBandwidth=b;a.bandwidthHistory.push(new df(b))};k.Za=function(){this.w=null;this.g.endOfStream()};function eg(a){return ob(a.c).map(function(a){return a.bb()}).filter(function(a){return null!=a})}
                    function Zf(a,b){for(var c=0,d=Number.POSITIVE_INFINITY,e=Number.POSITIVE_INFINITY,f=0;f<b.length;++f){var g=b[f].Ea(),c=Math.max(c,g.start);null!=g.end&&(d=Math.min(d,g.end));b[f].length()&&(e=Math.min(e,b[f].A().a))}if(d==Number.POSITIVE_INFINITY)if(d=a.a.a[0],d.b)d=(d.start||0)+d.b;else return null;a.a.b&&(d=Math.max(d-a.a.c,c));return c>d?null:{start:c,end:d,A:e}}function gg(a){a.a.b&&(a.Y=window.setTimeout(a.Jb.bind(a),1E3))}function Qf(a){for(var b in a.c)a.c[b].F(a.F)};function Y(a,b,c,d){c||(c=new Ab);d||(d=new W);X.call(this,null,c,d);this.za=a;this.l=null;this.M=b;this.R=[];this.ga=[];this.ta=[];this.j=null}q(Y,X);p("shaka.player.DashVideoSource",Y);Y.prototype.Aa=function(a,b,c){this.R.push(a);this.ga.push(b||"");this.ta.push(c||"")};Y.prototype.addExternalCaptions=Y.prototype.Aa;Y.prototype.xa=function(a){this.j=a};Y.prototype.setNetworkCallback=Y.prototype.xa;Y.prototype.destroy=function(){this.l=this.j=this.M=null;X.prototype.destroy.call(this)};
                    Y.prototype.X=function(){var a=new G(this.j,[new H(this.za)]);return Qd(new Pd(a,this.da)).then(F(this,function(a){this.l=a;for(var c=0;c<this.R.length;c++){var d=a,e=this.R[c],f=this.ga[c],g=this.ta[c];if(0!==d.a.length){var h=new ed;h.contentType="text";h.lang=f||"en";h.c=!0;f=new hd;f.bandwidth=0;f.f=g||"text/vtt";f.u=[new H(e)];h.a.push(f);d.a[0].b.push(h);Ad(d.a[0])}}this.a=Qe(new Pe(this.M),a,this.j);return X.prototype.X.call(this)}))};
                    Y.prototype.fb=function(a){return Qd(new Pd(a,this.da)).then(F(this,function(a){this.l=a;a=Qe(new Pe(this.M),a,this.j);return Promise.resolve(a)}))};Y.prototype.eb=function(){var a=Qe(new Pe(this.M),this.l,this.j);return Promise.resolve(a)};function Z(a,b,c){b||(b=new Ab);c||(c=new W);X.call(this,null,b,c);this.R=a;this.M=[];this.timeoutMs=3E4;this.l={};this.j=this.ga=null}q(Z,X);p("shaka.player.OfflineVideoSource",Z);Z.prototype.T=function(a){null!=a.licenseRequestTimeout&&(this.l.licenseRequestTimeout=a.licenseRequestTimeout);null!=a.segmentRequestTimeout&&(this.l.segmentRequestTimeout=a.segmentRequestTimeout);X.prototype.T.call(this,a)};
                    p("shaka.player.OfflineVideoSource.retrieveGroupIds",function(){var a=new Qb,b=Hb(a).then(function(){return Rb(a)});b.then(function(){Jb(a)}).catch(function(){Jb(a)});return b});
                    Z.prototype.xa=function(a,b,c,d){var e,f=null,g={},h=[];a=new G(this.ga,[new H(a)]);return Qd(new Pd(a,this.da)).then(F(this,function(a){this.a=Qe(new Pe(c),a,this.ga);if(this.a.b)return a=Error("Unable to store live streams offline."),a.type="app",Promise.reject(a);this.T({preferredLanguage:b});return X.prototype.X.call(this)})).then(F(this,function(){var a=document.createElement("video");a.src=window.URL.createObjectURL(this.g);e=new U(null,a,this);null!=this.l.licenseRequestTimeout&&(e.w=Number(this.l.licenseRequestTimeout));
                        C(this.i,e,"sessionReady",this.ta.bind(this));C(this.i,e,"error",function(a){f=a});return e.initialize()})).then(F(this,function(){for(var a=ub(this.b),b=0;b<a.length;++b)for(var c=a[b],e=0;e<c.m.length;++e){var f=c.m[e];g[f.C]=f}return d()})).then(F(this,function(a){for(var b=0;b<a.length;++b){var c=a[b],d=g[c];if(d)h.push(d);else return Promise.reject(Error("Invalid stream ID chosen: "+c))}var e=["audio","video"];h=h.filter(function(a){return 0>e.indexOf(a.a.split("/")[0])?!1:!0});a=h.map(function(a){return a.H.create()});
                        return Promise.all(a)})).then(F(this,function(a){for(var b=h,c=[],d=0;d<b.length;++d)try{c[d]=this.g.addSourceBuffer(we(b[d]))}catch(e){}if(b.length!=c.length)a=Error("Error initializing streams."),a.type="storage",a=Promise.reject(a);else{for(d=0;d<a.length;++d)(b=a[d])&&c[d].appendBuffer(b);a=Promise.resolve()}return a})).then(F(this,function(){return qf(e,this.timeoutMs)})).then(F(this,function(){return f?Promise.reject(f):ig(this,h,e.a,this.a.a[0].b)})).then(F(this,function(a){this.R=a;return f?
                        (jg(this),Promise.reject(f)):Promise.resolve(a)}))};p("shaka.player.OfflineVideoSource.prototype.store",Z.prototype.xa);Z.prototype.Aa=function(a){this.ga=a};Z.prototype.setNetworkCallback=Z.prototype.Aa;Z.prototype.ta=function(a){this.M.push(a.detail.sessionId)};
                    function ig(a,b,c,d){var e=new ef(a.Z,a);null!=a.l.segmentRequestTimeout&&(e.b=Number(a.l.segmentRequestTimeout));return Hb(e).then(F(a,function(){return ff(e,b,this.M,d,c)})).then(function(a){Jb(e);return Promise.resolve(a)}).catch(function(a){Jb(e);return Promise.reject(a)})}
                    Z.prototype.X=function(){var a=new Qb,b,c;return Hb(a).then(F(this,function(){return Sb(a,this.R)})).then(F(this,function(d){var e=[];this.M=d.session_ids;b=d.duration;c={keySystem:d.key_system,distinctiveIdentifierRequired:d.distinctive_identifier,persistentStorageRequired:!0,audioRobustness:d.audio_robustness,videoRobustness:d.video_robustness,withCredentials:d.with_credentials,licenseServerUrl:d.license_server};for(var f=0;f<d.stream_ids.length;++f)e.push(Tb(a,d.stream_ids[f]));return Promise.all(e)})).then(F(this,
                        function(a){var e=b,f=c,g=new Ce;g.c=5;for(var h=new Be,l=0;l<a.length;++l){var m=a[l],n=new ue,t=new te(m.references),A=new Wd(null,m.init_segment);n.I=t;n.H=A;n.a=m.mime_type;n.b=m.codecs;n.N=!0;this.j&&(null!=this.j.licenseServerUrl&&(f.licenseServerUrl=this.j.licenseServerUrl),null!=this.j.withCredentials&&(f.withCredentials=this.j.withCredentials),f.licensePostProcessor=this.j.licensePostProcessor,f.licensePreProcessor=this.j.licensePreProcessor,f.serverCertificate=this.j.serverCertificate);
                            m=mc(f);t=new xe;t.m.push(n);t.a.push(m);t.contentType=n.a.split("/")[0];h.a.push(t);h.b=e}g.a.push(h);this.a=g;return X.prototype.X.call(this)})).then(function(){Jb(a);return Promise.resolve()}).catch(function(b){Jb(a);return Promise.reject(b)})};
                    Z.prototype.za=function(a,b){a&&(this.j={licenseServerUrl:a.licenseServerUrl,withCredentials:a.withCredentials,serverCertificate:a.serverCertificate,licensePreProcessor:a.licensePreProcessor,licensePostProcessor:a.licensePostProcessor});var c=null;return kg(this).catch(function(a){return b?(c=a,Promise.resolve()):Promise.reject(a)}).then(F(this,function(){return jg(this)})).then(function(){return Promise.resolve(c)})};Z.prototype.deleteGroup=Z.prototype.za;Z.prototype.ua=function(){return this.M};
                    Z.prototype.ha=function(){return!0};function jg(a){var b=new ef(null,null);return Hb(b).then(F(a,function(){return jf(b,this.R)})).then(function(){Jb(b);return Promise.resolve()}).catch(function(a){Jb(b);return Promise.reject(a)})}
                    function kg(a){var b=document.createElement("video");b.src=window.URL.createObjectURL(a.g);var c=new U(null,b,a);null!=a.l.licenseRequestTimeout&&(c.w=Number(a.l.licenseRequestTimeout));return a.X().then(function(){return c.initialize()}).then(F(a,function(){return qf(c,this.timeoutMs)})).then(function(){return rf(c)}).then(F(a,function(){c.destroy();this.destroy();return Promise.resolve()})).catch(F(a,function(a){c.destroy();this.destroy();return Promise.reject(a)}))};}.bind(g,this))();
                if (typeof(module)!="undefined"&&module.exports)module.exports=g.shaka;
                else if (typeof(define)!="undefined" && define.amd)define(function(){return g.shaka});
                else this.shaka=g.shaka;
            })();


            ; browserify_shim__define__module__export__(typeof shaka != "undefined" ? shaka : window.shaka);

        }).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],152:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

    module.exports = Stream;

    var EE = require('events').EventEmitter;
    var inherits = require('inherits');

    inherits(Stream, EE);
    Stream.Readable = require('readable-stream/readable.js');
    Stream.Writable = require('readable-stream/writable.js');
    Stream.Duplex = require('readable-stream/duplex.js');
    Stream.Transform = require('readable-stream/transform.js');
    Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
    Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

    function Stream() {
        EE.call(this);
    }

    Stream.prototype.pipe = function(dest, options) {
        var source = this;

        function ondata(chunk) {
            if (dest.writable) {
                if (false === dest.write(chunk) && source.pause) {
                    source.pause();
                }
            }
        }

        source.on('data', ondata);

        function ondrain() {
            if (source.readable && source.resume) {
                source.resume();
            }
        }

        dest.on('drain', ondrain);

        // If the 'end' option is not supplied, dest.end() will be called when
        // source gets the 'end' or 'close' events.  Only dest.end() once.
        if (!dest._isStdio && (!options || options.end !== false)) {
            source.on('end', onend);
            source.on('close', onclose);
        }

        var didOnEnd = false;
        function onend() {
            if (didOnEnd) return;
            didOnEnd = true;

            dest.end();
        }


        function onclose() {
            if (didOnEnd) return;
            didOnEnd = true;

            if (typeof dest.destroy === 'function') dest.destroy();
        }

        // don't leave dangling pipes when there are errors.
        function onerror(er) {
            cleanup();
            if (EE.listenerCount(this, 'error') === 0) {
                throw er; // Unhandled stream error in pipe.
            }
        }

        source.on('error', onerror);
        dest.on('error', onerror);

        // remove all the event listeners that were added.
        function cleanup() {
            source.removeListener('data', ondata);
            dest.removeListener('drain', ondrain);

            source.removeListener('end', onend);
            source.removeListener('close', onclose);

            source.removeListener('error', onerror);
            dest.removeListener('error', onerror);

            source.removeListener('end', cleanup);
            source.removeListener('close', cleanup);

            dest.removeListener('close', cleanup);
        }

        source.on('end', cleanup);
        source.on('close', cleanup);

        dest.on('close', cleanup);

        dest.emit('pipe', source);

        // Allow for unix-like usage: A.pipe(B).pipe(C)
        return dest;
    };

},{"events":7,"inherits":9,"readable-stream/duplex.js":140,"readable-stream/passthrough.js":146,"readable-stream/readable.js":147,"readable-stream/transform.js":148,"readable-stream/writable.js":149}],153:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

    var Buffer = require('buffer').Buffer;

    var isBufferEncoding = Buffer.isEncoding
        || function(encoding) {
            switch (encoding && encoding.toLowerCase()) {
                case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
                default: return false;
            }
        }


    function assertEncoding(encoding) {
        if (encoding && !isBufferEncoding(encoding)) {
            throw new Error('Unknown encoding: ' + encoding);
        }
    }

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
    var StringDecoder = exports.StringDecoder = function(encoding) {
        this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
        assertEncoding(encoding);
        switch (this.encoding) {
            case 'utf8':
                // CESU-8 represents each of Surrogate Pair by 3-bytes
                this.surrogateSize = 3;
                break;
            case 'ucs2':
            case 'utf16le':
                // UTF-16 represents each of Surrogate Pair by 2-bytes
                this.surrogateSize = 2;
                this.detectIncompleteChar = utf16DetectIncompleteChar;
                break;
            case 'base64':
                // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
                this.surrogateSize = 3;
                this.detectIncompleteChar = base64DetectIncompleteChar;
                break;
            default:
                this.write = passThroughWrite;
                return;
        }

        // Enough space to store all bytes of a single character. UTF-8 needs 4
        // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
        this.charBuffer = new Buffer(6);
        // Number of bytes received for the current incomplete multi-byte character.
        this.charReceived = 0;
        // Number of bytes expected for the current incomplete multi-byte character.
        this.charLength = 0;
    };


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
    StringDecoder.prototype.write = function(buffer) {
        var charStr = '';
        // if our last write ended with an incomplete multibyte character
        while (this.charLength) {
            // determine how many remaining bytes this buffer has to offer for this char
            var available = (buffer.length >= this.charLength - this.charReceived) ?
            this.charLength - this.charReceived :
                buffer.length;

            // add the new bytes to the char buffer
            buffer.copy(this.charBuffer, this.charReceived, 0, available);
            this.charReceived += available;

            if (this.charReceived < this.charLength) {
                // still not enough chars in this buffer? wait for more ...
                return '';
            }

            // remove bytes belonging to the current character from the buffer
            buffer = buffer.slice(available, buffer.length);

            // get the character that was split
            charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

            // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
            var charCode = charStr.charCodeAt(charStr.length - 1);
            if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                this.charLength += this.surrogateSize;
                charStr = '';
                continue;
            }
            this.charReceived = this.charLength = 0;

            // if there are no more bytes in this buffer, just emit our char
            if (buffer.length === 0) {
                return charStr;
            }
            break;
        }

        // determine and set charLength / charReceived
        this.detectIncompleteChar(buffer);

        var end = buffer.length;
        if (this.charLength) {
            // buffer the incomplete character bytes we got
            buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
            end -= this.charReceived;
        }

        charStr += buffer.toString(this.encoding, 0, end);

        var end = charStr.length - 1;
        var charCode = charStr.charCodeAt(end);
        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
        if (charCode >= 0xD800 && charCode <= 0xDBFF) {
            var size = this.surrogateSize;
            this.charLength += size;
            this.charReceived += size;
            this.charBuffer.copy(this.charBuffer, size, 0, size);
            buffer.copy(this.charBuffer, 0, 0, size);
            return charStr.substring(0, end);
        }

        // or just emit the charStr
        return charStr;
    };

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
    StringDecoder.prototype.detectIncompleteChar = function(buffer) {
        // determine how many bytes we have to check at the end of this buffer
        var i = (buffer.length >= 3) ? 3 : buffer.length;

        // Figure out if one of the last i bytes of our buffer announces an
        // incomplete char.
        for (; i > 0; i--) {
            var c = buffer[buffer.length - i];

            // See http://en.wikipedia.org/wiki/UTF-8#Description

            // 110XXXXX
            if (i == 1 && c >> 5 == 0x06) {
                this.charLength = 2;
                break;
            }

            // 1110XXXX
            if (i <= 2 && c >> 4 == 0x0E) {
                this.charLength = 3;
                break;
            }

            // 11110XXX
            if (i <= 3 && c >> 3 == 0x1E) {
                this.charLength = 4;
                break;
            }
        }
        this.charReceived = i;
    };

    StringDecoder.prototype.end = function(buffer) {
        var res = '';
        if (buffer && buffer.length)
            res = this.write(buffer);

        if (this.charReceived) {
            var cr = this.charReceived;
            var buf = this.charBuffer;
            var enc = this.encoding;
            res += buf.slice(0, cr).toString(enc);
        }

        return res;
    };

    function passThroughWrite(buffer) {
        return buffer.toString(this.encoding);
    }

    function utf16DetectIncompleteChar(buffer) {
        this.charReceived = buffer.length % 2;
        this.charLength = this.charReceived ? 2 : 0;
    }

    function base64DetectIncompleteChar(buffer) {
        this.charReceived = buffer.length % 3;
        this.charLength = this.charReceived ? 3 : 0;
    }

},{"buffer":5}],154:[function(require,module,exports){
    var nextTick = require('process/browser.js').nextTick;
    var apply = Function.prototype.apply;
    var slice = Array.prototype.slice;
    var immediateIds = {};
    var nextImmediateId = 0;

// DOM APIs, for completeness

    exports.setTimeout = function() {
        return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
    };
    exports.setInterval = function() {
        return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
    };
    exports.clearTimeout =
        exports.clearInterval = function(timeout) { timeout.close(); };

    function Timeout(id, clearFn) {
        this._id = id;
        this._clearFn = clearFn;
    }
    Timeout.prototype.unref = Timeout.prototype.ref = function() {};
    Timeout.prototype.close = function() {
        this._clearFn.call(window, this._id);
    };

// Does not start the time, just sets up the members needed.
    exports.enroll = function(item, msecs) {
        clearTimeout(item._idleTimeoutId);
        item._idleTimeout = msecs;
    };

    exports.unenroll = function(item) {
        clearTimeout(item._idleTimeoutId);
        item._idleTimeout = -1;
    };

    exports._unrefActive = exports.active = function(item) {
        clearTimeout(item._idleTimeoutId);

        var msecs = item._idleTimeout;
        if (msecs >= 0) {
            item._idleTimeoutId = setTimeout(function onTimeout() {
                if (item._onTimeout)
                    item._onTimeout();
            }, msecs);
        }
    };

// That's not how node.js implements it but the exposed api is the same.
    exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
        var id = nextImmediateId++;
        var args = arguments.length < 2 ? false : slice.call(arguments, 1);

        immediateIds[id] = true;

        nextTick(function onNextTick() {
            if (immediateIds[id]) {
                // fn.call() is faster so we optimize for the common use-case
                // @see http://jsperf.com/call-apply-segu
                if (args) {
                    fn.apply(null, args);
                } else {
                    fn.call(null);
                }
                // Prevent ids from leaking
                exports.clearImmediate(id);
            }
        });

        return id;
    };

    exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
        delete immediateIds[id];
    };
},{"process/browser.js":155}],155:[function(require,module,exports){
    arguments[4][4][0].apply(exports,arguments)
},{"dup":4}],156:[function(require,module,exports){
    (function (global){

        /**
         * Module exports.
         */

        module.exports = deprecate;

        /**
         * Mark that a method should not be used.
         * Returns a modified function which warns once by default.
         *
         * If `localStorage.noDeprecation = true` is set, then it is a no-op.
         *
         * If `localStorage.throwDeprecation = true` is set, then deprecated functions
         * will throw an Error when invoked.
         *
         * If `localStorage.traceDeprecation = true` is set, then deprecated functions
         * will invoke `console.trace()` instead of `console.error()`.
         *
         * @param {Function} fn - the function to deprecate
         * @param {String} msg - the string to print to the console when `fn` is invoked
         * @returns {Function} a new "deprecated" version of `fn`
         * @api public
         */

        function deprecate (fn, msg) {
            if (config('noDeprecation')) {
                return fn;
            }

            var warned = false;
            function deprecated() {
                if (!warned) {
                    if (config('throwDeprecation')) {
                        throw new Error(msg);
                    } else if (config('traceDeprecation')) {
                        console.trace(msg);
                    } else {
                        console.warn(msg);
                    }
                    warned = true;
                }
                return fn.apply(this, arguments);
            }

            return deprecated;
        }

        /**
         * Checks `localStorage` for boolean values for the given `name`.
         *
         * @param {String} name
         * @returns {Boolean}
         * @api private
         */

        function config (name) {
            // accessing global.localStorage can trigger a DOMException in sandboxed iframes
            try {
                if (!global.localStorage) return false;
            } catch (_) {
                return false;
            }
            var val = global.localStorage[name];
            if (null == val) return false;
            return String(val).toLowerCase() === 'true';
        }

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],157:[function(require,module,exports){
    (function (global){
        ; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
            /**
             * @license
             * Video.js 5.9.2 <http://videojs.com/>
             * Copyright Brightcove, Inc. <https://www.brightcove.com/>
             * Available under Apache License Version 2.0
             * <https://github.com/videojs/video.js/blob/master/LICENSE>
             *
             * Includes vtt.js <https://github.com/mozilla/vtt.js>
             * Available under Apache License Version 2.0
             * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
             */

            (function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.videojs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
                (function (global){
                    var topLevel = typeof global !== 'undefined' ? global :
                        typeof window !== 'undefined' ? window : {}
                    var minDoc = _dereq_('min-document');

                    if (typeof document !== 'undefined') {
                        module.exports = document;
                    } else {
                        var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

                        if (!doccy) {
                            doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
                        }

                        module.exports = doccy;
                    }

                }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

            },{"min-document":3}],2:[function(_dereq_,module,exports){
                (function (global){
                    if (typeof window !== "undefined") {
                        module.exports = window;
                    } else if (typeof global !== "undefined") {
                        module.exports = global;
                    } else if (typeof self !== "undefined"){
                        module.exports = self;
                    } else {
                        module.exports = {};
                    }

                }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

            },{}],3:[function(_dereq_,module,exports){

            },{}],4:[function(_dereq_,module,exports){
                var getNative = _dereq_('../internal/getNative');

                /* Native method references for those with the same name as other `lodash` methods. */
                var nativeNow = getNative(Date, 'now');

                /**
                 * Gets the number of milliseconds that have elapsed since the Unix epoch
                 * (1 January 1970 00:00:00 UTC).
                 *
                 * @static
                 * @memberOf _
                 * @category Date
                 * @example
                 *
                 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
                 * // => logs the number of milliseconds it took for the deferred function to be invoked
                 */
                var now = nativeNow || function() {
                        return new Date().getTime();
                    };

                module.exports = now;

            },{"../internal/getNative":20}],5:[function(_dereq_,module,exports){
                var isObject = _dereq_('../lang/isObject'),
                    now = _dereq_('../date/now');

                /** Used as the `TypeError` message for "Functions" methods. */
                var FUNC_ERROR_TEXT = 'Expected a function';

                /* Native method references for those with the same name as other `lodash` methods. */
                var nativeMax = Math.max;

                /**
                 * Creates a debounced function that delays invoking `func` until after `wait`
                 * milliseconds have elapsed since the last time the debounced function was
                 * invoked. The debounced function comes with a `cancel` method to cancel
                 * delayed invocations. Provide an options object to indicate that `func`
                 * should be invoked on the leading and/or trailing edge of the `wait` timeout.
                 * Subsequent calls to the debounced function return the result of the last
                 * `func` invocation.
                 *
                 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
                 * on the trailing edge of the timeout only if the the debounced function is
                 * invoked more than once during the `wait` timeout.
                 *
                 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
                 * for details over the differences between `_.debounce` and `_.throttle`.
                 *
                 * @static
                 * @memberOf _
                 * @category Function
                 * @param {Function} func The function to debounce.
                 * @param {number} [wait=0] The number of milliseconds to delay.
                 * @param {Object} [options] The options object.
                 * @param {boolean} [options.leading=false] Specify invoking on the leading
                 *  edge of the timeout.
                 * @param {number} [options.maxWait] The maximum time `func` is allowed to be
                 *  delayed before it's invoked.
                 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
                 *  edge of the timeout.
                 * @returns {Function} Returns the new debounced function.
                 * @example
                 *
                 * // avoid costly calculations while the window size is in flux
                 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
                 *
                 * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
                 * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
                 *
                 * // ensure `batchLog` is invoked once after 1 second of debounced calls
                 * var source = new EventSource('/stream');
                 * jQuery(source).on('message', _.debounce(batchLog, 250, {
 *   'maxWait': 1000
 * }));
                 *
                 * // cancel a debounced call
                 * var todoChanges = _.debounce(batchLog, 1000);
                 * Object.observe(models.todo, todoChanges);
                 *
                 * Object.observe(models, function(changes) {
 *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
 *     todoChanges.cancel();
 *   }
 * }, ['delete']);
                 *
                 * // ...at some point `models.todo` is changed
                 * models.todo.completed = true;
                 *
                 * // ...before 1 second has passed `models.todo` is deleted
                 * // which cancels the debounced `todoChanges` call
                 * delete models.todo;
                 */
                function debounce(func, wait, options) {
                    var args,
                        maxTimeoutId,
                        result,
                        stamp,
                        thisArg,
                        timeoutId,
                        trailingCall,
                        lastCalled = 0,
                        maxWait = false,
                        trailing = true;

                    if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    wait = wait < 0 ? 0 : (+wait || 0);
                    if (options === true) {
                        var leading = true;
                        trailing = false;
                    } else if (isObject(options)) {
                        leading = !!options.leading;
                        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
                        trailing = 'trailing' in options ? !!options.trailing : trailing;
                    }

                    function cancel() {
                        if (timeoutId) {
                            clearTimeout(timeoutId);
                        }
                        if (maxTimeoutId) {
                            clearTimeout(maxTimeoutId);
                        }
                        lastCalled = 0;
                        maxTimeoutId = timeoutId = trailingCall = undefined;
                    }

                    function complete(isCalled, id) {
                        if (id) {
                            clearTimeout(id);
                        }
                        maxTimeoutId = timeoutId = trailingCall = undefined;
                        if (isCalled) {
                            lastCalled = now();
                            result = func.apply(thisArg, args);
                            if (!timeoutId && !maxTimeoutId) {
                                args = thisArg = undefined;
                            }
                        }
                    }

                    function delayed() {
                        var remaining = wait - (now() - stamp);
                        if (remaining <= 0 || remaining > wait) {
                            complete(trailingCall, maxTimeoutId);
                        } else {
                            timeoutId = setTimeout(delayed, remaining);
                        }
                    }

                    function maxDelayed() {
                        complete(trailing, timeoutId);
                    }

                    function debounced() {
                        args = arguments;
                        stamp = now();
                        thisArg = this;
                        trailingCall = trailing && (timeoutId || !leading);

                        if (maxWait === false) {
                            var leadingCall = leading && !timeoutId;
                        } else {
                            if (!maxTimeoutId && !leading) {
                                lastCalled = stamp;
                            }
                            var remaining = maxWait - (stamp - lastCalled),
                                isCalled = remaining <= 0 || remaining > maxWait;

                            if (isCalled) {
                                if (maxTimeoutId) {
                                    maxTimeoutId = clearTimeout(maxTimeoutId);
                                }
                                lastCalled = stamp;
                                result = func.apply(thisArg, args);
                            }
                            else if (!maxTimeoutId) {
                                maxTimeoutId = setTimeout(maxDelayed, remaining);
                            }
                        }
                        if (isCalled && timeoutId) {
                            timeoutId = clearTimeout(timeoutId);
                        }
                        else if (!timeoutId && wait !== maxWait) {
                            timeoutId = setTimeout(delayed, wait);
                        }
                        if (leadingCall) {
                            isCalled = true;
                            result = func.apply(thisArg, args);
                        }
                        if (isCalled && !timeoutId && !maxTimeoutId) {
                            args = thisArg = undefined;
                        }
                        return result;
                    }
                    debounced.cancel = cancel;
                    return debounced;
                }

                module.exports = debounce;

            },{"../date/now":4,"../lang/isObject":33}],6:[function(_dereq_,module,exports){
                /** Used as the `TypeError` message for "Functions" methods. */
                var FUNC_ERROR_TEXT = 'Expected a function';

                /* Native method references for those with the same name as other `lodash` methods. */
                var nativeMax = Math.max;

                /**
                 * Creates a function that invokes `func` with the `this` binding of the
                 * created function and arguments from `start` and beyond provided as an array.
                 *
                 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
                 *
                 * @static
                 * @memberOf _
                 * @category Function
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var say = _.restParam(function(what, names) {
 *   return what + ' ' + _.initial(names).join(', ') +
 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
 * });
                 *
                 * say('hello', 'fred', 'barney', 'pebbles');
                 * // => 'hello fred, barney, & pebbles'
                 */
                function restParam(func, start) {
                    if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
                    return function() {
                        var args = arguments,
                            index = -1,
                            length = nativeMax(args.length - start, 0),
                            rest = Array(length);

                        while (++index < length) {
                            rest[index] = args[start + index];
                        }
                        switch (start) {
                            case 0: return func.call(this, rest);
                            case 1: return func.call(this, args[0], rest);
                            case 2: return func.call(this, args[0], args[1], rest);
                        }
                        var otherArgs = Array(start + 1);
                        index = -1;
                        while (++index < start) {
                            otherArgs[index] = args[index];
                        }
                        otherArgs[start] = rest;
                        return func.apply(this, otherArgs);
                    };
                }

                module.exports = restParam;

            },{}],7:[function(_dereq_,module,exports){
                var debounce = _dereq_('./debounce'),
                    isObject = _dereq_('../lang/isObject');

                /** Used as the `TypeError` message for "Functions" methods. */
                var FUNC_ERROR_TEXT = 'Expected a function';

                /**
                 * Creates a throttled function that only invokes `func` at most once per
                 * every `wait` milliseconds. The throttled function comes with a `cancel`
                 * method to cancel delayed invocations. Provide an options object to indicate
                 * that `func` should be invoked on the leading and/or trailing edge of the
                 * `wait` timeout. Subsequent calls to the throttled function return the
                 * result of the last `func` call.
                 *
                 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
                 * on the trailing edge of the timeout only if the the throttled function is
                 * invoked more than once during the `wait` timeout.
                 *
                 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
                 * for details over the differences between `_.throttle` and `_.debounce`.
                 *
                 * @static
                 * @memberOf _
                 * @category Function
                 * @param {Function} func The function to throttle.
                 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
                 * @param {Object} [options] The options object.
                 * @param {boolean} [options.leading=true] Specify invoking on the leading
                 *  edge of the timeout.
                 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
                 *  edge of the timeout.
                 * @returns {Function} Returns the new throttled function.
                 * @example
                 *
                 * // avoid excessively updating the position while scrolling
                 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
                 *
                 * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
                 * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
 *   'trailing': false
 * }));
                 *
                 * // cancel a trailing throttled call
                 * jQuery(window).on('popstate', throttled.cancel);
                 */
                function throttle(func, wait, options) {
                    var leading = true,
                        trailing = true;

                    if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    if (options === false) {
                        leading = false;
                    } else if (isObject(options)) {
                        leading = 'leading' in options ? !!options.leading : leading;
                        trailing = 'trailing' in options ? !!options.trailing : trailing;
                    }
                    return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
                }

                module.exports = throttle;

            },{"../lang/isObject":33,"./debounce":5}],8:[function(_dereq_,module,exports){
                /**
                 * Copies the values of `source` to `array`.
                 *
                 * @private
                 * @param {Array} source The array to copy values from.
                 * @param {Array} [array=[]] The array to copy values to.
                 * @returns {Array} Returns `array`.
                 */
                function arrayCopy(source, array) {
                    var index = -1,
                        length = source.length;

                    array || (array = Array(length));
                    while (++index < length) {
                        array[index] = source[index];
                    }
                    return array;
                }

                module.exports = arrayCopy;

            },{}],9:[function(_dereq_,module,exports){
                /**
                 * A specialized version of `_.forEach` for arrays without support for callback
                 * shorthands and `this` binding.
                 *
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns `array`.
                 */
                function arrayEach(array, iteratee) {
                    var index = -1,
                        length = array.length;

                    while (++index < length) {
                        if (iteratee(array[index], index, array) === false) {
                            break;
                        }
                    }
                    return array;
                }

                module.exports = arrayEach;

            },{}],10:[function(_dereq_,module,exports){
                /**
                 * Copies properties of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy properties from.
                 * @param {Array} props The property names to copy.
                 * @param {Object} [object={}] The object to copy properties to.
                 * @returns {Object} Returns `object`.
                 */
                function baseCopy(source, props, object) {
                    object || (object = {});

                    var index = -1,
                        length = props.length;

                    while (++index < length) {
                        var key = props[index];
                        object[key] = source[key];
                    }
                    return object;
                }

                module.exports = baseCopy;

            },{}],11:[function(_dereq_,module,exports){
                var createBaseFor = _dereq_('./createBaseFor');

                /**
                 * The base implementation of `baseForIn` and `baseForOwn` which iterates
                 * over `object` properties returned by `keysFunc` invoking `iteratee` for
                 * each property. Iteratee functions may exit iteration early by explicitly
                 * returning `false`.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @returns {Object} Returns `object`.
                 */
                var baseFor = createBaseFor();

                module.exports = baseFor;

            },{"./createBaseFor":18}],12:[function(_dereq_,module,exports){
                var baseFor = _dereq_('./baseFor'),
                    keysIn = _dereq_('../object/keysIn');

                /**
                 * The base implementation of `_.forIn` without support for callback
                 * shorthands and `this` binding.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 */
                function baseForIn(object, iteratee) {
                    return baseFor(object, iteratee, keysIn);
                }

                module.exports = baseForIn;

            },{"../object/keysIn":39,"./baseFor":11}],13:[function(_dereq_,module,exports){
                var arrayEach = _dereq_('./arrayEach'),
                    baseMergeDeep = _dereq_('./baseMergeDeep'),
                    isArray = _dereq_('../lang/isArray'),
                    isArrayLike = _dereq_('./isArrayLike'),
                    isObject = _dereq_('../lang/isObject'),
                    isObjectLike = _dereq_('./isObjectLike'),
                    isTypedArray = _dereq_('../lang/isTypedArray'),
                    keys = _dereq_('../object/keys');

                /**
                 * The base implementation of `_.merge` without support for argument juggling,
                 * multiple sources, and `this` binding `customizer` functions.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {Function} [customizer] The function to customize merged values.
                 * @param {Array} [stackA=[]] Tracks traversed source objects.
                 * @param {Array} [stackB=[]] Associates values with source counterparts.
                 * @returns {Object} Returns `object`.
                 */
                function baseMerge(object, source, customizer, stackA, stackB) {
                    if (!isObject(object)) {
                        return object;
                    }
                    var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
                        props = isSrcArr ? undefined : keys(source);

                    arrayEach(props || source, function(srcValue, key) {
                        if (props) {
                            key = srcValue;
                            srcValue = source[key];
                        }
                        if (isObjectLike(srcValue)) {
                            stackA || (stackA = []);
                            stackB || (stackB = []);
                            baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
                        }
                        else {
                            var value = object[key],
                                result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
                                isCommon = result === undefined;

                            if (isCommon) {
                                result = srcValue;
                            }
                            if ((result !== undefined || (isSrcArr && !(key in object))) &&
                                (isCommon || (result === result ? (result !== value) : (value === value)))) {
                                object[key] = result;
                            }
                        }
                    });
                    return object;
                }

                module.exports = baseMerge;

            },{"../lang/isArray":30,"../lang/isObject":33,"../lang/isTypedArray":36,"../object/keys":38,"./arrayEach":9,"./baseMergeDeep":14,"./isArrayLike":21,"./isObjectLike":26}],14:[function(_dereq_,module,exports){
                var arrayCopy = _dereq_('./arrayCopy'),
                    isArguments = _dereq_('../lang/isArguments'),
                    isArray = _dereq_('../lang/isArray'),
                    isArrayLike = _dereq_('./isArrayLike'),
                    isPlainObject = _dereq_('../lang/isPlainObject'),
                    isTypedArray = _dereq_('../lang/isTypedArray'),
                    toPlainObject = _dereq_('../lang/toPlainObject');

                /**
                 * A specialized version of `baseMerge` for arrays and objects which performs
                 * deep merges and tracks traversed objects enabling objects with circular
                 * references to be merged.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {string} key The key of the value to merge.
                 * @param {Function} mergeFunc The function to merge values.
                 * @param {Function} [customizer] The function to customize merged values.
                 * @param {Array} [stackA=[]] Tracks traversed source objects.
                 * @param {Array} [stackB=[]] Associates values with source counterparts.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
                    var length = stackA.length,
                        srcValue = source[key];

                    while (length--) {
                        if (stackA[length] == srcValue) {
                            object[key] = stackB[length];
                            return;
                        }
                    }
                    var value = object[key],
                        result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
                        isCommon = result === undefined;

                    if (isCommon) {
                        result = srcValue;
                        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
                            result = isArray(value)
                                ? value
                                : (isArrayLike(value) ? arrayCopy(value) : []);
                        }
                        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                            result = isArguments(value)
                                ? toPlainObject(value)
                                : (isPlainObject(value) ? value : {});
                        }
                        else {
                            isCommon = false;
                        }
                    }
                    // Add the source value to the stack of traversed objects and associate
                    // it with its merged value.
                    stackA.push(srcValue);
                    stackB.push(result);

                    if (isCommon) {
                        // Recursively merge objects and arrays (susceptible to call stack limits).
                        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
                    } else if (result === result ? (result !== value) : (value === value)) {
                        object[key] = result;
                    }
                }

                module.exports = baseMergeDeep;

            },{"../lang/isArguments":29,"../lang/isArray":30,"../lang/isPlainObject":34,"../lang/isTypedArray":36,"../lang/toPlainObject":37,"./arrayCopy":8,"./isArrayLike":21}],15:[function(_dereq_,module,exports){
                var toObject = _dereq_('./toObject');

                /**
                 * The base implementation of `_.property` without support for deep paths.
                 *
                 * @private
                 * @param {string} key The key of the property to get.
                 * @returns {Function} Returns the new function.
                 */
                function baseProperty(key) {
                    return function(object) {
                        return object == null ? undefined : toObject(object)[key];
                    };
                }

                module.exports = baseProperty;

            },{"./toObject":28}],16:[function(_dereq_,module,exports){
                var identity = _dereq_('../utility/identity');

                /**
                 * A specialized version of `baseCallback` which only supports `this` binding
                 * and specifying the number of arguments to provide to `func`.
                 *
                 * @private
                 * @param {Function} func The function to bind.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {number} [argCount] The number of arguments to provide to `func`.
                 * @returns {Function} Returns the callback.
                 */
                function bindCallback(func, thisArg, argCount) {
                    if (typeof func != 'function') {
                        return identity;
                    }
                    if (thisArg === undefined) {
                        return func;
                    }
                    switch (argCount) {
                        case 1: return function(value) {
                            return func.call(thisArg, value);
                        };
                        case 3: return function(value, index, collection) {
                            return func.call(thisArg, value, index, collection);
                        };
                        case 4: return function(accumulator, value, index, collection) {
                            return func.call(thisArg, accumulator, value, index, collection);
                        };
                        case 5: return function(value, other, key, object, source) {
                            return func.call(thisArg, value, other, key, object, source);
                        };
                    }
                    return function() {
                        return func.apply(thisArg, arguments);
                    };
                }

                module.exports = bindCallback;

            },{"../utility/identity":42}],17:[function(_dereq_,module,exports){
                var bindCallback = _dereq_('./bindCallback'),
                    isIterateeCall = _dereq_('./isIterateeCall'),
                    restParam = _dereq_('../function/restParam');

                /**
                 * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
                 *
                 * @private
                 * @param {Function} assigner The function to assign values.
                 * @returns {Function} Returns the new assigner function.
                 */
                function createAssigner(assigner) {
                    return restParam(function(object, sources) {
                        var index = -1,
                            length = object == null ? 0 : sources.length,
                            customizer = length > 2 ? sources[length - 2] : undefined,
                            guard = length > 2 ? sources[2] : undefined,
                            thisArg = length > 1 ? sources[length - 1] : undefined;

                        if (typeof customizer == 'function') {
                            customizer = bindCallback(customizer, thisArg, 5);
                            length -= 2;
                        } else {
                            customizer = typeof thisArg == 'function' ? thisArg : undefined;
                            length -= (customizer ? 1 : 0);
                        }
                        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                            customizer = length < 3 ? undefined : customizer;
                            length = 1;
                        }
                        while (++index < length) {
                            var source = sources[index];
                            if (source) {
                                assigner(object, source, customizer);
                            }
                        }
                        return object;
                    });
                }

                module.exports = createAssigner;

            },{"../function/restParam":6,"./bindCallback":16,"./isIterateeCall":24}],18:[function(_dereq_,module,exports){
                var toObject = _dereq_('./toObject');

                /**
                 * Creates a base function for `_.forIn` or `_.forInRight`.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new base function.
                 */
                function createBaseFor(fromRight) {
                    return function(object, iteratee, keysFunc) {
                        var iterable = toObject(object),
                            props = keysFunc(object),
                            length = props.length,
                            index = fromRight ? length : -1;

                        while ((fromRight ? index-- : ++index < length)) {
                            var key = props[index];
                            if (iteratee(iterable[key], key, iterable) === false) {
                                break;
                            }
                        }
                        return object;
                    };
                }

                module.exports = createBaseFor;

            },{"./toObject":28}],19:[function(_dereq_,module,exports){
                var baseProperty = _dereq_('./baseProperty');

                /**
                 * Gets the "length" property value of `object`.
                 *
                 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
                 * that affects Safari on at least iOS 8.1-8.3 ARM64.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {*} Returns the "length" value.
                 */
                var getLength = baseProperty('length');

                module.exports = getLength;

            },{"./baseProperty":15}],20:[function(_dereq_,module,exports){
                var isNative = _dereq_('../lang/isNative');

                /**
                 * Gets the native function at `key` of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {string} key The key of the method to get.
                 * @returns {*} Returns the function if it's native, else `undefined`.
                 */
                function getNative(object, key) {
                    var value = object == null ? undefined : object[key];
                    return isNative(value) ? value : undefined;
                }

                module.exports = getNative;

            },{"../lang/isNative":32}],21:[function(_dereq_,module,exports){
                var getLength = _dereq_('./getLength'),
                    isLength = _dereq_('./isLength');

                /**
                 * Checks if `value` is array-like.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                 */
                function isArrayLike(value) {
                    return value != null && isLength(getLength(value));
                }

                module.exports = isArrayLike;

            },{"./getLength":19,"./isLength":25}],22:[function(_dereq_,module,exports){
                /**
                 * Checks if `value` is a host object in IE < 9.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
                 */
                var isHostObject = (function() {
                    try {
                        Object({ 'toString': 0 } + '');
                    } catch(e) {
                        return function() { return false; };
                    }
                    return function(value) {
                        // IE < 9 presents many host objects as `Object` objects that can coerce
                        // to strings despite having improperly defined `toString` methods.
                        return typeof value.toString != 'function' && typeof (value + '') == 'string';
                    };
                }());

                module.exports = isHostObject;

            },{}],23:[function(_dereq_,module,exports){
                /** Used to detect unsigned integer values. */
                var reIsUint = /^\d+$/;

                /**
                 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
                 * of an array-like value.
                 */
                var MAX_SAFE_INTEGER = 9007199254740991;

                /**
                 * Checks if `value` is a valid array-like index.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                 */
                function isIndex(value, length) {
                    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
                    length = length == null ? MAX_SAFE_INTEGER : length;
                    return value > -1 && value % 1 == 0 && value < length;
                }

                module.exports = isIndex;

            },{}],24:[function(_dereq_,module,exports){
                var isArrayLike = _dereq_('./isArrayLike'),
                    isIndex = _dereq_('./isIndex'),
                    isObject = _dereq_('../lang/isObject');

                /**
                 * Checks if the provided arguments are from an iteratee call.
                 *
                 * @private
                 * @param {*} value The potential iteratee value argument.
                 * @param {*} index The potential iteratee index or key argument.
                 * @param {*} object The potential iteratee object argument.
                 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
                 */
                function isIterateeCall(value, index, object) {
                    if (!isObject(object)) {
                        return false;
                    }
                    var type = typeof index;
                    if (type == 'number'
                            ? (isArrayLike(object) && isIndex(index, object.length))
                            : (type == 'string' && index in object)) {
                        var other = object[index];
                        return value === value ? (value === other) : (other !== other);
                    }
                    return false;
                }

                module.exports = isIterateeCall;

            },{"../lang/isObject":33,"./isArrayLike":21,"./isIndex":23}],25:[function(_dereq_,module,exports){
                /**
                 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
                 * of an array-like value.
                 */
                var MAX_SAFE_INTEGER = 9007199254740991;

                /**
                 * Checks if `value` is a valid array-like length.
                 *
                 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                 */
                function isLength(value) {
                    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                }

                module.exports = isLength;

            },{}],26:[function(_dereq_,module,exports){
                /**
                 * Checks if `value` is object-like.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                 */
                function isObjectLike(value) {
                    return !!value && typeof value == 'object';
                }

                module.exports = isObjectLike;

            },{}],27:[function(_dereq_,module,exports){
                var isArguments = _dereq_('../lang/isArguments'),
                    isArray = _dereq_('../lang/isArray'),
                    isIndex = _dereq_('./isIndex'),
                    isLength = _dereq_('./isLength'),
                    isString = _dereq_('../lang/isString'),
                    keysIn = _dereq_('../object/keysIn');

                /** Used for native method references. */
                var objectProto = Object.prototype;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /**
                 * A fallback implementation of `Object.keys` which creates an array of the
                 * own enumerable property names of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function shimKeys(object) {
                    var props = keysIn(object),
                        propsLength = props.length,
                        length = propsLength && object.length;

                    var allowIndexes = !!length && isLength(length) &&
                        (isArray(object) || isArguments(object) || isString(object));

                    var index = -1,
                        result = [];

                    while (++index < propsLength) {
                        var key = props[index];
                        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
                            result.push(key);
                        }
                    }
                    return result;
                }

                module.exports = shimKeys;

            },{"../lang/isArguments":29,"../lang/isArray":30,"../lang/isString":35,"../object/keysIn":39,"./isIndex":23,"./isLength":25}],28:[function(_dereq_,module,exports){
                var isObject = _dereq_('../lang/isObject'),
                    isString = _dereq_('../lang/isString'),
                    support = _dereq_('../support');

                /**
                 * Converts `value` to an object if it's not one.
                 *
                 * @private
                 * @param {*} value The value to process.
                 * @returns {Object} Returns the object.
                 */
                function toObject(value) {
                    if (support.unindexedChars && isString(value)) {
                        var index = -1,
                            length = value.length,
                            result = Object(value);

                        while (++index < length) {
                            result[index] = value.charAt(index);
                        }
                        return result;
                    }
                    return isObject(value) ? value : Object(value);
                }

                module.exports = toObject;

            },{"../lang/isObject":33,"../lang/isString":35,"../support":41}],29:[function(_dereq_,module,exports){
                var isArrayLike = _dereq_('../internal/isArrayLike'),
                    isObjectLike = _dereq_('../internal/isObjectLike');

                /** Used for native method references. */
                var objectProto = Object.prototype;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /** Native method references. */
                var propertyIsEnumerable = objectProto.propertyIsEnumerable;

                /**
                 * Checks if `value` is classified as an `arguments` object.
                 *
                 * @static
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
                 * @example
                 *
                 * _.isArguments(function() { return arguments; }());
                 * // => true
                 *
                 * _.isArguments([1, 2, 3]);
                 * // => false
                 */
                function isArguments(value) {
                    return isObjectLike(value) && isArrayLike(value) &&
                        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
                }

                module.exports = isArguments;

            },{"../internal/isArrayLike":21,"../internal/isObjectLike":26}],30:[function(_dereq_,module,exports){
                var getNative = _dereq_('../internal/getNative'),
                    isLength = _dereq_('../internal/isLength'),
                    isObjectLike = _dereq_('../internal/isObjectLike');

                /** `Object#toString` result references. */
                var arrayTag = '[object Array]';

                /** Used for native method references. */
                var objectProto = Object.prototype;

                /**
                 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var objToString = objectProto.toString;

                /* Native method references for those with the same name as other `lodash` methods. */
                var nativeIsArray = getNative(Array, 'isArray');

                /**
                 * Checks if `value` is classified as an `Array` object.
                 *
                 * @static
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
                 * @example
                 *
                 * _.isArray([1, 2, 3]);
                 * // => true
                 *
                 * _.isArray(function() { return arguments; }());
                 * // => false
                 */
                var isArray = nativeIsArray || function(value) {
                        return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
                    };

                module.exports = isArray;

            },{"../internal/getNative":20,"../internal/isLength":25,"../internal/isObjectLike":26}],31:[function(_dereq_,module,exports){
                var isObject = _dereq_('./isObject');

                /** `Object#toString` result references. */
                var funcTag = '[object Function]';

                /** Used for native method references. */
                var objectProto = Object.prototype;

                /**
                 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var objToString = objectProto.toString;

                /**
                 * Checks if `value` is classified as a `Function` object.
                 *
                 * @static
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
                 * @example
                 *
                 * _.isFunction(_);
                 * // => true
                 *
                 * _.isFunction(/abc/);
                 * // => false
                 */
                function isFunction(value) {
                    // The use of `Object#toString` avoids issues with the `typeof` operator
                    // in older versions of Chrome and Safari which return 'function' for regexes
                    // and Safari 8 which returns 'object' for typed array constructors.
                    return isObject(value) && objToString.call(value) == funcTag;
                }

                module.exports = isFunction;

            },{"./isObject":33}],32:[function(_dereq_,module,exports){
                var isFunction = _dereq_('./isFunction'),
                    isHostObject = _dereq_('../internal/isHostObject'),
                    isObjectLike = _dereq_('../internal/isObjectLike');

                /** Used to detect host constructors (Safari > 5). */
                var reIsHostCtor = /^\[object .+?Constructor\]$/;

                /** Used for native method references. */
                var objectProto = Object.prototype;

                /** Used to resolve the decompiled source of functions. */
                var fnToString = Function.prototype.toString;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /** Used to detect if a method is native. */
                var reIsNative = RegExp('^' +
                    fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
                        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
                );

                /**
                 * Checks if `value` is a native function.
                 *
                 * @static
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
                 * @example
                 *
                 * _.isNative(Array.prototype.push);
                 * // => true
                 *
                 * _.isNative(_);
                 * // => false
                 */
                function isNative(value) {
                    if (value == null) {
                        return false;
                    }
                    if (isFunction(value)) {
                        return reIsNative.test(fnToString.call(value));
                    }
                    return isObjectLike(value) && (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
                }

                module.exports = isNative;

            },{"../internal/isHostObject":22,"../internal/isObjectLike":26,"./isFunction":31}],33:[function(_dereq_,module,exports){
                /**
                 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
                 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                 *
                 * @static
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                 * @example
                 *
                 * _.isObject({});
                 * // => true
                 *
                 * _.isObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isObject(1);
                 * // => false
                 */
                function isObject(value) {
                    // Avoid a V8 JIT bug in Chrome 19-20.
                    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
                    var type = typeof value;
                    return !!value && (type == 'object' || type == 'function');
                }

                module.exports = isObject;

            },{}],34:[function(_dereq_,module,exports){
                var baseForIn = _dereq_('../internal/baseForIn'),
                    isArguments = _dereq_('./isArguments'),
                    isHostObject = _dereq_('../internal/isHostObject'),
                    isObjectLike = _dereq_('../internal/isObjectLike'),
                    support = _dereq_('../support');

                /** `Object#toString` result references. */
                var objectTag = '[object Object]';

                /** Used for native method references. */
                var objectProto = Object.prototype;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /**
                 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var objToString = objectProto.toString;

                /**
                 * Checks if `value` is a plain object, that is, an object created by the
                 * `Object` constructor or one with a `[[Prototype]]` of `null`.
                 *
                 * **Note:** This method assumes objects created by the `Object` constructor
                 * have no inherited enumerable properties.
                 *
                 * @static
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                 * @example
                 *
                 * function Foo() {
 *   this.a = 1;
 * }
                 *
                 * _.isPlainObject(new Foo);
                 * // => false
                 *
                 * _.isPlainObject([1, 2, 3]);
                 * // => false
                 *
                 * _.isPlainObject({ 'x': 0, 'y': 0 });
                 * // => true
                 *
                 * _.isPlainObject(Object.create(null));
                 * // => true
                 */
                function isPlainObject(value) {
                    var Ctor;

                    // Exit early for non `Object` objects.
                    if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isHostObject(value) && !isArguments(value)) ||
                        (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
                        return false;
                    }
                    // IE < 9 iterates inherited properties before own properties. If the first
                    // iterated property is an object's own property then there are no inherited
                    // enumerable properties.
                    var result;
                    if (support.ownLast) {
                        baseForIn(value, function(subValue, key, object) {
                            result = hasOwnProperty.call(object, key);
                            return false;
                        });
                        return result !== false;
                    }
                    // In most environments an object's own properties are iterated before
                    // its inherited properties. If the last iterated property is an object's
                    // own property then there are no inherited enumerable properties.
                    baseForIn(value, function(subValue, key) {
                        result = key;
                    });
                    return result === undefined || hasOwnProperty.call(value, result);
                }

                module.exports = isPlainObject;

            },{"../internal/baseForIn":12,"../internal/isHostObject":22,"../internal/isObjectLike":26,"../support":41,"./isArguments":29}],35:[function(_dereq_,module,exports){
                var isObjectLike = _dereq_('../internal/isObjectLike');

                /** `Object#toString` result references. */
                var stringTag = '[object String]';

                /** Used for native method references. */
                var objectProto = Object.prototype;

                /**
                 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var objToString = objectProto.toString;

                /**
                 * Checks if `value` is classified as a `String` primitive or object.
                 *
                 * @static
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
                 * @example
                 *
                 * _.isString('abc');
                 * // => true
                 *
                 * _.isString(1);
                 * // => false
                 */
                function isString(value) {
                    return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
                }

                module.exports = isString;

            },{"../internal/isObjectLike":26}],36:[function(_dereq_,module,exports){
                var isLength = _dereq_('../internal/isLength'),
                    isObjectLike = _dereq_('../internal/isObjectLike');

                /** `Object#toString` result references. */
                var argsTag = '[object Arguments]',
                    arrayTag = '[object Array]',
                    boolTag = '[object Boolean]',
                    dateTag = '[object Date]',
                    errorTag = '[object Error]',
                    funcTag = '[object Function]',
                    mapTag = '[object Map]',
                    numberTag = '[object Number]',
                    objectTag = '[object Object]',
                    regexpTag = '[object RegExp]',
                    setTag = '[object Set]',
                    stringTag = '[object String]',
                    weakMapTag = '[object WeakMap]';

                var arrayBufferTag = '[object ArrayBuffer]',
                    float32Tag = '[object Float32Array]',
                    float64Tag = '[object Float64Array]',
                    int8Tag = '[object Int8Array]',
                    int16Tag = '[object Int16Array]',
                    int32Tag = '[object Int32Array]',
                    uint8Tag = '[object Uint8Array]',
                    uint8ClampedTag = '[object Uint8ClampedArray]',
                    uint16Tag = '[object Uint16Array]',
                    uint32Tag = '[object Uint32Array]';

                /** Used to identify `toStringTag` values of typed arrays. */
                var typedArrayTags = {};
                typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
                    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
                        typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                            typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                                typedArrayTags[uint32Tag] = true;
                typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
                    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
                        typedArrayTags[dateTag] = typedArrayTags[errorTag] =
                            typedArrayTags[funcTag] = typedArrayTags[mapTag] =
                                typedArrayTags[numberTag] = typedArrayTags[objectTag] =
                                    typedArrayTags[regexpTag] = typedArrayTags[setTag] =
                                        typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

                /** Used for native method references. */
                var objectProto = Object.prototype;

                /**
                 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var objToString = objectProto.toString;

                /**
                 * Checks if `value` is classified as a typed array.
                 *
                 * @static
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
                 * @example
                 *
                 * _.isTypedArray(new Uint8Array);
                 * // => true
                 *
                 * _.isTypedArray([]);
                 * // => false
                 */
                function isTypedArray(value) {
                    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
                }

                module.exports = isTypedArray;

            },{"../internal/isLength":25,"../internal/isObjectLike":26}],37:[function(_dereq_,module,exports){
                var baseCopy = _dereq_('../internal/baseCopy'),
                    keysIn = _dereq_('../object/keysIn');

                /**
                 * Converts `value` to a plain object flattening inherited enumerable
                 * properties of `value` to own properties of the plain object.
                 *
                 * @static
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {Object} Returns the converted plain object.
                 * @example
                 *
                 * function Foo() {
 *   this.b = 2;
 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.assign({ 'a': 1 }, new Foo);
                 * // => { 'a': 1, 'b': 2 }
                 *
                 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                 * // => { 'a': 1, 'b': 2, 'c': 3 }
                 */
                function toPlainObject(value) {
                    return baseCopy(value, keysIn(value));
                }

                module.exports = toPlainObject;

            },{"../internal/baseCopy":10,"../object/keysIn":39}],38:[function(_dereq_,module,exports){
                var getNative = _dereq_('../internal/getNative'),
                    isArrayLike = _dereq_('../internal/isArrayLike'),
                    isObject = _dereq_('../lang/isObject'),
                    shimKeys = _dereq_('../internal/shimKeys'),
                    support = _dereq_('../support');

                /* Native method references for those with the same name as other `lodash` methods. */
                var nativeKeys = getNative(Object, 'keys');

                /**
                 * Creates an array of the own enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects. See the
                 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
                 * for more details.
                 *
                 * @static
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keys(new Foo);
                 * // => ['a', 'b'] (iteration order is not guaranteed)
                 *
                 * _.keys('hi');
                 * // => ['0', '1']
                 */
                var keys = !nativeKeys ? shimKeys : function(object) {
                    var Ctor = object == null ? undefined : object.constructor;
                    if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
                        (typeof object == 'function' ? support.enumPrototypes : isArrayLike(object))) {
                        return shimKeys(object);
                    }
                    return isObject(object) ? nativeKeys(object) : [];
                };

                module.exports = keys;

            },{"../internal/getNative":20,"../internal/isArrayLike":21,"../internal/shimKeys":27,"../lang/isObject":33,"../support":41}],39:[function(_dereq_,module,exports){
                var arrayEach = _dereq_('../internal/arrayEach'),
                    isArguments = _dereq_('../lang/isArguments'),
                    isArray = _dereq_('../lang/isArray'),
                    isFunction = _dereq_('../lang/isFunction'),
                    isIndex = _dereq_('../internal/isIndex'),
                    isLength = _dereq_('../internal/isLength'),
                    isObject = _dereq_('../lang/isObject'),
                    isString = _dereq_('../lang/isString'),
                    support = _dereq_('../support');

                /** `Object#toString` result references. */
                var arrayTag = '[object Array]',
                    boolTag = '[object Boolean]',
                    dateTag = '[object Date]',
                    errorTag = '[object Error]',
                    funcTag = '[object Function]',
                    numberTag = '[object Number]',
                    objectTag = '[object Object]',
                    regexpTag = '[object RegExp]',
                    stringTag = '[object String]';

                /** Used to fix the JScript `[[DontEnum]]` bug. */
                var shadowProps = [
                    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
                    'toLocaleString', 'toString', 'valueOf'
                ];

                /** Used for native method references. */
                var errorProto = Error.prototype,
                    objectProto = Object.prototype,
                    stringProto = String.prototype;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /**
                 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var objToString = objectProto.toString;

                /** Used to avoid iterating over non-enumerable properties in IE < 9. */
                var nonEnumProps = {};
                nonEnumProps[arrayTag] = nonEnumProps[dateTag] = nonEnumProps[numberTag] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
                nonEnumProps[boolTag] = nonEnumProps[stringTag] = { 'constructor': true, 'toString': true, 'valueOf': true };
                nonEnumProps[errorTag] = nonEnumProps[funcTag] = nonEnumProps[regexpTag] = { 'constructor': true, 'toString': true };
                nonEnumProps[objectTag] = { 'constructor': true };

                arrayEach(shadowProps, function(key) {
                    for (var tag in nonEnumProps) {
                        if (hasOwnProperty.call(nonEnumProps, tag)) {
                            var props = nonEnumProps[tag];
                            props[key] = hasOwnProperty.call(props, key);
                        }
                    }
                });

                /**
                 * Creates an array of the own and inherited enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keysIn(new Foo);
                 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                 */
                function keysIn(object) {
                    if (object == null) {
                        return [];
                    }
                    if (!isObject(object)) {
                        object = Object(object);
                    }
                    var length = object.length;

                    length = (length && isLength(length) &&
                        (isArray(object) || isArguments(object) || isString(object)) && length) || 0;

                    var Ctor = object.constructor,
                        index = -1,
                        proto = (isFunction(Ctor) && Ctor.prototype) || objectProto,
                        isProto = proto === object,
                        result = Array(length),
                        skipIndexes = length > 0,
                        skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error),
                        skipProto = support.enumPrototypes && isFunction(object);

                    while (++index < length) {
                        result[index] = (index + '');
                    }
                    // lodash skips the `constructor` property when it infers it's iterating
                    // over a `prototype` object because IE < 9 can't set the `[[Enumerable]]`
                    // attribute of an existing property and the `constructor` property of a
                    // prototype defaults to non-enumerable.
                    for (var key in object) {
                        if (!(skipProto && key == 'prototype') &&
                            !(skipErrorProps && (key == 'message' || key == 'name')) &&
                            !(skipIndexes && isIndex(key, length)) &&
                            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                            result.push(key);
                        }
                    }
                    if (support.nonEnumShadows && object !== objectProto) {
                        var tag = object === stringProto ? stringTag : (object === errorProto ? errorTag : objToString.call(object)),
                            nonEnums = nonEnumProps[tag] || nonEnumProps[objectTag];

                        if (tag == objectTag) {
                            proto = objectProto;
                        }
                        length = shadowProps.length;
                        while (length--) {
                            key = shadowProps[length];
                            var nonEnum = nonEnums[key];
                            if (!(isProto && nonEnum) &&
                                (nonEnum ? hasOwnProperty.call(object, key) : object[key] !== proto[key])) {
                                result.push(key);
                            }
                        }
                    }
                    return result;
                }

                module.exports = keysIn;

            },{"../internal/arrayEach":9,"../internal/isIndex":23,"../internal/isLength":25,"../lang/isArguments":29,"../lang/isArray":30,"../lang/isFunction":31,"../lang/isObject":33,"../lang/isString":35,"../support":41}],40:[function(_dereq_,module,exports){
                var baseMerge = _dereq_('../internal/baseMerge'),
                    createAssigner = _dereq_('../internal/createAssigner');

                /**
                 * Recursively merges own enumerable properties of the source object(s), that
                 * don't resolve to `undefined` into the destination object. Subsequent sources
                 * overwrite property assignments of previous sources. If `customizer` is
                 * provided it's invoked to produce the merged values of the destination and
                 * source properties. If `customizer` returns `undefined` merging is handled
                 * by the method instead. The `customizer` is bound to `thisArg` and invoked
                 * with five arguments: (objectValue, sourceValue, key, object, source).
                 *
                 * @static
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @param {*} [thisArg] The `this` binding of `customizer`.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var users = {
 *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
 * };
                 *
                 * var ages = {
 *   'data': [{ 'age': 36 }, { 'age': 40 }]
 * };
                 *
                 * _.merge(users, ages);
                 * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
                 *
                 * // using a customizer callback
                 * var object = {
 *   'fruits': ['apple'],
 *   'vegetables': ['beet']
 * };
                 *
                 * var other = {
 *   'fruits': ['banana'],
 *   'vegetables': ['carrot']
 * };
                 *
                 * _.merge(object, other, function(a, b) {
 *   if (_.isArray(a)) {
 *     return a.concat(b);
 *   }
 * });
                 * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
                 */
                var merge = createAssigner(baseMerge);

                module.exports = merge;

            },{"../internal/baseMerge":13,"../internal/createAssigner":17}],41:[function(_dereq_,module,exports){
                /** Used for native method references. */
                var arrayProto = Array.prototype,
                    errorProto = Error.prototype,
                    objectProto = Object.prototype;

                /** Native method references. */
                var propertyIsEnumerable = objectProto.propertyIsEnumerable,
                    splice = arrayProto.splice;

                /**
                 * An object environment feature flags.
                 *
                 * @static
                 * @memberOf _
                 * @type Object
                 */
                var support = {};

                (function(x) {
                    var Ctor = function() { this.x = x; },
                        object = { '0': x, 'length': x },
                        props = [];

                    Ctor.prototype = { 'valueOf': x, 'y': x };
                    for (var key in new Ctor) { props.push(key); }

                    /**
                     * Detect if `name` or `message` properties of `Error.prototype` are
                     * enumerable by default (IE < 9, Safari < 5.1).
                     *
                     * @memberOf _.support
                     * @type boolean
                     */
                    support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') ||
                        propertyIsEnumerable.call(errorProto, 'name');

                    /**
                     * Detect if `prototype` properties are enumerable by default.
                     *
                     * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
                     * (if the prototype or a property on the prototype has been set)
                     * incorrectly set the `[[Enumerable]]` value of a function's `prototype`
                     * property to `true`.
                     *
                     * @memberOf _.support
                     * @type boolean
                     */
                    support.enumPrototypes = propertyIsEnumerable.call(Ctor, 'prototype');

                    /**
                     * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
                     *
                     * In IE < 9 an object's own properties, shadowing non-enumerable ones,
                     * are made non-enumerable as well (a.k.a the JScript `[[DontEnum]]` bug).
                     *
                     * @memberOf _.support
                     * @type boolean
                     */
                    support.nonEnumShadows = !/valueOf/.test(props);

                    /**
                     * Detect if own properties are iterated after inherited properties (IE < 9).
                     *
                     * @memberOf _.support
                     * @type boolean
                     */
                    support.ownLast = props[0] != 'x';

                    /**
                     * Detect if `Array#shift` and `Array#splice` augment array-like objects
                     * correctly.
                     *
                     * Firefox < 10, compatibility modes of IE 8, and IE < 9 have buggy Array
                     * `shift()` and `splice()` functions that fail to remove the last element,
                     * `value[0]`, of array-like objects even though the "length" property is
                     * set to `0`. The `shift()` method is buggy in compatibility modes of IE 8,
                     * while `splice()` is buggy regardless of mode in IE < 9.
                     *
                     * @memberOf _.support
                     * @type boolean
                     */
                    support.spliceObjects = (splice.call(object, 0, 1), !object[0]);

                    /**
                     * Detect lack of support for accessing string characters by index.
                     *
                     * IE < 8 can't access characters by index. IE 8 can only access characters
                     * by index on string literals, not string objects.
                     *
                     * @memberOf _.support
                     * @type boolean
                     */
                    support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';
                }(1, 0));

                module.exports = support;

            },{}],42:[function(_dereq_,module,exports){
                /**
                 * This method returns the first argument provided to it.
                 *
                 * @static
                 * @memberOf _
                 * @category Utility
                 * @param {*} value Any value.
                 * @returns {*} Returns `value`.
                 * @example
                 *
                 * var object = { 'user': 'fred' };
                 *
                 * _.identity(object) === object;
                 * // => true
                 */
                function identity(value) {
                    return value;
                }

                module.exports = identity;

            },{}],43:[function(_dereq_,module,exports){
                'use strict';

                var keys = _dereq_('object-keys');

                module.exports = function hasSymbols() {
                    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
                    if (typeof Symbol.iterator === 'symbol') { return true; }

                    var obj = {};
                    var sym = Symbol('test');
                    if (typeof sym === 'string') { return false; }

                    // temp disabled per https://github.com/ljharb/object.assign/issues/17
                    // if (sym instanceof Symbol) { return false; }
                    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
                    // if (!(Object(sym) instanceof Symbol)) { return false; }

                    var symVal = 42;
                    obj[sym] = symVal;
                    for (sym in obj) { return false; }
                    if (keys(obj).length !== 0) { return false; }
                    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

                    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

                    var syms = Object.getOwnPropertySymbols(obj);
                    if (syms.length !== 1 || syms[0] !== sym) { return false; }

                    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

                    if (typeof Object.getOwnPropertyDescriptor === 'function') {
                        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
                        if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
                    }

                    return true;
                };

            },{"object-keys":50}],44:[function(_dereq_,module,exports){
                'use strict';

// modified from https://github.com/es-shims/es6-shim
                var keys = _dereq_('object-keys');
                var bind = _dereq_('function-bind');
                var canBeObject = function (obj) {
                    return typeof obj !== 'undefined' && obj !== null;
                };
                var hasSymbols = _dereq_('./hasSymbols')();
                var toObject = Object;
                var push = bind.call(Function.call, Array.prototype.push);
                var propIsEnumerable = bind.call(Function.call, Object.prototype.propertyIsEnumerable);

                module.exports = function assign(target, source1) {
                    if (!canBeObject(target)) { throw new TypeError('target must be an object'); }
                    var objTarget = toObject(target);
                    var s, source, i, props, syms, value, key;
                    for (s = 1; s < arguments.length; ++s) {
                        source = toObject(arguments[s]);
                        props = keys(source);
                        if (hasSymbols && Object.getOwnPropertySymbols) {
                            syms = Object.getOwnPropertySymbols(source);
                            for (i = 0; i < syms.length; ++i) {
                                key = syms[i];
                                if (propIsEnumerable(source, key)) {
                                    push(props, key);
                                }
                            }
                        }
                        for (i = 0; i < props.length; ++i) {
                            key = props[i];
                            value = source[key];
                            if (propIsEnumerable(source, key)) {
                                objTarget[key] = value;
                            }
                        }
                    }
                    return objTarget;
                };

            },{"./hasSymbols":43,"function-bind":49,"object-keys":50}],45:[function(_dereq_,module,exports){
                'use strict';

                var defineProperties = _dereq_('define-properties');

                var implementation = _dereq_('./implementation');
                var getPolyfill = _dereq_('./polyfill');
                var shim = _dereq_('./shim');

                defineProperties(implementation, {
                    implementation: implementation,
                    getPolyfill: getPolyfill,
                    shim: shim
                });

                module.exports = implementation;

            },{"./implementation":44,"./polyfill":52,"./shim":53,"define-properties":46}],46:[function(_dereq_,module,exports){
                'use strict';

                var keys = _dereq_('object-keys');
                var foreach = _dereq_('foreach');
                var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

                var toStr = Object.prototype.toString;

                var isFunction = function (fn) {
                    return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
                };

                var arePropertyDescriptorsSupported = function () {
                    var obj = {};
                    try {
                        Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
                        /* eslint-disable no-unused-vars, no-restricted-syntax */
                        for (var _ in obj) { return false; }
                        /* eslint-enable no-unused-vars, no-restricted-syntax */
                        return obj.x === obj;
                    } catch (e) { /* this is IE 8. */
                        return false;
                    }
                };
                var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

                var defineProperty = function (object, name, value, predicate) {
                    if (name in object && (!isFunction(predicate) || !predicate())) {
                        return;
                    }
                    if (supportsDescriptors) {
                        Object.defineProperty(object, name, {
                            configurable: true,
                            enumerable: false,
                            value: value,
                            writable: true
                        });
                    } else {
                        object[name] = value;
                    }
                };

                var defineProperties = function (object, map) {
                    var predicates = arguments.length > 2 ? arguments[2] : {};
                    var props = keys(map);
                    if (hasSymbols) {
                        props = props.concat(Object.getOwnPropertySymbols(map));
                    }
                    foreach(props, function (name) {
                        defineProperty(object, name, map[name], predicates[name]);
                    });
                };

                defineProperties.supportsDescriptors = !!supportsDescriptors;

                module.exports = defineProperties;

            },{"foreach":47,"object-keys":50}],47:[function(_dereq_,module,exports){

                var hasOwn = Object.prototype.hasOwnProperty;
                var toString = Object.prototype.toString;

                module.exports = function forEach (obj, fn, ctx) {
                    if (toString.call(fn) !== '[object Function]') {
                        throw new TypeError('iterator must be a function');
                    }
                    var l = obj.length;
                    if (l === +l) {
                        for (var i = 0; i < l; i++) {
                            fn.call(ctx, obj[i], i, obj);
                        }
                    } else {
                        for (var k in obj) {
                            if (hasOwn.call(obj, k)) {
                                fn.call(ctx, obj[k], k, obj);
                            }
                        }
                    }
                };


            },{}],48:[function(_dereq_,module,exports){
                var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
                var slice = Array.prototype.slice;
                var toStr = Object.prototype.toString;
                var funcType = '[object Function]';

                module.exports = function bind(that) {
                    var target = this;
                    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
                        throw new TypeError(ERROR_MESSAGE + target);
                    }
                    var args = slice.call(arguments, 1);

                    var bound;
                    var binder = function () {
                        if (this instanceof bound) {
                            var result = target.apply(
                                this,
                                args.concat(slice.call(arguments))
                            );
                            if (Object(result) === result) {
                                return result;
                            }
                            return this;
                        } else {
                            return target.apply(
                                that,
                                args.concat(slice.call(arguments))
                            );
                        }
                    };

                    var boundLength = Math.max(0, target.length - args.length);
                    var boundArgs = [];
                    for (var i = 0; i < boundLength; i++) {
                        boundArgs.push('$' + i);
                    }

                    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

                    if (target.prototype) {
                        var Empty = function Empty() {};
                        Empty.prototype = target.prototype;
                        bound.prototype = new Empty();
                        Empty.prototype = null;
                    }

                    return bound;
                };

            },{}],49:[function(_dereq_,module,exports){
                var implementation = _dereq_('./implementation');

                module.exports = Function.prototype.bind || implementation;

            },{"./implementation":48}],50:[function(_dereq_,module,exports){
                'use strict';

// modified from https://github.com/es-shims/es5-shim
                var has = Object.prototype.hasOwnProperty;
                var toStr = Object.prototype.toString;
                var slice = Array.prototype.slice;
                var isArgs = _dereq_('./isArguments');
                var hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString');
                var hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype');
                var dontEnums = [
                    'toString',
                    'toLocaleString',
                    'valueOf',
                    'hasOwnProperty',
                    'isPrototypeOf',
                    'propertyIsEnumerable',
                    'constructor'
                ];
                var equalsConstructorPrototype = function (o) {
                    var ctor = o.constructor;
                    return ctor && ctor.prototype === o;
                };
                var blacklistedKeys = {
                    $console: true,
                    $frame: true,
                    $frameElement: true,
                    $frames: true,
                    $parent: true,
                    $self: true,
                    $webkitIndexedDB: true,
                    $webkitStorageInfo: true,
                    $window: true
                };
                var hasAutomationEqualityBug = (function () {
                    /* global window */
                    if (typeof window === 'undefined') { return false; }
                    for (var k in window) {
                        try {
                            if (!blacklistedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
                                try {
                                    equalsConstructorPrototype(window[k]);
                                } catch (e) {
                                    return true;
                                }
                            }
                        } catch (e) {
                            return true;
                        }
                    }
                    return false;
                }());
                var equalsConstructorPrototypeIfNotBuggy = function (o) {
                    /* global window */
                    if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
                        return equalsConstructorPrototype(o);
                    }
                    try {
                        return equalsConstructorPrototype(o);
                    } catch (e) {
                        return false;
                    }
                };

                var keysShim = function keys(object) {
                    var isObject = object !== null && typeof object === 'object';
                    var isFunction = toStr.call(object) === '[object Function]';
                    var isArguments = isArgs(object);
                    var isString = isObject && toStr.call(object) === '[object String]';
                    var theKeys = [];

                    if (!isObject && !isFunction && !isArguments) {
                        throw new TypeError('Object.keys called on a non-object');
                    }

                    var skipProto = hasProtoEnumBug && isFunction;
                    if (isString && object.length > 0 && !has.call(object, 0)) {
                        for (var i = 0; i < object.length; ++i) {
                            theKeys.push(String(i));
                        }
                    }

                    if (isArguments && object.length > 0) {
                        for (var j = 0; j < object.length; ++j) {
                            theKeys.push(String(j));
                        }
                    } else {
                        for (var name in object) {
                            if (!(skipProto && name === 'prototype') && has.call(object, name)) {
                                theKeys.push(String(name));
                            }
                        }
                    }

                    if (hasDontEnumBug) {
                        var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

                        for (var k = 0; k < dontEnums.length; ++k) {
                            if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
                                theKeys.push(dontEnums[k]);
                            }
                        }
                    }
                    return theKeys;
                };

                keysShim.shim = function shimObjectKeys() {
                    if (Object.keys) {
                        var keysWorksWithArguments = (function () {
                            // Safari 5.0 bug
                            return (Object.keys(arguments) || '').length === 2;
                        }(1, 2));
                        if (!keysWorksWithArguments) {
                            var originalKeys = Object.keys;
                            Object.keys = function keys(object) {
                                if (isArgs(object)) {
                                    return originalKeys(slice.call(object));
                                } else {
                                    return originalKeys(object);
                                }
                            };
                        }
                    } else {
                        Object.keys = keysShim;
                    }
                    return Object.keys || keysShim;
                };

                module.exports = keysShim;

            },{"./isArguments":51}],51:[function(_dereq_,module,exports){
                'use strict';

                var toStr = Object.prototype.toString;

                module.exports = function isArguments(value) {
                    var str = toStr.call(value);
                    var isArgs = str === '[object Arguments]';
                    if (!isArgs) {
                        isArgs = str !== '[object Array]' &&
                            value !== null &&
                            typeof value === 'object' &&
                            typeof value.length === 'number' &&
                            value.length >= 0 &&
                            toStr.call(value.callee) === '[object Function]';
                    }
                    return isArgs;
                };

            },{}],52:[function(_dereq_,module,exports){
                'use strict';

                var implementation = _dereq_('./implementation');

                var lacksProperEnumerationOrder = function () {
                    if (!Object.assign) {
                        return false;
                    }
                    // v8, specifically in node 4.x, has a bug with incorrect property enumeration order
                    // note: this does not detect the bug unless there's 20 characters
                    var str = 'abcdefghijklmnopqrst';
                    var letters = str.split('');
                    var map = {};
                    for (var i = 0; i < letters.length; ++i) {
                        map[letters[i]] = letters[i];
                    }
                    var obj = Object.assign({}, map);
                    var actual = '';
                    for (var k in obj) {
                        actual += k;
                    }
                    return str !== actual;
                };

                var assignHasPendingExceptions = function () {
                    if (!Object.assign || !Object.preventExtensions) {
                        return false;
                    }
                    // Firefox 37 still has "pending exception" logic in its Object.assign implementation,
                    // which is 72% slower than our shim, and Firefox 40's native implementation.
                    var thrower = Object.preventExtensions({ 1: 2 });
                    try {
                        Object.assign(thrower, 'xy');
                    } catch (e) {
                        return thrower[1] === 'y';
                    }
                };

                module.exports = function getPolyfill() {
                    if (!Object.assign) {
                        return implementation;
                    }
                    if (lacksProperEnumerationOrder()) {
                        return implementation;
                    }
                    if (assignHasPendingExceptions()) {
                        return implementation;
                    }
                    return Object.assign;
                };

            },{"./implementation":44}],53:[function(_dereq_,module,exports){
                'use strict';

                var define = _dereq_('define-properties');
                var getPolyfill = _dereq_('./polyfill');

                module.exports = function shimAssign() {
                    var polyfill = getPolyfill();
                    define(
                        Object,
                        { assign: polyfill },
                        { assign: function () { return Object.assign !== polyfill; } }
                    );
                    return polyfill;
                };

            },{"./polyfill":52,"define-properties":46}],54:[function(_dereq_,module,exports){
                module.exports = SafeParseTuple

                function SafeParseTuple(obj, reviver) {
                    var json
                    var error = null

                    try {
                        json = JSON.parse(obj, reviver)
                    } catch (err) {
                        error = err
                    }

                    return [error, json]
                }

            },{}],55:[function(_dereq_,module,exports){
                function clean (s) {
                    return s.replace(/\n\r?\s*/g, '')
                }


                module.exports = function tsml (sa) {
                    var s = ''
                        , i = 0

                    for (; i < arguments.length; i++)
                        s += clean(sa[i]) + (arguments[i + 1] || '')

                    return s
                }
            },{}],56:[function(_dereq_,module,exports){
                "use strict";
                var window = _dereq_("global/window")
                var once = _dereq_("once")
                var isFunction = _dereq_("is-function")
                var parseHeaders = _dereq_("parse-headers")
                var xtend = _dereq_("xtend")

                module.exports = createXHR
                createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
                createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest

                forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
                    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
                        options = initParams(uri, options, callback)
                        options.method = method.toUpperCase()
                        return _createXHR(options)
                    }
                })

                function forEachArray(array, iterator) {
                    for (var i = 0; i < array.length; i++) {
                        iterator(array[i])
                    }
                }

                function isEmpty(obj){
                    for(var i in obj){
                        if(obj.hasOwnProperty(i)) return false
                    }
                    return true
                }

                function initParams(uri, options, callback) {
                    var params = uri

                    if (isFunction(options)) {
                        callback = options
                        if (typeof uri === "string") {
                            params = {uri:uri}
                        }
                    } else {
                        params = xtend(options, {uri: uri})
                    }

                    params.callback = callback
                    return params
                }

                function createXHR(uri, options, callback) {
                    options = initParams(uri, options, callback)
                    return _createXHR(options)
                }

                function _createXHR(options) {
                    var callback = options.callback
                    if(typeof callback === "undefined"){
                        throw new Error("callback argument missing")
                    }
                    callback = once(callback)

                    function readystatechange() {
                        if (xhr.readyState === 4) {
                            loadFunc()
                        }
                    }

                    function getBody() {
                        // Chrome with requestType=blob throws errors arround when even testing access to responseText
                        var body = undefined

                        if (xhr.response) {
                            body = xhr.response
                        } else if (xhr.responseType === "text" || !xhr.responseType) {
                            body = xhr.responseText || xhr.responseXML
                        }

                        if (isJson) {
                            try {
                                body = JSON.parse(body)
                            } catch (e) {}
                        }

                        return body
                    }

                    var failureResponse = {
                        body: undefined,
                        headers: {},
                        statusCode: 0,
                        method: method,
                        url: uri,
                        rawRequest: xhr
                    }

                    function errorFunc(evt) {
                        clearTimeout(timeoutTimer)
                        if(!(evt instanceof Error)){
                            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
                        }
                        evt.statusCode = 0
                        callback(evt, failureResponse)
                    }

                    // will load the data & process the response in a special response object
                    function loadFunc() {
                        if (aborted) return
                        var status
                        clearTimeout(timeoutTimer)
                        if(options.useXDR && xhr.status===undefined) {
                            //IE8 CORS GET successful response doesn't have a status field, but body is fine
                            status = 200
                        } else {
                            status = (xhr.status === 1223 ? 204 : xhr.status)
                        }
                        var response = failureResponse
                        var err = null

                        if (status !== 0){
                            response = {
                                body: getBody(),
                                statusCode: status,
                                method: method,
                                headers: {},
                                url: uri,
                                rawRequest: xhr
                            }
                            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
                                response.headers = parseHeaders(xhr.getAllResponseHeaders())
                            }
                        } else {
                            err = new Error("Internal XMLHttpRequest Error")
                        }
                        callback(err, response, response.body)

                    }

                    var xhr = options.xhr || null

                    if (!xhr) {
                        if (options.cors || options.useXDR) {
                            xhr = new createXHR.XDomainRequest()
                        }else{
                            xhr = new createXHR.XMLHttpRequest()
                        }
                    }

                    var key
                    var aborted
                    var uri = xhr.url = options.uri || options.url
                    var method = xhr.method = options.method || "GET"
                    var body = options.body || options.data || null
                    var headers = xhr.headers = options.headers || {}
                    var sync = !!options.sync
                    var isJson = false
                    var timeoutTimer

                    if ("json" in options) {
                        isJson = true
                        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
                        if (method !== "GET" && method !== "HEAD") {
                            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
                            body = JSON.stringify(options.json)
                        }
                    }

                    xhr.onreadystatechange = readystatechange
                    xhr.onload = loadFunc
                    xhr.onerror = errorFunc
                    // IE9 must have onprogress be set to a unique function.
                    xhr.onprogress = function () {
                        // IE must die
                    }
                    xhr.ontimeout = errorFunc
                    xhr.open(method, uri, !sync, options.username, options.password)
                    //has to be after open
                    if(!sync) {
                        xhr.withCredentials = !!options.withCredentials
                    }
                    // Cannot set timeout with sync request
                    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
                    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
                    if (!sync && options.timeout > 0 ) {
                        timeoutTimer = setTimeout(function(){
                            aborted=true//IE9 may still call readystatechange
                            xhr.abort("timeout")
                            var e = new Error("XMLHttpRequest timeout")
                            e.code = "ETIMEDOUT"
                            errorFunc(e)
                        }, options.timeout )
                    }

                    if (xhr.setRequestHeader) {
                        for(key in headers){
                            if(headers.hasOwnProperty(key)){
                                xhr.setRequestHeader(key, headers[key])
                            }
                        }
                    } else if (options.headers && !isEmpty(options.headers)) {
                        throw new Error("Headers cannot be set on an XDomainRequest object")
                    }

                    if ("responseType" in options) {
                        xhr.responseType = options.responseType
                    }

                    if ("beforeSend" in options &&
                        typeof options.beforeSend === "function"
                    ) {
                        options.beforeSend(xhr)
                    }

                    xhr.send(body)

                    return xhr


                }

                function noop() {}

            },{"global/window":2,"is-function":57,"once":58,"parse-headers":61,"xtend":62}],57:[function(_dereq_,module,exports){
                module.exports = isFunction

                var toString = Object.prototype.toString

                function isFunction (fn) {
                    var string = toString.call(fn)
                    return string === '[object Function]' ||
                        (typeof fn === 'function' && string !== '[object RegExp]') ||
                        (typeof window !== 'undefined' &&
                            // IE8 and below
                        (fn === window.setTimeout ||
                        fn === window.alert ||
                        fn === window.confirm ||
                        fn === window.prompt))
                };

            },{}],58:[function(_dereq_,module,exports){
                module.exports = once

                once.proto = once(function () {
                    Object.defineProperty(Function.prototype, 'once', {
                        value: function () {
                            return once(this)
                        },
                        configurable: true
                    })
                })

                function once (fn) {
                    var called = false
                    return function () {
                        if (called) return
                        called = true
                        return fn.apply(this, arguments)
                    }
                }

            },{}],59:[function(_dereq_,module,exports){
                var isFunction = _dereq_('is-function')

                module.exports = forEach

                var toString = Object.prototype.toString
                var hasOwnProperty = Object.prototype.hasOwnProperty

                function forEach(list, iterator, context) {
                    if (!isFunction(iterator)) {
                        throw new TypeError('iterator must be a function')
                    }

                    if (arguments.length < 3) {
                        context = this
                    }

                    if (toString.call(list) === '[object Array]')
                        forEachArray(list, iterator, context)
                    else if (typeof list === 'string')
                        forEachString(list, iterator, context)
                    else
                        forEachObject(list, iterator, context)
                }

                function forEachArray(array, iterator, context) {
                    for (var i = 0, len = array.length; i < len; i++) {
                        if (hasOwnProperty.call(array, i)) {
                            iterator.call(context, array[i], i, array)
                        }
                    }
                }

                function forEachString(string, iterator, context) {
                    for (var i = 0, len = string.length; i < len; i++) {
                        // no such thing as a sparse string.
                        iterator.call(context, string.charAt(i), i, string)
                    }
                }

                function forEachObject(object, iterator, context) {
                    for (var k in object) {
                        if (hasOwnProperty.call(object, k)) {
                            iterator.call(context, object[k], k, object)
                        }
                    }
                }

            },{"is-function":57}],60:[function(_dereq_,module,exports){

                exports = module.exports = trim;

                function trim(str){
                    return str.replace(/^\s*|\s*$/g, '');
                }

                exports.left = function(str){
                    return str.replace(/^\s*/, '');
                };

                exports.right = function(str){
                    return str.replace(/\s*$/, '');
                };

            },{}],61:[function(_dereq_,module,exports){
                var trim = _dereq_('trim')
                    , forEach = _dereq_('for-each')
                    , isArray = function(arg) {
                    return Object.prototype.toString.call(arg) === '[object Array]';
                }

                module.exports = function (headers) {
                    if (!headers)
                        return {}

                    var result = {}

                    forEach(
                        trim(headers).split('\n')
                        , function (row) {
                            var index = row.indexOf(':')
                                , key = trim(row.slice(0, index)).toLowerCase()
                                , value = trim(row.slice(index + 1))

                            if (typeof(result[key]) === 'undefined') {
                                result[key] = value
                            } else if (isArray(result[key])) {
                                result[key].push(value)
                            } else {
                                result[key] = [ result[key], value ]
                            }
                        }
                    )

                    return result
                }
            },{"for-each":59,"trim":60}],62:[function(_dereq_,module,exports){
                module.exports = extend

                var hasOwnProperty = Object.prototype.hasOwnProperty;

                function extend() {
                    var target = {}

                    for (var i = 0; i < arguments.length; i++) {
                        var source = arguments[i]

                        for (var key in source) {
                            if (hasOwnProperty.call(source, key)) {
                                target[key] = source[key]
                            }
                        }
                    }

                    return target
                }

            },{}],63:[function(_dereq_,module,exports){
                /**
                 * @file big-play-button.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _buttonJs = _dereq_('./button.js');

                var _buttonJs2 = _interopRequireDefault(_buttonJs);

                var _componentJs = _dereq_('./component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                /**
                 * Initial play button. Shows before the video has played. The hiding of the
                 * big play button is done via CSS and player states.
                 *
                 * @param {Object} player  Main Player
                 * @param {Object=} options Object of option names and values
                 * @extends Button
                 * @class BigPlayButton
                 */

                var BigPlayButton = (function (_Button) {
                    _inherits(BigPlayButton, _Button);

                    function BigPlayButton(player, options) {
                        _classCallCheck(this, BigPlayButton);

                        _Button.call(this, player, options);
                    }

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-big-play-button';
                    };

                    /**
                     * Handles click for play
                     *
                     * @method handleClick
                     */

                    BigPlayButton.prototype.handleClick = function handleClick() {
                        this.player_.play();
                    };

                    return BigPlayButton;
                })(_buttonJs2['default']);

                BigPlayButton.prototype.controlText_ = 'Play Video';

                _componentJs2['default'].registerComponent('BigPlayButton', BigPlayButton);
                exports['default'] = BigPlayButton;
                module.exports = exports['default'];

            },{"./button.js":64,"./component.js":67}],64:[function(_dereq_,module,exports){
                /**
                 * @file button.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _clickableComponentJs = _dereq_('./clickable-component.js');

                var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

                var _component = _dereq_('./component');

                var _component2 = _interopRequireDefault(_component);

                var _utilsEventsJs = _dereq_('./utils/events.js');

                var Events = _interopRequireWildcard(_utilsEventsJs);

                var _utilsFnJs = _dereq_('./utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsLogJs = _dereq_('./utils/log.js');

                var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var _objectAssign = _dereq_('object.assign');

                var _objectAssign2 = _interopRequireDefault(_objectAssign);

                /**
                 * Base class for all buttons
                 *
                 * @param {Object} player  Main Player
                 * @param {Object=} options Object of option names and values
                 * @extends ClickableComponent
                 * @class Button
                 */

                var Button = (function (_ClickableComponent) {
                    _inherits(Button, _ClickableComponent);

                    function Button(player, options) {
                        _classCallCheck(this, Button);

                        _ClickableComponent.call(this, player, options);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @param {String=} type Element's node type. e.g. 'div'
                     * @param {Object=} props An object of properties that should be set on the element
                     * @param {Object=} attributes An object of attributes that should be set on the element
                     * @return {Element}
                     * @method createEl
                     */

                    Button.prototype.createEl = function createEl() {
                        var tag = arguments.length <= 0 || arguments[0] === undefined ? 'button' : arguments[0];
                        var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                        var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                        props = _objectAssign2['default']({
                            className: this.buildCSSClass()
                        }, props);

                        if (tag !== 'button') {
                            _utilsLogJs2['default'].warn('Creating a Button with an HTML element of ' + tag + ' is deprecated; use ClickableComponent instead.');

                            // Add properties for clickable element which is not a native HTML button
                            props = _objectAssign2['default']({
                                tabIndex: 0
                            }, props);

                            // Add ARIA attributes for clickable element which is not a native HTML button
                            attributes = _objectAssign2['default']({
                                role: 'button'
                            }, attributes);
                        }

                        // Add attributes for button element
                        attributes = _objectAssign2['default']({
                            type: 'button', // Necessary since the default button type is "submit"
                            'aria-live': 'polite' // let the screen reader user know that the text of the button may change
                        }, attributes);

                        var el = _component2['default'].prototype.createEl.call(this, tag, props, attributes);

                        this.createControlTextEl(el);

                        return el;
                    };

                    /**
                     * Adds a child component inside this button
                     *
                     * @param {String|Component} child The class name or instance of a child to add
                     * @param {Object=} options Options, including options to be passed to children of the child.
                     * @return {Component} The child component (created by this process if a string was used)
                     * @deprecated
                     * @method addChild
                     */

                    Button.prototype.addChild = function addChild(child) {
                        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                        var className = this.constructor.name;
                        _utilsLogJs2['default'].warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');

                        // Avoid the error message generated by ClickableComponent's addChild method
                        return _component2['default'].prototype.addChild.call(this, child, options);
                    };

                    /**
                     * Handle KeyPress (document level) - Extend with specific functionality for button
                     *
                     * @method handleKeyPress
                     */

                    Button.prototype.handleKeyPress = function handleKeyPress(event) {
                        // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.
                        if (event.which === 32 || event.which === 13) {} else {
                            _ClickableComponent.prototype.handleKeyPress.call(this, event); // Pass keypress handling up for unsupported keys
                        }
                    };

                    return Button;
                })(_clickableComponentJs2['default']);

                _component2['default'].registerComponent('Button', Button);
                exports['default'] = Button;
                module.exports = exports['default'];

            },{"./clickable-component.js":65,"./component":67,"./utils/events.js":135,"./utils/fn.js":136,"./utils/log.js":139,"global/document":1,"object.assign":45}],65:[function(_dereq_,module,exports){
                /**
                 * @file button.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _component = _dereq_('./component');

                var _component2 = _interopRequireDefault(_component);

                var _utilsDomJs = _dereq_('./utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsEventsJs = _dereq_('./utils/events.js');

                var Events = _interopRequireWildcard(_utilsEventsJs);

                var _utilsFnJs = _dereq_('./utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsLogJs = _dereq_('./utils/log.js');

                var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var _objectAssign = _dereq_('object.assign');

                var _objectAssign2 = _interopRequireDefault(_objectAssign);

                /**
                 * Clickable Component which is clickable or keyboard actionable, but is not a native HTML button
                 *
                 * @param {Object} player  Main Player
                 * @param {Object=} options Object of option names and values
                 * @extends Component
                 * @class ClickableComponent
                 */

                var ClickableComponent = (function (_Component) {
                    _inherits(ClickableComponent, _Component);

                    function ClickableComponent(player, options) {
                        _classCallCheck(this, ClickableComponent);

                        _Component.call(this, player, options);

                        this.emitTapEvents();

                        this.on('tap', this.handleClick);
                        this.on('click', this.handleClick);
                        this.on('focus', this.handleFocus);
                        this.on('blur', this.handleBlur);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @param {String=} type Element's node type. e.g. 'div'
                     * @param {Object=} props An object of properties that should be set on the element
                     * @param {Object=} attributes An object of attributes that should be set on the element
                     * @return {Element}
                     * @method createEl
                     */

                    ClickableComponent.prototype.createEl = function createEl() {
                        var tag = arguments.length <= 0 || arguments[0] === undefined ? 'div' : arguments[0];
                        var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                        var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                        props = _objectAssign2['default']({
                            className: this.buildCSSClass(),
                            tabIndex: 0
                        }, props);

                        if (tag === 'button') {
                            _utilsLogJs2['default'].error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');
                        }

                        // Add ARIA attributes for clickable element which is not a native HTML button
                        attributes = _objectAssign2['default']({
                            role: 'button',
                            'aria-live': 'polite' // let the screen reader user know that the text of the element may change
                        }, attributes);

                        var el = _Component.prototype.createEl.call(this, tag, props, attributes);

                        this.createControlTextEl(el);

                        return el;
                    };

                    /**
                     * create control text
                     *
                     * @param {Element} el Parent element for the control text
                     * @return {Element}
                     * @method controlText
                     */

                    ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {
                        this.controlTextEl_ = Dom.createEl('span', {
                            className: 'vjs-control-text'
                        });

                        if (el) {
                            el.appendChild(this.controlTextEl_);
                        }

                        this.controlText(this.controlText_);

                        return this.controlTextEl_;
                    };

                    /**
                     * Controls text - both request and localize
                     *
                     * @param {String} text Text for element
                     * @return {String}
                     * @method controlText
                     */

                    ClickableComponent.prototype.controlText = function controlText(text) {
                        if (!text) return this.controlText_ || 'Need Text';

                        this.controlText_ = text;
                        this.controlTextEl_.innerHTML = this.localize(this.controlText_);

                        return this;
                    };

                    /**
                     * Allows sub components to stack CSS class names
                     *
                     * @return {String}
                     * @method buildCSSClass
                     */

                    ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);
                    };

                    /**
                     * Adds a child component inside this clickable-component
                     *
                     * @param {String|Component} child The class name or instance of a child to add
                     * @param {Object=} options Options, including options to be passed to children of the child.
                     * @return {Component} The child component (created by this process if a string was used)
                     * @method addChild
                     */

                    ClickableComponent.prototype.addChild = function addChild(child) {
                        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                        // TODO: Fix adding an actionable child to a ClickableComponent; currently
                        // it will cause issues with assistive technology (e.g. screen readers)
                        // which support ARIA, since an element with role="button" cannot have
                        // actionable child elements.

                        //let className = this.constructor.name;
                        //log.warn(`Adding a child to a ClickableComponent (${className}) can cause issues with assistive technology which supports ARIA, since an element with role="button" cannot have actionable child elements.`);

                        return _Component.prototype.addChild.call(this, child, options);
                    };

                    /**
                     * Enable the component element
                     *
                     * @return {Component}
                     * @method enable
                     */

                    ClickableComponent.prototype.enable = function enable() {
                        this.removeClass('vjs-disabled');
                        this.el_.setAttribute('aria-disabled', 'false');
                        return this;
                    };

                    /**
                     * Disable the component element
                     *
                     * @return {Component}
                     * @method disable
                     */

                    ClickableComponent.prototype.disable = function disable() {
                        this.addClass('vjs-disabled');
                        this.el_.setAttribute('aria-disabled', 'true');
                        return this;
                    };

                    /**
                     * Handle Click - Override with specific functionality for component
                     *
                     * @method handleClick
                     */

                    ClickableComponent.prototype.handleClick = function handleClick() {};

                    /**
                     * Handle Focus - Add keyboard functionality to element
                     *
                     * @method handleFocus
                     */

                    ClickableComponent.prototype.handleFocus = function handleFocus() {
                        Events.on(_globalDocument2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));
                    };

                    /**
                     * Handle KeyPress (document level) - Trigger click when Space or Enter key is pressed
                     *
                     * @method handleKeyPress
                     */

                    ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {
                        // Support Space (32) or Enter (13) key operation to fire a click event
                        if (event.which === 32 || event.which === 13) {
                            event.preventDefault();
                            this.handleClick(event);
                        } else if (_Component.prototype.handleKeyPress) {
                            _Component.prototype.handleKeyPress.call(this, event); // Pass keypress handling up for unsupported keys
                        }
                    };

                    /**
                     * Handle Blur - Remove keyboard triggers
                     *
                     * @method handleBlur
                     */

                    ClickableComponent.prototype.handleBlur = function handleBlur() {
                        Events.off(_globalDocument2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));
                    };

                    return ClickableComponent;
                })(_component2['default']);

                _component2['default'].registerComponent('ClickableComponent', ClickableComponent);
                exports['default'] = ClickableComponent;
                module.exports = exports['default'];

            },{"./component":67,"./utils/dom.js":134,"./utils/events.js":135,"./utils/fn.js":136,"./utils/log.js":139,"global/document":1,"object.assign":45}],66:[function(_dereq_,module,exports){
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _button = _dereq_('./button');

                var _button2 = _interopRequireDefault(_button);

                var _component = _dereq_('./component');

                var _component2 = _interopRequireDefault(_component);

                /**
                 * The `CloseButton` component is a button which fires a "close" event
                 * when it is activated.
                 *
                 * @extends Button
                 * @class CloseButton
                 */

                var CloseButton = (function (_Button) {
                    _inherits(CloseButton, _Button);

                    function CloseButton(player, options) {
                        _classCallCheck(this, CloseButton);

                        _Button.call(this, player, options);
                        this.controlText(options && options.controlText || this.localize('Close'));
                    }

                    CloseButton.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);
                    };

                    CloseButton.prototype.handleClick = function handleClick() {
                        this.trigger({ type: 'close', bubbles: false });
                    };

                    return CloseButton;
                })(_button2['default']);

                _component2['default'].registerComponent('CloseButton', CloseButton);
                exports['default'] = CloseButton;
                module.exports = exports['default'];

            },{"./button":64,"./component":67}],67:[function(_dereq_,module,exports){
                /**
                 * @file component.js
                 *
                 * Player Component - Base class for all UI objects
                 */

                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _utilsDomJs = _dereq_('./utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsFnJs = _dereq_('./utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsGuidJs = _dereq_('./utils/guid.js');

                var Guid = _interopRequireWildcard(_utilsGuidJs);

                var _utilsEventsJs = _dereq_('./utils/events.js');

                var Events = _interopRequireWildcard(_utilsEventsJs);

                var _utilsLogJs = _dereq_('./utils/log.js');

                var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

                var _utilsToTitleCaseJs = _dereq_('./utils/to-title-case.js');

                var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

                var _objectAssign = _dereq_('object.assign');

                var _objectAssign2 = _interopRequireDefault(_objectAssign);

                var _utilsMergeOptionsJs = _dereq_('./utils/merge-options.js');

                var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);

                /**
                 * Base UI Component class
                 * Components are embeddable UI objects that are represented by both a
                 * javascript object and an element in the DOM. They can be children of other
                 * components, and can have many children themselves.
                 * ```js
                 *     // adding a button to the player
                 *     var button = player.addChild('button');
                 *     button.el(); // -> button element
                 * ```
                 * ```html
                 *     <div class="video-js">
                 *       <div class="vjs-button">Button</div>
                 *     </div>
                 * ```
                 * Components are also event targets.
                 * ```js
                 *     button.on('click', function(){
 *       console.log('Button Clicked!');
 *     });
                 *     button.trigger('customevent');
                 * ```
                 *
                 * @param {Object} player  Main Player
                 * @param {Object=} options Object of option names and values
                 * @param {Function=} ready    Ready callback function
                 * @class Component
                 */

                var Component = (function () {
                    function Component(player, options, ready) {
                        _classCallCheck(this, Component);

                        // The component might be the player itself and we can't pass `this` to super
                        if (!player && this.play) {
                            this.player_ = player = this; // eslint-disable-line
                        } else {
                            this.player_ = player;
                        }

                        // Make a copy of prototype.options_ to protect against overriding defaults
                        this.options_ = _utilsMergeOptionsJs2['default']({}, this.options_);

                        // Updated options with supplied options
                        options = this.options_ = _utilsMergeOptionsJs2['default'](this.options_, options);

                        // Get ID from options or options element if one is supplied
                        this.id_ = options.id || options.el && options.el.id;

                        // If there was no ID from the options, generate one
                        if (!this.id_) {
                            // Don't require the player ID function in the case of mock players
                            var id = player && player.id && player.id() || 'no_player';

                            this.id_ = id + '_component_' + Guid.newGUID();
                        }

                        this.name_ = options.name || null;

                        // Create element if one wasn't provided in options
                        if (options.el) {
                            this.el_ = options.el;
                        } else if (options.createEl !== false) {
                            this.el_ = this.createEl();
                        }

                        this.children_ = [];
                        this.childIndex_ = {};
                        this.childNameIndex_ = {};

                        // Add any child components in options
                        if (options.initChildren !== false) {
                            this.initChildren();
                        }

                        this.ready(ready);
                        // Don't want to trigger ready here or it will before init is actually
                        // finished for all children that run this constructor

                        if (options.reportTouchActivity !== false) {
                            this.enableTouchActivity();
                        }
                    }

                    /**
                     * Dispose of the component and all child components
                     *
                     * @method dispose
                     */

                    Component.prototype.dispose = function dispose() {
                        this.trigger({ type: 'dispose', bubbles: false });

                        // Dispose all children.
                        if (this.children_) {
                            for (var i = this.children_.length - 1; i >= 0; i--) {
                                if (this.children_[i].dispose) {
                                    this.children_[i].dispose();
                                }
                            }
                        }

                        // Delete child references
                        this.children_ = null;
                        this.childIndex_ = null;
                        this.childNameIndex_ = null;

                        // Remove all event listeners.
                        this.off();

                        // Remove element from DOM
                        if (this.el_.parentNode) {
                            this.el_.parentNode.removeChild(this.el_);
                        }

                        Dom.removeElData(this.el_);
                        this.el_ = null;
                    };

                    /**
                     * Return the component's player
                     *
                     * @return {Player}
                     * @method player
                     */

                    Component.prototype.player = function player() {
                        return this.player_;
                    };

                    /**
                     * Deep merge of options objects
                     * Whenever a property is an object on both options objects
                     * the two properties will be merged using mergeOptions.
                     *
                     * ```js
                     *     Parent.prototype.options_ = {
   *       optionSet: {
   *         'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },
   *         'childTwo': {},
   *         'childThree': {}
   *       }
   *     }
                     *     newOptions = {
   *       optionSet: {
   *         'childOne': { 'foo': 'baz', 'abc': '123' }
   *         'childTwo': null,
   *         'childFour': {}
   *       }
   *     }
                     *
                     *     this.options(newOptions);
                     * ```
                     * RESULT
                     * ```js
                     *     {
   *       optionSet: {
   *         'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },
   *         'childTwo': null, // Disabled. Won't be initialized.
   *         'childThree': {},
   *         'childFour': {}
   *       }
   *     }
                     * ```
                     *
                     * @param  {Object} obj Object of new option values
                     * @return {Object}     A NEW object of this.options_ and obj merged
                     * @method options
                     */

                    Component.prototype.options = function options(obj) {
                        _utilsLogJs2['default'].warn('this.options() has been deprecated and will be moved to the constructor in 6.0');

                        if (!obj) {
                            return this.options_;
                        }

                        this.options_ = _utilsMergeOptionsJs2['default'](this.options_, obj);
                        return this.options_;
                    };

                    /**
                     * Get the component's DOM element
                     * ```js
                     *     var domEl = myComponent.el();
                     * ```
                     *
                     * @return {Element}
                     * @method el
                     */

                    Component.prototype.el = function el() {
                        return this.el_;
                    };

                    /**
                     * Create the component's DOM element
                     *
                     * @param  {String=} tagName  Element's node type. e.g. 'div'
                     * @param  {Object=} properties An object of properties that should be set
                     * @param  {Object=} attributes An object of attributes that should be set
                     * @return {Element}
                     * @method createEl
                     */

                    Component.prototype.createEl = function createEl(tagName, properties, attributes) {
                        return Dom.createEl(tagName, properties, attributes);
                    };

                    Component.prototype.localize = function localize(string) {
                        var code = this.player_.language && this.player_.language();
                        var languages = this.player_.languages && this.player_.languages();

                        if (!code || !languages) {
                            return string;
                        }

                        var language = languages[code];

                        if (language && language[string]) {
                            return language[string];
                        }

                        var primaryCode = code.split('-')[0];
                        var primaryLang = languages[primaryCode];

                        if (primaryLang && primaryLang[string]) {
                            return primaryLang[string];
                        }

                        return string;
                    };

                    /**
                     * Return the component's DOM element where children are inserted.
                     * Will either be the same as el() or a new element defined in createEl().
                     *
                     * @return {Element}
                     * @method contentEl
                     */

                    Component.prototype.contentEl = function contentEl() {
                        return this.contentEl_ || this.el_;
                    };

                    /**
                     * Get the component's ID
                     * ```js
                     *     var id = myComponent.id();
                     * ```
                     *
                     * @return {String}
                     * @method id
                     */

                    Component.prototype.id = function id() {
                        return this.id_;
                    };

                    /**
                     * Get the component's name. The name is often used to reference the component.
                     * ```js
                     *     var name = myComponent.name();
                     * ```
                     *
                     * @return {String}
                     * @method name
                     */

                    Component.prototype.name = function name() {
                        return this.name_;
                    };

                    /**
                     * Get an array of all child components
                     * ```js
                     *     var kids = myComponent.children();
                     * ```
                     *
                     * @return {Array} The children
                     * @method children
                     */

                    Component.prototype.children = function children() {
                        return this.children_;
                    };

                    /**
                     * Returns a child component with the provided ID
                     *
                     * @return {Component}
                     * @method getChildById
                     */

                    Component.prototype.getChildById = function getChildById(id) {
                        return this.childIndex_[id];
                    };

                    /**
                     * Returns a child component with the provided name
                     *
                     * @return {Component}
                     * @method getChild
                     */

                    Component.prototype.getChild = function getChild(name) {
                        return this.childNameIndex_[name];
                    };

                    /**
                     * Adds a child component inside this component
                     * ```js
                     *     myComponent.el();
                     *     // -> <div class='my-component'></div>
                     *     myComponent.children();
                     *     // [empty array]
                     *
                     *     var myButton = myComponent.addChild('MyButton');
                     *     // -> <div class='my-component'><div class="my-button">myButton<div></div>
                     *     // -> myButton === myComponent.children()[0];
                     * ```
                     * Pass in options for child constructors and options for children of the child
                     * ```js
                     *     var myButton = myComponent.addChild('MyButton', {
   *       text: 'Press Me',
   *       buttonChildExample: {
   *         buttonChildOption: true
   *       }
   *     });
                     * ```
                     *
                     * @param {String|Component} child The class name or instance of a child to add
                     * @param {Object=} options Options, including options to be passed to children of the child.
                     * @param {Number} index into our children array to attempt to add the child
                     * @return {Component} The child component (created by this process if a string was used)
                     * @method addChild
                     */

                    Component.prototype.addChild = function addChild(child) {
                        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                        var index = arguments.length <= 2 || arguments[2] === undefined ? this.children_.length : arguments[2];

                        var component = undefined;
                        var componentName = undefined;

                        // If child is a string, create nt with options
                        if (typeof child === 'string') {
                            componentName = child;

                            // Options can also be specified as a boolean, so convert to an empty object if false.
                            if (!options) {
                                options = {};
                            }

                            // Same as above, but true is deprecated so show a warning.
                            if (options === true) {
                                _utilsLogJs2['default'].warn('Initializing a child component with `true` is deprecated. Children should be defined in an array when possible, but if necessary use an object instead of `true`.');
                                options = {};
                            }

                            // If no componentClass in options, assume componentClass is the name lowercased
                            // (e.g. playButton)
                            var componentClassName = options.componentClass || _utilsToTitleCaseJs2['default'](componentName);

                            // Set name through options
                            options.name = componentName;

                            // Create a new object & element for this controls set
                            // If there's no .player_, this is a player
                            var ComponentClass = Component.getComponent(componentClassName);

                            if (!ComponentClass) {
                                throw new Error('Component ' + componentClassName + ' does not exist');
                            }

                            // data stored directly on the videojs object may be
                            // misidentified as a component to retain
                            // backwards-compatibility with 4.x. check to make sure the
                            // component class can be instantiated.
                            if (typeof ComponentClass !== 'function') {
                                return null;
                            }

                            component = new ComponentClass(this.player_ || this, options);

                            // child is a component instance
                        } else {
                            component = child;
                        }

                        this.children_.splice(index, 0, component);

                        if (typeof component.id === 'function') {
                            this.childIndex_[component.id()] = component;
                        }

                        // If a name wasn't used to create the component, check if we can use the
                        // name function of the component
                        componentName = componentName || component.name && component.name();

                        if (componentName) {
                            this.childNameIndex_[componentName] = component;
                        }

                        // Add the UI object's element to the container div (box)
                        // Having an element is not required
                        if (typeof component.el === 'function' && component.el()) {
                            var childNodes = this.contentEl().children;
                            var refNode = childNodes[index] || null;
                            this.contentEl().insertBefore(component.el(), refNode);
                        }

                        // Return so it can stored on parent object if desired.
                        return component;
                    };

                    /**
                     * Remove a child component from this component's list of children, and the
                     * child component's element from this component's element
                     *
                     * @param  {Component} component Component to remove
                     * @method removeChild
                     */

                    Component.prototype.removeChild = function removeChild(component) {
                        if (typeof component === 'string') {
                            component = this.getChild(component);
                        }

                        if (!component || !this.children_) {
                            return;
                        }

                        var childFound = false;

                        for (var i = this.children_.length - 1; i >= 0; i--) {
                            if (this.children_[i] === component) {
                                childFound = true;
                                this.children_.splice(i, 1);
                                break;
                            }
                        }

                        if (!childFound) {
                            return;
                        }

                        this.childIndex_[component.id()] = null;
                        this.childNameIndex_[component.name()] = null;

                        var compEl = component.el();

                        if (compEl && compEl.parentNode === this.contentEl()) {
                            this.contentEl().removeChild(component.el());
                        }
                    };

                    /**
                     * Add and initialize default child components from options
                     * ```js
                     *     // when an instance of MyComponent is created, all children in options
                     *     // will be added to the instance by their name strings and options
                     *     MyComponent.prototype.options_ = {
   *       children: [
   *         'myChildComponent'
   *       ],
   *       myChildComponent: {
   *         myChildOption: true
   *       }
   *     };
                     *
                     *     // Or when creating the component
                     *     var myComp = new MyComponent(player, {
   *       children: [
   *         'myChildComponent'
   *       ],
   *       myChildComponent: {
   *         myChildOption: true
   *       }
   *     });
                     * ```
                     * The children option can also be an array of
                     * child options objects (that also include a 'name' key).
                     * This can be used if you have two child components of the
                     * same type that need different options.
                     * ```js
                     *     var myComp = new MyComponent(player, {
   *       children: [
   *         'button',
   *         {
   *           name: 'button',
   *           someOtherOption: true
   *         },
   *         {
   *           name: 'button',
   *           someOtherOption: false
   *         }
   *       ]
   *     });
                     * ```
                     *
                     * @method initChildren
                     */

                    Component.prototype.initChildren = function initChildren() {
                        var _this = this;

                        var children = this.options_.children;

                        if (children) {
                            (function () {
                                // `this` is `parent`
                                var parentOptions = _this.options_;

                                var handleAdd = function handleAdd(child) {
                                    var name = child.name;
                                    var opts = child.opts;

                                    // Allow options for children to be set at the parent options
                                    // e.g. videojs(id, { controlBar: false });
                                    // instead of videojs(id, { children: { controlBar: false });
                                    if (parentOptions[name] !== undefined) {
                                        opts = parentOptions[name];
                                    }

                                    // Allow for disabling default components
                                    // e.g. options['children']['posterImage'] = false
                                    if (opts === false) {
                                        return;
                                    }

                                    // Allow options to be passed as a simple boolean if no configuration
                                    // is necessary.
                                    if (opts === true) {
                                        opts = {};
                                    }

                                    // We also want to pass the original player options to each component as well so they don't need to
                                    // reach back into the player for options later.
                                    opts.playerOptions = _this.options_.playerOptions;

                                    // Create and add the child component.
                                    // Add a direct reference to the child by name on the parent instance.
                                    // If two of the same component are used, different names should be supplied
                                    // for each
                                    var newChild = _this.addChild(name, opts);
                                    if (newChild) {
                                        _this[name] = newChild;
                                    }
                                };

                                // Allow for an array of children details to passed in the options
                                var workingChildren = undefined;
                                var Tech = Component.getComponent('Tech');

                                if (Array.isArray(children)) {
                                    workingChildren = children;
                                } else {
                                    workingChildren = Object.keys(children);
                                }

                                workingChildren
                                // children that are in this.options_ but also in workingChildren  would
                                // give us extra children we do not want. So, we want to filter them out.
                                    .concat(Object.keys(_this.options_).filter(function (child) {
                                        return !workingChildren.some(function (wchild) {
                                            if (typeof wchild === 'string') {
                                                return child === wchild;
                                            } else {
                                                return child === wchild.name;
                                            }
                                        });
                                    })).map(function (child) {
                                    var name = undefined,
                                        opts = undefined;

                                    if (typeof child === 'string') {
                                        name = child;
                                        opts = children[name] || _this.options_[name] || {};
                                    } else {
                                        name = child.name;
                                        opts = child;
                                    }

                                    return { name: name, opts: opts };
                                }).filter(function (child) {
                                    // we have to make sure that child.name isn't in the techOrder since
                                    // techs are registerd as Components but can't aren't compatible
                                    // See https://github.com/videojs/video.js/issues/2772
                                    var c = Component.getComponent(child.opts.componentClass || _utilsToTitleCaseJs2['default'](child.name));
                                    return c && !Tech.isTech(c);
                                }).forEach(handleAdd);
                            })();
                        }
                    };

                    /**
                     * Allows sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    Component.prototype.buildCSSClass = function buildCSSClass() {
                        // Child classes can include a function that does:
                        // return 'CLASS NAME' + this._super();
                        return '';
                    };

                    /**
                     * Add an event listener to this component's element
                     * ```js
                     *     var myFunc = function(){
   *       var myComponent = this;
   *       // Do something when the event is fired
   *     };
                     *
                     *     myComponent.on('eventType', myFunc);
                     * ```
                     * The context of myFunc will be myComponent unless previously bound.
                     * Alternatively, you can add a listener to another element or component.
                     * ```js
                     *     myComponent.on(otherElement, 'eventName', myFunc);
                     *     myComponent.on(otherComponent, 'eventName', myFunc);
                     * ```
                     * The benefit of using this over `VjsEvents.on(otherElement, 'eventName', myFunc)`
                     * and `otherComponent.on('eventName', myFunc)` is that this way the listeners
                     * will be automatically cleaned up when either component is disposed.
                     * It will also bind myComponent as the context of myFunc.
                     * **NOTE**: When using this on elements in the page other than window
                     * and document (both permanent), if you remove the element from the DOM
                     * you need to call `myComponent.trigger(el, 'dispose')` on it to clean up
                     * references to it and allow the browser to garbage collect it.
                     *
                     * @param  {String|Component} first   The event type or other component
                     * @param  {Function|String}      second  The event handler or event type
                     * @param  {Function}             third   The event handler
                     * @return {Component}
                     * @method on
                     */

                    Component.prototype.on = function on(first, second, third) {
                        var _this2 = this;

                        if (typeof first === 'string' || Array.isArray(first)) {
                            Events.on(this.el_, first, Fn.bind(this, second));

                            // Targeting another component or element
                        } else {
                            (function () {
                                var target = first;
                                var type = second;
                                var fn = Fn.bind(_this2, third);

                                // When this component is disposed, remove the listener from the other component
                                var removeOnDispose = function removeOnDispose() {
                                    return _this2.off(target, type, fn);
                                };

                                // Use the same function ID so we can remove it later it using the ID
                                // of the original listener
                                removeOnDispose.guid = fn.guid;
                                _this2.on('dispose', removeOnDispose);

                                // If the other component is disposed first we need to clean the reference
                                // to the other component in this component's removeOnDispose listener
                                // Otherwise we create a memory leak.
                                var cleanRemover = function cleanRemover() {
                                    return _this2.off('dispose', removeOnDispose);
                                };

                                // Add the same function ID so we can easily remove it later
                                cleanRemover.guid = fn.guid;

                                // Check if this is a DOM node
                                if (first.nodeName) {
                                    // Add the listener to the other element
                                    Events.on(target, type, fn);
                                    Events.on(target, 'dispose', cleanRemover);

                                    // Should be a component
                                    // Not using `instanceof Component` because it makes mock players difficult
                                } else if (typeof first.on === 'function') {
                                    // Add the listener to the other component
                                    target.on(type, fn);
                                    target.on('dispose', cleanRemover);
                                }
                            })();
                        }

                        return this;
                    };

                    /**
                     * Remove an event listener from this component's element
                     * ```js
                     *     myComponent.off('eventType', myFunc);
                     * ```
                     * If myFunc is excluded, ALL listeners for the event type will be removed.
                     * If eventType is excluded, ALL listeners will be removed from the component.
                     * Alternatively you can use `off` to remove listeners that were added to other
                     * elements or components using `myComponent.on(otherComponent...`.
                     * In this case both the event type and listener function are REQUIRED.
                     * ```js
                     *     myComponent.off(otherElement, 'eventType', myFunc);
                     *     myComponent.off(otherComponent, 'eventType', myFunc);
                     * ```
                     *
                     * @param  {String=|Component}  first  The event type or other component
                     * @param  {Function=|String}       second The listener function or event type
                     * @param  {Function=}              third  The listener for other component
                     * @return {Component}
                     * @method off
                     */

                    Component.prototype.off = function off(first, second, third) {
                        if (!first || typeof first === 'string' || Array.isArray(first)) {
                            Events.off(this.el_, first, second);
                        } else {
                            var target = first;
                            var type = second;
                            // Ensure there's at least a guid, even if the function hasn't been used
                            var fn = Fn.bind(this, third);

                            // Remove the dispose listener on this component,
                            // which was given the same guid as the event listener
                            this.off('dispose', fn);

                            if (first.nodeName) {
                                // Remove the listener
                                Events.off(target, type, fn);
                                // Remove the listener for cleaning the dispose listener
                                Events.off(target, 'dispose', fn);
                            } else {
                                target.off(type, fn);
                                target.off('dispose', fn);
                            }
                        }

                        return this;
                    };

                    /**
                     * Add an event listener to be triggered only once and then removed
                     * ```js
                     *     myComponent.one('eventName', myFunc);
                     * ```
                     * Alternatively you can add a listener to another element or component
                     * that will be triggered only once.
                     * ```js
                     *     myComponent.one(otherElement, 'eventName', myFunc);
                     *     myComponent.one(otherComponent, 'eventName', myFunc);
                     * ```
                     *
                     * @param  {String|Component}  first   The event type or other component
                     * @param  {Function|String}       second  The listener function or event type
                     * @param  {Function=}             third   The listener function for other component
                     * @return {Component}
                     * @method one
                     */

                    Component.prototype.one = function one(first, second, third) {
                        var _this3 = this,
                            _arguments = arguments;

                        if (typeof first === 'string' || Array.isArray(first)) {
                            Events.one(this.el_, first, Fn.bind(this, second));
                        } else {
                            (function () {
                                var target = first;
                                var type = second;
                                var fn = Fn.bind(_this3, third);

                                var newFunc = function newFunc() {
                                    _this3.off(target, type, newFunc);
                                    fn.apply(null, _arguments);
                                };

                                // Keep the same function ID so we can remove it later
                                newFunc.guid = fn.guid;

                                _this3.on(target, type, newFunc);
                            })();
                        }

                        return this;
                    };

                    /**
                     * Trigger an event on an element
                     * ```js
                     *     myComponent.trigger('eventName');
                     *     myComponent.trigger({'type':'eventName'});
                     *     myComponent.trigger('eventName', {data: 'some data'});
                     *     myComponent.trigger({'type':'eventName'}, {data: 'some data'});
                     * ```
                     *
                     * @param  {Event|Object|String} event  A string (the type) or an event object with a type attribute
                     * @param  {Object} [hash] data hash to pass along with the event
                     * @return {Component}       self
                     * @method trigger
                     */

                    Component.prototype.trigger = function trigger(event, hash) {
                        Events.trigger(this.el_, event, hash);
                        return this;
                    };

                    /**
                     * Bind a listener to the component's ready state.
                     * Different from event listeners in that if the ready event has already happened
                     * it will trigger the function immediately.
                     *
                     * @param  {Function} fn Ready listener
                     * @param  {Boolean} sync Exec the listener synchronously if component is ready
                     * @return {Component}
                     * @method ready
                     */

                    Component.prototype.ready = function ready(fn) {
                        var sync = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

                        if (fn) {
                            if (this.isReady_) {
                                if (sync) {
                                    fn.call(this);
                                } else {
                                    // Call the function asynchronously by default for consistency
                                    this.setTimeout(fn, 1);
                                }
                            } else {
                                this.readyQueue_ = this.readyQueue_ || [];
                                this.readyQueue_.push(fn);
                            }
                        }
                        return this;
                    };

                    /**
                     * Trigger the ready listeners
                     *
                     * @return {Component}
                     * @method triggerReady
                     */

                    Component.prototype.triggerReady = function triggerReady() {
                        this.isReady_ = true;

                        // Ensure ready is triggerd asynchronously
                        this.setTimeout(function () {
                            var readyQueue = this.readyQueue_;

                            // Reset Ready Queue
                            this.readyQueue_ = [];

                            if (readyQueue && readyQueue.length > 0) {
                                readyQueue.forEach(function (fn) {
                                    fn.call(this);
                                }, this);
                            }

                            // Allow for using event listeners also
                            this.trigger('ready');
                        }, 1);
                    };

                    /**
                     * Finds a single DOM element matching `selector` within the component's
                     * `contentEl` or another custom context.
                     *
                     * @method $
                     * @param  {String} selector
                     *         A valid CSS selector, which will be passed to `querySelector`.
                     *
                     * @param  {Element|String} [context=document]
                     *         A DOM element within which to query. Can also be a selector
                     *         string in which case the first matching element will be used
                     *         as context. If missing (or no element matches selector), falls
                     *         back to `document`.
                     *
                     * @return {Element|null}
                     */

                    Component.prototype.$ = function $(selector, context) {
                        return Dom.$(selector, context || this.contentEl());
                    };

                    /**
                     * Finds a all DOM elements matching `selector` within the component's
                     * `contentEl` or another custom context.
                     *
                     * @method $$
                     * @param  {String} selector
                     *         A valid CSS selector, which will be passed to `querySelectorAll`.
                     *
                     * @param  {Element|String} [context=document]
                     *         A DOM element within which to query. Can also be a selector
                     *         string in which case the first matching element will be used
                     *         as context. If missing (or no element matches selector), falls
                     *         back to `document`.
                     *
                     * @return {NodeList}
                     */

                    Component.prototype.$$ = function $$(selector, context) {
                        return Dom.$$(selector, context || this.contentEl());
                    };

                    /**
                     * Check if a component's element has a CSS class name
                     *
                     * @param {String} classToCheck Classname to check
                     * @return {Component}
                     * @method hasClass
                     */

                    Component.prototype.hasClass = function hasClass(classToCheck) {
                        return Dom.hasElClass(this.el_, classToCheck);
                    };

                    /**
                     * Add a CSS class name to the component's element
                     *
                     * @param {String} classToAdd Classname to add
                     * @return {Component}
                     * @method addClass
                     */

                    Component.prototype.addClass = function addClass(classToAdd) {
                        Dom.addElClass(this.el_, classToAdd);
                        return this;
                    };

                    /**
                     * Remove a CSS class name from the component's element
                     *
                     * @param {String} classToRemove Classname to remove
                     * @return {Component}
                     * @method removeClass
                     */

                    Component.prototype.removeClass = function removeClass(classToRemove) {
                        Dom.removeElClass(this.el_, classToRemove);
                        return this;
                    };

                    /**
                     * Add or remove a CSS class name from the component's element
                     *
                     * @param  {String} classToToggle
                     * @param  {Boolean|Function} [predicate]
                     *         Can be a function that returns a Boolean. If `true`, the class
                     *         will be added; if `false`, the class will be removed. If not
                     *         given, the class will be added if not present and vice versa.
                     *
                     * @return {Component}
                     * @method toggleClass
                     */

                    Component.prototype.toggleClass = function toggleClass(classToToggle, predicate) {
                        Dom.toggleElClass(this.el_, classToToggle, predicate);
                        return this;
                    };

                    /**
                     * Show the component element if hidden
                     *
                     * @return {Component}
                     * @method show
                     */

                    Component.prototype.show = function show() {
                        this.removeClass('vjs-hidden');
                        return this;
                    };

                    /**
                     * Hide the component element if currently showing
                     *
                     * @return {Component}
                     * @method hide
                     */

                    Component.prototype.hide = function hide() {
                        this.addClass('vjs-hidden');
                        return this;
                    };

                    /**
                     * Lock an item in its visible state
                     * To be used with fadeIn/fadeOut.
                     *
                     * @return {Component}
                     * @private
                     * @method lockShowing
                     */

                    Component.prototype.lockShowing = function lockShowing() {
                        this.addClass('vjs-lock-showing');
                        return this;
                    };

                    /**
                     * Unlock an item to be hidden
                     * To be used with fadeIn/fadeOut.
                     *
                     * @return {Component}
                     * @private
                     * @method unlockShowing
                     */

                    Component.prototype.unlockShowing = function unlockShowing() {
                        this.removeClass('vjs-lock-showing');
                        return this;
                    };

                    /**
                     * Set or get the width of the component (CSS values)
                     * Setting the video tag dimension values only works with values in pixels.
                     * Percent values will not work.
                     * Some percents can be used, but width()/height() will return the number + %,
                     * not the actual computed width/height.
                     *
                     * @param  {Number|String=} num   Optional width number
                     * @param  {Boolean} skipListeners Skip the 'resize' event trigger
                     * @return {Component} This component, when setting the width
                     * @return {Number|String} The width, when getting
                     * @method width
                     */

                    Component.prototype.width = function width(num, skipListeners) {
                        return this.dimension('width', num, skipListeners);
                    };

                    /**
                     * Get or set the height of the component (CSS values)
                     * Setting the video tag dimension values only works with values in pixels.
                     * Percent values will not work.
                     * Some percents can be used, but width()/height() will return the number + %,
                     * not the actual computed width/height.
                     *
                     * @param  {Number|String=} num     New component height
                     * @param  {Boolean=} skipListeners Skip the resize event trigger
                     * @return {Component} This component, when setting the height
                     * @return {Number|String} The height, when getting
                     * @method height
                     */

                    Component.prototype.height = function height(num, skipListeners) {
                        return this.dimension('height', num, skipListeners);
                    };

                    /**
                     * Set both width and height at the same time
                     *
                     * @param  {Number|String} width Width of player
                     * @param  {Number|String} height Height of player
                     * @return {Component} The component
                     * @method dimensions
                     */

                    Component.prototype.dimensions = function dimensions(width, height) {
                        // Skip resize listeners on width for optimization
                        return this.width(width, true).height(height);
                    };

                    /**
                     * Get or set width or height
                     * This is the shared code for the width() and height() methods.
                     * All for an integer, integer + 'px' or integer + '%';
                     * Known issue: Hidden elements officially have a width of 0. We're defaulting
                     * to the style.width value and falling back to computedStyle which has the
                     * hidden element issue. Info, but probably not an efficient fix:
                     * http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/
                     *
                     * @param  {String} widthOrHeight  'width' or 'height'
                     * @param  {Number|String=} num     New dimension
                     * @param  {Boolean=} skipListeners Skip resize event trigger
                     * @return {Component} The component if a dimension was set
                     * @return {Number|String} The dimension if nothing was set
                     * @private
                     * @method dimension
                     */

                    Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {
                        if (num !== undefined) {
                            // Set to zero if null or literally NaN (NaN !== NaN)
                            if (num === null || num !== num) {
                                num = 0;
                            }

                            // Check if using css width/height (% or px) and adjust
                            if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
                                this.el_.style[widthOrHeight] = num;
                            } else if (num === 'auto') {
                                this.el_.style[widthOrHeight] = '';
                            } else {
                                this.el_.style[widthOrHeight] = num + 'px';
                            }

                            // skipListeners allows us to avoid triggering the resize event when setting both width and height
                            if (!skipListeners) {
                                this.trigger('resize');
                            }

                            // Return component
                            return this;
                        }

                        // Not setting a value, so getting it
                        // Make sure element exists
                        if (!this.el_) {
                            return 0;
                        }

                        // Get dimension value from style
                        var val = this.el_.style[widthOrHeight];
                        var pxIndex = val.indexOf('px');

                        if (pxIndex !== -1) {
                            // Return the pixel value with no 'px'
                            return parseInt(val.slice(0, pxIndex), 10);
                        }

                        // No px so using % or no style was set, so falling back to offsetWidth/height
                        // If component has display:none, offset will return 0
                        // TODO: handle display:none and no dimension style using px
                        return parseInt(this.el_['offset' + _utilsToTitleCaseJs2['default'](widthOrHeight)], 10);
                    };

                    /**
                     * Get width or height of computed style
                     * @param  {String} widthOrHeight  'width' or 'height'
                     * @return {Number|Boolean} The bolean false if nothing was set
                     * @method currentDimension
                     */

                    Component.prototype.currentDimension = function currentDimension(widthOrHeight) {
                        var computedWidthOrHeight = 0;

                        if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {
                            throw new Error('currentDimension only accepts width or height value');
                        }

                        if (typeof _globalWindow2['default'].getComputedStyle === 'function') {
                            var computedStyle = _globalWindow2['default'].getComputedStyle(this.el_);
                            computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];
                        } else if (this.el_.currentStyle) {
                            // ie 8 doesn't support computed style, shim it
                            // return clientWidth or clientHeight instead for better accuracy
                            var rule = 'offset' + _utilsToTitleCaseJs2['default'](widthOrHeight);
                            computedWidthOrHeight = this.el_[rule];
                        }

                        // remove 'px' from variable and parse as integer
                        computedWidthOrHeight = parseFloat(computedWidthOrHeight);
                        return computedWidthOrHeight;
                    };

                    /**
                     * Get an object which contains width and height values of computed style
                     * @return {Object} The dimensions of element
                     * @method currentDimensions
                     */

                    Component.prototype.currentDimensions = function currentDimensions() {
                        return {
                            width: this.currentDimension('width'),
                            height: this.currentDimension('height')
                        };
                    };

                    /**
                     * Get width of computed style
                     * @return {Integer}
                     * @method currentWidth
                     */

                    Component.prototype.currentWidth = function currentWidth() {
                        return this.currentDimension('width');
                    };

                    /**
                     * Get height of computed style
                     * @return {Integer}
                     * @method currentHeight
                     */

                    Component.prototype.currentHeight = function currentHeight() {
                        return this.currentDimension('height');
                    };

                    /**
                     * Emit 'tap' events when touch events are supported
                     * This is used to support toggling the controls through a tap on the video.
                     * We're requiring them to be enabled because otherwise every component would
                     * have this extra overhead unnecessarily, on mobile devices where extra
                     * overhead is especially bad.
                     *
                     * @private
                     * @method emitTapEvents
                     */

                    Component.prototype.emitTapEvents = function emitTapEvents() {
                        // Track the start time so we can determine how long the touch lasted
                        var touchStart = 0;
                        var firstTouch = null;

                        // Maximum movement allowed during a touch event to still be considered a tap
                        // Other popular libs use anywhere from 2 (hammer.js) to 15, so 10 seems like a nice, round number.
                        var tapMovementThreshold = 10;

                        // The maximum length a touch can be while still being considered a tap
                        var touchTimeThreshold = 200;

                        var couldBeTap = undefined;

                        this.on('touchstart', function (event) {
                            // If more than one finger, don't consider treating this as a click
                            if (event.touches.length === 1) {
                                // Copy the touches object to prevent modifying the original
                                firstTouch = _objectAssign2['default']({}, event.touches[0]);
                                // Record start time so we can detect a tap vs. "touch and hold"
                                touchStart = new Date().getTime();
                                // Reset couldBeTap tracking
                                couldBeTap = true;
                            }
                        });

                        this.on('touchmove', function (event) {
                            // If more than one finger, don't consider treating this as a click
                            if (event.touches.length > 1) {
                                couldBeTap = false;
                            } else if (firstTouch) {
                                // Some devices will throw touchmoves for all but the slightest of taps.
                                // So, if we moved only a small distance, this could still be a tap
                                var xdiff = event.touches[0].pageX - firstTouch.pageX;
                                var ydiff = event.touches[0].pageY - firstTouch.pageY;
                                var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);

                                if (touchDistance > tapMovementThreshold) {
                                    couldBeTap = false;
                                }
                            }
                        });

                        var noTap = function noTap() {
                            couldBeTap = false;
                        };

                        // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
                        this.on('touchleave', noTap);
                        this.on('touchcancel', noTap);

                        // When the touch ends, measure how long it took and trigger the appropriate
                        // event
                        this.on('touchend', function (event) {
                            firstTouch = null;
                            // Proceed only if the touchmove/leave/cancel event didn't happen
                            if (couldBeTap === true) {
                                // Measure how long the touch lasted
                                var touchTime = new Date().getTime() - touchStart;

                                // Make sure the touch was less than the threshold to be considered a tap
                                if (touchTime < touchTimeThreshold) {
                                    // Don't let browser turn this into a click
                                    event.preventDefault();
                                    this.trigger('tap');
                                    // It may be good to copy the touchend event object and change the
                                    // type to tap, if the other event properties aren't exact after
                                    // Events.fixEvent runs (e.g. event.target)
                                }
                            }
                        });
                    };

                    /**
                     * Report user touch activity when touch events occur
                     * User activity is used to determine when controls should show/hide. It's
                     * relatively simple when it comes to mouse events, because any mouse event
                     * should show the controls. So we capture mouse events that bubble up to the
                     * player and report activity when that happens.
                     * With touch events it isn't as easy. We can't rely on touch events at the
                     * player level, because a tap (touchstart + touchend) on the video itself on
                     * mobile devices is meant to turn controls off (and on). User activity is
                     * checked asynchronously, so what could happen is a tap event on the video
                     * turns the controls off, then the touchend event bubbles up to the player,
                     * which if it reported user activity, would turn the controls right back on.
                     * (We also don't want to completely block touch events from bubbling up)
                     * Also a touchmove, touch+hold, and anything other than a tap is not supposed
                     * to turn the controls back on on a mobile device.
                     * Here we're setting the default component behavior to report user activity
                     * whenever touch events happen, and this can be turned off by components that
                     * want touch events to act differently.
                     *
                     * @method enableTouchActivity
                     */

                    Component.prototype.enableTouchActivity = function enableTouchActivity() {
                        // Don't continue if the root player doesn't support reporting user activity
                        if (!this.player() || !this.player().reportUserActivity) {
                            return;
                        }

                        // listener for reporting that the user is active
                        var report = Fn.bind(this.player(), this.player().reportUserActivity);

                        var touchHolding = undefined;

                        this.on('touchstart', function () {
                            report();
                            // For as long as the they are touching the device or have their mouse down,
                            // we consider them active even if they're not moving their finger or mouse.
                            // So we want to continue to update that they are active
                            this.clearInterval(touchHolding);
                            // report at the same interval as activityCheck
                            touchHolding = this.setInterval(report, 250);
                        });

                        var touchEnd = function touchEnd(event) {
                            report();
                            // stop the interval that maintains activity if the touch is holding
                            this.clearInterval(touchHolding);
                        };

                        this.on('touchmove', report);
                        this.on('touchend', touchEnd);
                        this.on('touchcancel', touchEnd);
                    };

                    /**
                     * Creates timeout and sets up disposal automatically.
                     *
                     * @param {Function} fn The function to run after the timeout.
                     * @param {Number} timeout Number of ms to delay before executing specified function.
                     * @return {Number} Returns the timeout ID
                     * @method setTimeout
                     */

                    Component.prototype.setTimeout = function setTimeout(fn, timeout) {
                        fn = Fn.bind(this, fn);

                        // window.setTimeout would be preferable here, but due to some bizarre issue with Sinon and/or Phantomjs, we can't.
                        var timeoutId = _globalWindow2['default'].setTimeout(fn, timeout);

                        var disposeFn = function disposeFn() {
                            this.clearTimeout(timeoutId);
                        };

                        disposeFn.guid = 'vjs-timeout-' + timeoutId;

                        this.on('dispose', disposeFn);

                        return timeoutId;
                    };

                    /**
                     * Clears a timeout and removes the associated dispose listener
                     *
                     * @param {Number} timeoutId The id of the timeout to clear
                     * @return {Number} Returns the timeout ID
                     * @method clearTimeout
                     */

                    Component.prototype.clearTimeout = function clearTimeout(timeoutId) {
                        _globalWindow2['default'].clearTimeout(timeoutId);

                        var disposeFn = function disposeFn() {};

                        disposeFn.guid = 'vjs-timeout-' + timeoutId;

                        this.off('dispose', disposeFn);

                        return timeoutId;
                    };

                    /**
                     * Creates an interval and sets up disposal automatically.
                     *
                     * @param {Function} fn The function to run every N seconds.
                     * @param {Number} interval Number of ms to delay before executing specified function.
                     * @return {Number} Returns the interval ID
                     * @method setInterval
                     */

                    Component.prototype.setInterval = function setInterval(fn, interval) {
                        fn = Fn.bind(this, fn);

                        var intervalId = _globalWindow2['default'].setInterval(fn, interval);

                        var disposeFn = function disposeFn() {
                            this.clearInterval(intervalId);
                        };

                        disposeFn.guid = 'vjs-interval-' + intervalId;

                        this.on('dispose', disposeFn);

                        return intervalId;
                    };

                    /**
                     * Clears an interval and removes the associated dispose listener
                     *
                     * @param {Number} intervalId The id of the interval to clear
                     * @return {Number} Returns the interval ID
                     * @method clearInterval
                     */

                    Component.prototype.clearInterval = function clearInterval(intervalId) {
                        _globalWindow2['default'].clearInterval(intervalId);

                        var disposeFn = function disposeFn() {};

                        disposeFn.guid = 'vjs-interval-' + intervalId;

                        this.off('dispose', disposeFn);

                        return intervalId;
                    };

                    /**
                     * Registers a component
                     *
                     * @param {String} name Name of the component to register
                     * @param {Object} comp The component to register
                     * @static
                     * @method registerComponent
                     */

                    Component.registerComponent = function registerComponent(name, comp) {
                        if (!Component.components_) {
                            Component.components_ = {};
                        }

                        Component.components_[name] = comp;
                        return comp;
                    };

                    /**
                     * Gets a component by name
                     *
                     * @param {String} name Name of the component to get
                     * @return {Component}
                     * @static
                     * @method getComponent
                     */

                    Component.getComponent = function getComponent(name) {
                        if (Component.components_ && Component.components_[name]) {
                            return Component.components_[name];
                        }

                        if (_globalWindow2['default'] && _globalWindow2['default'].videojs && _globalWindow2['default'].videojs[name]) {
                            _utilsLogJs2['default'].warn('The ' + name + ' component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)');
                            return _globalWindow2['default'].videojs[name];
                        }
                    };

                    /**
                     * Sets up the constructor using the supplied init method
                     * or uses the init of the parent object
                     *
                     * @param {Object} props An object of properties
                     * @static
                     * @deprecated
                     * @method extend
                     */

                    Component.extend = function extend(props) {
                        props = props || {};

                        _utilsLogJs2['default'].warn('Component.extend({}) has been deprecated, use videojs.extend(Component, {}) instead');

                        // Set up the constructor using the supplied init method
                        // or using the init of the parent object
                        // Make sure to check the unobfuscated version for external libs
                        var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {};
                        // In Resig's simple class inheritance (previously used) the constructor
                        //  is a function that calls `this.init.apply(arguments)`
                        // However that would prevent us from using `ParentObject.call(this);`
                        //  in a Child constructor because the `this` in `this.init`
                        //  would still refer to the Child and cause an infinite loop.
                        // We would instead have to do
                        //    `ParentObject.prototype.init.apply(this, arguments);`
                        //  Bleh. We're not creating a _super() function, so it's good to keep
                        //  the parent constructor reference simple.
                        var subObj = function subObj() {
                            init.apply(this, arguments);
                        };

                        // Inherit from this object's prototype
                        subObj.prototype = Object.create(this.prototype);
                        // Reset the constructor property for subObj otherwise
                        // instances of subObj would have the constructor of the parent Object
                        subObj.prototype.constructor = subObj;

                        // Make the class extendable
                        subObj.extend = Component.extend;

                        // Extend subObj's prototype with functions and other properties from props
                        for (var _name in props) {
                            if (props.hasOwnProperty(_name)) {
                                subObj.prototype[_name] = props[_name];
                            }
                        }

                        return subObj;
                    };

                    return Component;
                })();

                Component.registerComponent('Component', Component);
                exports['default'] = Component;
                module.exports = exports['default'];

            },{"./utils/dom.js":134,"./utils/events.js":135,"./utils/fn.js":136,"./utils/guid.js":138,"./utils/log.js":139,"./utils/merge-options.js":140,"./utils/to-title-case.js":143,"global/window":2,"object.assign":45}],68:[function(_dereq_,module,exports){
                /**
                 * @file control-bar.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

// Required children

                var _playToggleJs = _dereq_('./play-toggle.js');

                var _playToggleJs2 = _interopRequireDefault(_playToggleJs);

                var _timeControlsCurrentTimeDisplayJs = _dereq_('./time-controls/current-time-display.js');

                var _timeControlsCurrentTimeDisplayJs2 = _interopRequireDefault(_timeControlsCurrentTimeDisplayJs);

                var _timeControlsDurationDisplayJs = _dereq_('./time-controls/duration-display.js');

                var _timeControlsDurationDisplayJs2 = _interopRequireDefault(_timeControlsDurationDisplayJs);

                var _timeControlsTimeDividerJs = _dereq_('./time-controls/time-divider.js');

                var _timeControlsTimeDividerJs2 = _interopRequireDefault(_timeControlsTimeDividerJs);

                var _timeControlsRemainingTimeDisplayJs = _dereq_('./time-controls/remaining-time-display.js');

                var _timeControlsRemainingTimeDisplayJs2 = _interopRequireDefault(_timeControlsRemainingTimeDisplayJs);

                var _liveDisplayJs = _dereq_('./live-display.js');

                var _liveDisplayJs2 = _interopRequireDefault(_liveDisplayJs);

                var _progressControlProgressControlJs = _dereq_('./progress-control/progress-control.js');

                var _progressControlProgressControlJs2 = _interopRequireDefault(_progressControlProgressControlJs);

                var _fullscreenToggleJs = _dereq_('./fullscreen-toggle.js');

                var _fullscreenToggleJs2 = _interopRequireDefault(_fullscreenToggleJs);

                var _volumeControlVolumeControlJs = _dereq_('./volume-control/volume-control.js');

                var _volumeControlVolumeControlJs2 = _interopRequireDefault(_volumeControlVolumeControlJs);

                var _volumeMenuButtonJs = _dereq_('./volume-menu-button.js');

                var _volumeMenuButtonJs2 = _interopRequireDefault(_volumeMenuButtonJs);

                var _muteToggleJs = _dereq_('./mute-toggle.js');

                var _muteToggleJs2 = _interopRequireDefault(_muteToggleJs);

                var _textTrackControlsChaptersButtonJs = _dereq_('./text-track-controls/chapters-button.js');

                var _textTrackControlsChaptersButtonJs2 = _interopRequireDefault(_textTrackControlsChaptersButtonJs);

                var _textTrackControlsDescriptionsButtonJs = _dereq_('./text-track-controls/descriptions-button.js');

                var _textTrackControlsDescriptionsButtonJs2 = _interopRequireDefault(_textTrackControlsDescriptionsButtonJs);

                var _textTrackControlsSubtitlesButtonJs = _dereq_('./text-track-controls/subtitles-button.js');

                var _textTrackControlsSubtitlesButtonJs2 = _interopRequireDefault(_textTrackControlsSubtitlesButtonJs);

                var _textTrackControlsCaptionsButtonJs = _dereq_('./text-track-controls/captions-button.js');

                var _textTrackControlsCaptionsButtonJs2 = _interopRequireDefault(_textTrackControlsCaptionsButtonJs);

                var _playbackRateMenuPlaybackRateMenuButtonJs = _dereq_('./playback-rate-menu/playback-rate-menu-button.js');

                var _playbackRateMenuPlaybackRateMenuButtonJs2 = _interopRequireDefault(_playbackRateMenuPlaybackRateMenuButtonJs);

                var _spacerControlsCustomControlSpacerJs = _dereq_('./spacer-controls/custom-control-spacer.js');

                var _spacerControlsCustomControlSpacerJs2 = _interopRequireDefault(_spacerControlsCustomControlSpacerJs);

                /**
                 * Container of main controls
                 *
                 * @extends Component
                 * @class ControlBar
                 */

                var ControlBar = (function (_Component) {
                    _inherits(ControlBar, _Component);

                    function ControlBar() {
                        _classCallCheck(this, ControlBar);

                        _Component.apply(this, arguments);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    ControlBar.prototype.createEl = function createEl() {
                        return _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-control-bar',
                            dir: 'ltr'
                        }, {
                            'role': 'group' // The control bar is a group, so it can contain menuitems
                        });
                    };

                    return ControlBar;
                })(_componentJs2['default']);

                ControlBar.prototype.options_ = {
                    loadEvent: 'play',
                    children: ['playToggle', 'volumeMenuButton', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subtitlesButton', 'captionsButton', 'fullscreenToggle']
                };

                _componentJs2['default'].registerComponent('ControlBar', ControlBar);
                exports['default'] = ControlBar;
                module.exports = exports['default'];

            },{"../component.js":67,"./fullscreen-toggle.js":69,"./live-display.js":70,"./mute-toggle.js":71,"./play-toggle.js":72,"./playback-rate-menu/playback-rate-menu-button.js":73,"./progress-control/progress-control.js":78,"./spacer-controls/custom-control-spacer.js":81,"./text-track-controls/captions-button.js":84,"./text-track-controls/chapters-button.js":85,"./text-track-controls/descriptions-button.js":87,"./text-track-controls/subtitles-button.js":89,"./time-controls/current-time-display.js":92,"./time-controls/duration-display.js":93,"./time-controls/remaining-time-display.js":94,"./time-controls/time-divider.js":95,"./volume-control/volume-control.js":97,"./volume-menu-button.js":99}],69:[function(_dereq_,module,exports){
                /**
                 * @file fullscreen-toggle.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _buttonJs = _dereq_('../button.js');

                var _buttonJs2 = _interopRequireDefault(_buttonJs);

                var _componentJs = _dereq_('../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                /**
                 * Toggle fullscreen video
                 *
                 * @extends Button
                 * @class FullscreenToggle
                 */

                var FullscreenToggle = (function (_Button) {
                    _inherits(FullscreenToggle, _Button);

                    function FullscreenToggle() {
                        _classCallCheck(this, FullscreenToggle);

                        _Button.apply(this, arguments);
                    }

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);
                    };

                    /**
                     * Handles click for full screen
                     *
                     * @method handleClick
                     */

                    FullscreenToggle.prototype.handleClick = function handleClick() {
                        if (!this.player_.isFullscreen()) {
                            this.player_.requestFullscreen();
                            this.controlText('Non-Fullscreen');
                        } else {
                            this.player_.exitFullscreen();
                            this.controlText('Fullscreen');
                        }
                    };

                    return FullscreenToggle;
                })(_buttonJs2['default']);

                FullscreenToggle.prototype.controlText_ = 'Fullscreen';

                _componentJs2['default'].registerComponent('FullscreenToggle', FullscreenToggle);
                exports['default'] = FullscreenToggle;
                module.exports = exports['default'];

            },{"../button.js":64,"../component.js":67}],70:[function(_dereq_,module,exports){
                /**
                 * @file live-display.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _component = _dereq_('../component');

                var _component2 = _interopRequireDefault(_component);

                var _utilsDomJs = _dereq_('../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                /**
                 * Displays the live indicator
                 * TODO - Future make it click to snap to live
                 *
                 * @extends Component
                 * @class LiveDisplay
                 */

                var LiveDisplay = (function (_Component) {
                    _inherits(LiveDisplay, _Component);

                    function LiveDisplay(player, options) {
                        _classCallCheck(this, LiveDisplay);

                        _Component.call(this, player, options);

                        this.updateShowing();
                        this.on(this.player(), 'durationchange', this.updateShowing);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    LiveDisplay.prototype.createEl = function createEl() {
                        var el = _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-live-control vjs-control'
                        });

                        this.contentEl_ = Dom.createEl('div', {
                            className: 'vjs-live-display',
                            innerHTML: '<span class="vjs-control-text">' + this.localize('Stream Type') + '</span>' + this.localize('LIVE')
                        }, {
                            'aria-live': 'off'
                        });

                        el.appendChild(this.contentEl_);
                        return el;
                    };

                    LiveDisplay.prototype.updateShowing = function updateShowing() {
                        if (this.player().duration() === Infinity) {
                            this.show();
                        } else {
                            this.hide();
                        }
                    };

                    return LiveDisplay;
                })(_component2['default']);

                _component2['default'].registerComponent('LiveDisplay', LiveDisplay);
                exports['default'] = LiveDisplay;
                module.exports = exports['default'];

            },{"../component":67,"../utils/dom.js":134}],71:[function(_dereq_,module,exports){
                /**
                 * @file mute-toggle.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _button = _dereq_('../button');

                var _button2 = _interopRequireDefault(_button);

                var _component = _dereq_('../component');

                var _component2 = _interopRequireDefault(_component);

                var _utilsDomJs = _dereq_('../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                /**
                 * A button component for muting the audio
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Button
                 * @class MuteToggle
                 */

                var MuteToggle = (function (_Button) {
                    _inherits(MuteToggle, _Button);

                    function MuteToggle(player, options) {
                        _classCallCheck(this, MuteToggle);

                        _Button.call(this, player, options);

                        this.on(player, 'volumechange', this.update);

                        // hide mute toggle if the current tech doesn't support volume control
                        if (player.tech_ && player.tech_['featuresVolumeControl'] === false) {
                            this.addClass('vjs-hidden');
                        }

                        this.on(player, 'loadstart', function () {
                            this.update(); // We need to update the button to account for a default muted state.

                            if (player.tech_['featuresVolumeControl'] === false) {
                                this.addClass('vjs-hidden');
                            } else {
                                this.removeClass('vjs-hidden');
                            }
                        });
                    }

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    MuteToggle.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);
                    };

                    /**
                     * Handle click on mute
                     *
                     * @method handleClick
                     */

                    MuteToggle.prototype.handleClick = function handleClick() {
                        this.player_.muted(this.player_.muted() ? false : true);
                    };

                    /**
                     * Update volume
                     *
                     * @method update
                     */

                    MuteToggle.prototype.update = function update() {
                        var vol = this.player_.volume(),
                            level = 3;

                        if (vol === 0 || this.player_.muted()) {
                            level = 0;
                        } else if (vol < 0.33) {
                            level = 1;
                        } else if (vol < 0.67) {
                            level = 2;
                        }

                        // Don't rewrite the button text if the actual text doesn't change.
                        // This causes unnecessary and confusing information for screen reader users.
                        // This check is needed because this function gets called every time the volume level is changed.
                        var toMute = this.player_.muted() ? 'Unmute' : 'Mute';
                        if (this.controlText() !== toMute) {
                            this.controlText(toMute);
                        }

                        /* TODO improve muted icon classes */
                        for (var i = 0; i < 4; i++) {
                            Dom.removeElClass(this.el_, 'vjs-vol-' + i);
                        }
                        Dom.addElClass(this.el_, 'vjs-vol-' + level);
                    };

                    return MuteToggle;
                })(_button2['default']);

                MuteToggle.prototype.controlText_ = 'Mute';

                _component2['default'].registerComponent('MuteToggle', MuteToggle);
                exports['default'] = MuteToggle;
                module.exports = exports['default'];

            },{"../button":64,"../component":67,"../utils/dom.js":134}],72:[function(_dereq_,module,exports){
                /**
                 * @file play-toggle.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _buttonJs = _dereq_('../button.js');

                var _buttonJs2 = _interopRequireDefault(_buttonJs);

                var _componentJs = _dereq_('../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                /**
                 * Button to toggle between play and pause
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Button
                 * @class PlayToggle
                 */

                var PlayToggle = (function (_Button) {
                    _inherits(PlayToggle, _Button);

                    function PlayToggle(player, options) {
                        _classCallCheck(this, PlayToggle);

                        _Button.call(this, player, options);

                        this.on(player, 'play', this.handlePlay);
                        this.on(player, 'pause', this.handlePause);
                    }

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    PlayToggle.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);
                    };

                    /**
                     * Handle click to toggle between play and pause
                     *
                     * @method handleClick
                     */

                    PlayToggle.prototype.handleClick = function handleClick() {
                        if (this.player_.paused()) {
                            this.player_.play();
                        } else {
                            this.player_.pause();
                        }
                    };

                    /**
                     * Add the vjs-playing class to the element so it can change appearance
                     *
                     * @method handlePlay
                     */

                    PlayToggle.prototype.handlePlay = function handlePlay() {
                        this.removeClass('vjs-paused');
                        this.addClass('vjs-playing');
                        this.controlText('Pause'); // change the button text to "Pause"
                    };

                    /**
                     * Add the vjs-paused class to the element so it can change appearance
                     *
                     * @method handlePause
                     */

                    PlayToggle.prototype.handlePause = function handlePause() {
                        this.removeClass('vjs-playing');
                        this.addClass('vjs-paused');
                        this.controlText('Play'); // change the button text to "Play"
                    };

                    return PlayToggle;
                })(_buttonJs2['default']);

                PlayToggle.prototype.controlText_ = 'Play';

                _componentJs2['default'].registerComponent('PlayToggle', PlayToggle);
                exports['default'] = PlayToggle;
                module.exports = exports['default'];

            },{"../button.js":64,"../component.js":67}],73:[function(_dereq_,module,exports){
                /**
                 * @file playback-rate-menu-button.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _menuMenuButtonJs = _dereq_('../../menu/menu-button.js');

                var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);

                var _menuMenuJs = _dereq_('../../menu/menu.js');

                var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);

                var _playbackRateMenuItemJs = _dereq_('./playback-rate-menu-item.js');

                var _playbackRateMenuItemJs2 = _interopRequireDefault(_playbackRateMenuItemJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsDomJs = _dereq_('../../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                /**
                 * The component for controlling the playback rate
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends MenuButton
                 * @class PlaybackRateMenuButton
                 */

                var PlaybackRateMenuButton = (function (_MenuButton) {
                    _inherits(PlaybackRateMenuButton, _MenuButton);

                    function PlaybackRateMenuButton(player, options) {
                        _classCallCheck(this, PlaybackRateMenuButton);

                        _MenuButton.call(this, player, options);

                        this.updateVisibility();
                        this.updateLabel();

                        this.on(player, 'loadstart', this.updateVisibility);
                        this.on(player, 'ratechange', this.updateLabel);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    PlaybackRateMenuButton.prototype.createEl = function createEl() {
                        var el = _MenuButton.prototype.createEl.call(this);

                        this.labelEl_ = Dom.createEl('div', {
                            className: 'vjs-playback-rate-value',
                            innerHTML: 1.0
                        });

                        el.appendChild(this.labelEl_);

                        return el;
                    };

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);
                    };

                    /**
                     * Create the playback rate menu
                     *
                     * @return {Menu} Menu object populated with items
                     * @method createMenu
                     */

                    PlaybackRateMenuButton.prototype.createMenu = function createMenu() {
                        var menu = new _menuMenuJs2['default'](this.player());
                        var rates = this.playbackRates();

                        if (rates) {
                            for (var i = rates.length - 1; i >= 0; i--) {
                                menu.addChild(new _playbackRateMenuItemJs2['default'](this.player(), { 'rate': rates[i] + 'x' }));
                            }
                        }

                        return menu;
                    };

                    /**
                     * Updates ARIA accessibility attributes
                     *
                     * @method updateARIAAttributes
                     */

                    PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {
                        // Current playback rate
                        this.el().setAttribute('aria-valuenow', this.player().playbackRate());
                    };

                    /**
                     * Handle menu item click
                     *
                     * @method handleClick
                     */

                    PlaybackRateMenuButton.prototype.handleClick = function handleClick() {
                        // select next rate option
                        var currentRate = this.player().playbackRate();
                        var rates = this.playbackRates();

                        // this will select first one if the last one currently selected
                        var newRate = rates[0];
                        for (var i = 0; i < rates.length; i++) {
                            if (rates[i] > currentRate) {
                                newRate = rates[i];
                                break;
                            }
                        }
                        this.player().playbackRate(newRate);
                    };

                    /**
                     * Get possible playback rates
                     *
                     * @return {Array} Possible playback rates
                     * @method playbackRates
                     */

                    PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {
                        return this.options_['playbackRates'] || this.options_.playerOptions && this.options_.playerOptions['playbackRates'];
                    };

                    /**
                     * Get whether playback rates is supported by the tech
                     * and an array of playback rates exists
                     *
                     * @return {Boolean} Whether changing playback rate is supported
                     * @method playbackRateSupported
                     */

                    PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {
                        return this.player().tech_ && this.player().tech_['featuresPlaybackRate'] && this.playbackRates() && this.playbackRates().length > 0;
                    };

                    /**
                     * Hide playback rate controls when they're no playback rate options to select
                     *
                     * @method updateVisibility
                     */

                    PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility() {
                        if (this.playbackRateSupported()) {
                            this.removeClass('vjs-hidden');
                        } else {
                            this.addClass('vjs-hidden');
                        }
                    };

                    /**
                     * Update button label when rate changed
                     *
                     * @method updateLabel
                     */

                    PlaybackRateMenuButton.prototype.updateLabel = function updateLabel() {
                        if (this.playbackRateSupported()) {
                            this.labelEl_.innerHTML = this.player().playbackRate() + 'x';
                        }
                    };

                    return PlaybackRateMenuButton;
                })(_menuMenuButtonJs2['default']);

                PlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';

                _componentJs2['default'].registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);
                exports['default'] = PlaybackRateMenuButton;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../menu/menu-button.js":106,"../../menu/menu.js":108,"../../utils/dom.js":134,"./playback-rate-menu-item.js":74}],74:[function(_dereq_,module,exports){
                /**
                 * @file playback-rate-menu-item.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

                var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                /**
                 * The specific menu item type for selecting a playback rate
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends MenuItem
                 * @class PlaybackRateMenuItem
                 */

                var PlaybackRateMenuItem = (function (_MenuItem) {
                    _inherits(PlaybackRateMenuItem, _MenuItem);

                    function PlaybackRateMenuItem(player, options) {
                        _classCallCheck(this, PlaybackRateMenuItem);

                        var label = options['rate'];
                        var rate = parseFloat(label, 10);

                        // Modify options for parent MenuItem class's init.
                        options['label'] = label;
                        options['selected'] = rate === 1;
                        _MenuItem.call(this, player, options);

                        this.label = label;
                        this.rate = rate;

                        this.on(player, 'ratechange', this.update);
                    }

                    /**
                     * Handle click on menu item
                     *
                     * @method handleClick
                     */

                    PlaybackRateMenuItem.prototype.handleClick = function handleClick() {
                        _MenuItem.prototype.handleClick.call(this);
                        this.player().playbackRate(this.rate);
                    };

                    /**
                     * Update playback rate with selected rate
                     *
                     * @method update
                     */

                    PlaybackRateMenuItem.prototype.update = function update() {
                        this.selected(this.player().playbackRate() === this.rate);
                    };

                    return PlaybackRateMenuItem;
                })(_menuMenuItemJs2['default']);

                PlaybackRateMenuItem.prototype.contentElType = 'button';

                _componentJs2['default'].registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);
                exports['default'] = PlaybackRateMenuItem;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../menu/menu-item.js":107}],75:[function(_dereq_,module,exports){
                /**
                 * @file load-progress-bar.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsDomJs = _dereq_('../../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                /**
                 * Shows load progress
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Component
                 * @class LoadProgressBar
                 */

                var LoadProgressBar = (function (_Component) {
                    _inherits(LoadProgressBar, _Component);

                    function LoadProgressBar(player, options) {
                        _classCallCheck(this, LoadProgressBar);

                        _Component.call(this, player, options);
                        this.on(player, 'progress', this.update);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    LoadProgressBar.prototype.createEl = function createEl() {
                        return _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-load-progress',
                            innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Loaded') + '</span>: 0%</span>'
                        });
                    };

                    /**
                     * Update progress bar
                     *
                     * @method update
                     */

                    LoadProgressBar.prototype.update = function update() {
                        var buffered = this.player_.buffered();
                        var duration = this.player_.duration();
                        var bufferedEnd = this.player_.bufferedEnd();
                        var children = this.el_.children;

                        // get the percent width of a time compared to the total end
                        var percentify = function percentify(time, end) {
                            var percent = time / end || 0; // no NaN
                            return (percent >= 1 ? 1 : percent) * 100 + '%';
                        };

                        // update the width of the progress bar
                        this.el_.style.width = percentify(bufferedEnd, duration);

                        // add child elements to represent the individual buffered time ranges
                        for (var i = 0; i < buffered.length; i++) {
                            var start = buffered.start(i);
                            var end = buffered.end(i);
                            var part = children[i];

                            if (!part) {
                                part = this.el_.appendChild(Dom.createEl());
                            }

                            // set the percent based on the width of the progress bar (bufferedEnd)
                            part.style.left = percentify(start, bufferedEnd);
                            part.style.width = percentify(end - start, bufferedEnd);
                        }

                        // remove unused buffered range elements
                        for (var i = children.length; i > buffered.length; i--) {
                            this.el_.removeChild(children[i - 1]);
                        }
                    };

                    return LoadProgressBar;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('LoadProgressBar', LoadProgressBar);
                exports['default'] = LoadProgressBar;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../utils/dom.js":134}],76:[function(_dereq_,module,exports){
                /**
                 * @file mouse-time-display.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsDomJs = _dereq_('../../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsFnJs = _dereq_('../../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

                var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

                var _lodashCompatFunctionThrottle = _dereq_('lodash-compat/function/throttle');

                var _lodashCompatFunctionThrottle2 = _interopRequireDefault(_lodashCompatFunctionThrottle);

                /**
                 * The Mouse Time Display component shows the time you will seek to
                 * when hovering over the progress bar
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Component
                 * @class MouseTimeDisplay
                 */

                var MouseTimeDisplay = (function (_Component) {
                    _inherits(MouseTimeDisplay, _Component);

                    function MouseTimeDisplay(player, options) {
                        var _this = this;

                        _classCallCheck(this, MouseTimeDisplay);

                        _Component.call(this, player, options);

                        if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
                            this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
                        }

                        if (this.keepTooltipsInside) {
                            this.tooltip = Dom.createEl('div', { className: 'vjs-time-tooltip' });
                            this.el().appendChild(this.tooltip);
                            this.addClass('vjs-keep-tooltips-inside');
                        }

                        this.update(0, 0);

                        player.on('ready', function () {
                            _this.on(player.controlBar.progressControl.el(), 'mousemove', _lodashCompatFunctionThrottle2['default'](Fn.bind(_this, _this.handleMouseMove), 25));
                        });
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    MouseTimeDisplay.prototype.createEl = function createEl() {
                        return _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-mouse-display'
                        });
                    };

                    MouseTimeDisplay.prototype.handleMouseMove = function handleMouseMove(event) {
                        var duration = this.player_.duration();
                        var newTime = this.calculateDistance(event) * duration;
                        var position = event.pageX - Dom.findElPosition(this.el().parentNode).left;

                        this.update(newTime, position);
                    };

                    MouseTimeDisplay.prototype.update = function update(newTime, position) {
                        var time = _utilsFormatTimeJs2['default'](newTime, this.player_.duration());

                        this.el().style.left = position + 'px';
                        this.el().setAttribute('data-current-time', time);

                        if (this.keepTooltipsInside) {
                            var clampedPosition = this.clampPosition_(position);
                            var difference = position - clampedPosition + 1;
                            var tooltipWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.tooltip).width);
                            var tooltipWidthHalf = tooltipWidth / 2;

                            this.tooltip.innerHTML = time;
                            this.tooltip.style.right = '-' + (tooltipWidthHalf - difference) + 'px';
                        }
                    };

                    MouseTimeDisplay.prototype.calculateDistance = function calculateDistance(event) {
                        return Dom.getPointerPosition(this.el().parentNode, event).x;
                    };

                    /**
                     * This takes in a horizontal position for the bar and returns a clamped position.
                     * Clamped position means that it will keep the position greater than half the width
                     * of the tooltip and smaller than the player width minus half the width o the tooltip.
                     * It will only clamp the position if `keepTooltipsInside` option is set.
                     *
                     * @param {Number} position the position the bar wants to be
                     * @return {Number} newPosition the (potentially) clamped position
                     * @method clampPosition_
                     */

                    MouseTimeDisplay.prototype.clampPosition_ = function clampPosition_(position) {
                        if (!this.keepTooltipsInside) {
                            return position;
                        }

                        var playerWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.player().el()).width);
                        var tooltipWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.tooltip).width);
                        var tooltipWidthHalf = tooltipWidth / 2;
                        var actualPosition = position;

                        if (position < tooltipWidthHalf) {
                            actualPosition = Math.ceil(tooltipWidthHalf);
                        } else if (position > playerWidth - tooltipWidthHalf) {
                            actualPosition = Math.floor(playerWidth - tooltipWidthHalf);
                        }

                        return actualPosition;
                    };

                    return MouseTimeDisplay;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('MouseTimeDisplay', MouseTimeDisplay);
                exports['default'] = MouseTimeDisplay;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../utils/dom.js":134,"../../utils/fn.js":136,"../../utils/format-time.js":137,"global/window":2,"lodash-compat/function/throttle":7}],77:[function(_dereq_,module,exports){
                /**
                 * @file play-progress-bar.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsFnJs = _dereq_('../../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsDomJs = _dereq_('../../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

                var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

                /**
                 * Shows play progress
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Component
                 * @class PlayProgressBar
                 */

                var PlayProgressBar = (function (_Component) {
                    _inherits(PlayProgressBar, _Component);

                    function PlayProgressBar(player, options) {
                        _classCallCheck(this, PlayProgressBar);

                        _Component.call(this, player, options);
                        this.updateDataAttr();
                        this.on(player, 'timeupdate', this.updateDataAttr);
                        player.ready(Fn.bind(this, this.updateDataAttr));

                        if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
                            this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
                        }

                        if (this.keepTooltipsInside) {
                            this.addClass('vjs-keep-tooltips-inside');
                        }
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    PlayProgressBar.prototype.createEl = function createEl() {
                        return _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-play-progress vjs-slider-bar',
                            innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
                        });
                    };

                    PlayProgressBar.prototype.updateDataAttr = function updateDataAttr() {
                        var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                        this.el_.setAttribute('data-current-time', _utilsFormatTimeJs2['default'](time, this.player_.duration()));
                    };

                    return PlayProgressBar;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('PlayProgressBar', PlayProgressBar);
                exports['default'] = PlayProgressBar;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../utils/dom.js":134,"../../utils/fn.js":136,"../../utils/format-time.js":137}],78:[function(_dereq_,module,exports){
                /**
                 * @file progress-control.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _seekBarJs = _dereq_('./seek-bar.js');

                var _seekBarJs2 = _interopRequireDefault(_seekBarJs);

                var _mouseTimeDisplayJs = _dereq_('./mouse-time-display.js');

                var _mouseTimeDisplayJs2 = _interopRequireDefault(_mouseTimeDisplayJs);

                /**
                 * The Progress Control component contains the seek bar, load progress,
                 * and play progress
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Component
                 * @class ProgressControl
                 */

                var ProgressControl = (function (_Component) {
                    _inherits(ProgressControl, _Component);

                    function ProgressControl() {
                        _classCallCheck(this, ProgressControl);

                        _Component.apply(this, arguments);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    ProgressControl.prototype.createEl = function createEl() {
                        return _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-progress-control vjs-control'
                        });
                    };

                    return ProgressControl;
                })(_componentJs2['default']);

                ProgressControl.prototype.options_ = {
                    children: ['seekBar']
                };

                _componentJs2['default'].registerComponent('ProgressControl', ProgressControl);
                exports['default'] = ProgressControl;
                module.exports = exports['default'];

            },{"../../component.js":67,"./mouse-time-display.js":76,"./seek-bar.js":79}],79:[function(_dereq_,module,exports){
                /**
                 * @file seek-bar.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _sliderSliderJs = _dereq_('../../slider/slider.js');

                var _sliderSliderJs2 = _interopRequireDefault(_sliderSliderJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _loadProgressBarJs = _dereq_('./load-progress-bar.js');

                var _loadProgressBarJs2 = _interopRequireDefault(_loadProgressBarJs);

                var _playProgressBarJs = _dereq_('./play-progress-bar.js');

                var _playProgressBarJs2 = _interopRequireDefault(_playProgressBarJs);

                var _tooltipProgressBarJs = _dereq_('./tooltip-progress-bar.js');

                var _tooltipProgressBarJs2 = _interopRequireDefault(_tooltipProgressBarJs);

                var _utilsFnJs = _dereq_('../../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

                var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

                var _objectAssign = _dereq_('object.assign');

                var _objectAssign2 = _interopRequireDefault(_objectAssign);

                /**
                 * Seek Bar and holder for the progress bars
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Slider
                 * @class SeekBar
                 */

                var SeekBar = (function (_Slider) {
                    _inherits(SeekBar, _Slider);

                    function SeekBar(player, options) {
                        _classCallCheck(this, SeekBar);

                        _Slider.call(this, player, options);
                        this.on(player, 'timeupdate', this.updateProgress);
                        this.on(player, 'ended', this.updateProgress);
                        player.ready(Fn.bind(this, this.updateProgress));

                        if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
                            this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
                        }

                        if (this.keepTooltipsInside) {
                            this.tooltipProgressBar = this.addChild('TooltipProgressBar');
                        }
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    SeekBar.prototype.createEl = function createEl() {
                        return _Slider.prototype.createEl.call(this, 'div', {
                            className: 'vjs-progress-holder'
                        }, {
                            'aria-label': 'progress bar'
                        });
                    };

                    /**
                     * Update ARIA accessibility attributes
                     *
                     * @method updateARIAAttributes
                     */

                    SeekBar.prototype.updateProgress = function updateProgress() {
                        this.updateAriaAttributes(this.el_);

                        if (this.keepTooltipsInside) {
                            this.updateAriaAttributes(this.tooltipProgressBar.el_);
                            this.tooltipProgressBar.el_.style.width = this.bar.el_.style.width;

                            var playerWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.player().el()).width);
                            var tooltipWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.tooltipProgressBar.tooltip).width);
                            var tooltipStyle = this.tooltipProgressBar.el().style;
                            tooltipStyle.maxWidth = Math.floor(playerWidth - tooltipWidth / 2) + 'px';
                            tooltipStyle.minWidth = Math.ceil(tooltipWidth / 2) + 'px';
                            tooltipStyle.right = '-' + tooltipWidth / 2 + 'px';
                        }
                    };

                    SeekBar.prototype.updateAriaAttributes = function updateAriaAttributes(el) {
                        // Allows for smooth scrubbing, when player can't keep up.
                        var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                        el.setAttribute('aria-valuenow', (this.getPercent() * 100).toFixed(2)); // machine readable value of progress bar (percentage complete)
                        el.setAttribute('aria-valuetext', _utilsFormatTimeJs2['default'](time, this.player_.duration())); // human readable value of progress bar (time complete)
                    };

                    /**
                     * Get percentage of video played
                     *
                     * @return {Number} Percentage played
                     * @method getPercent
                     */

                    SeekBar.prototype.getPercent = function getPercent() {
                        var percent = this.player_.currentTime() / this.player_.duration();
                        return percent >= 1 ? 1 : percent;
                    };

                    /**
                     * Handle mouse down on seek bar
                     *
                     * @method handleMouseDown
                     */

                    SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {
                        _Slider.prototype.handleMouseDown.call(this, event);

                        this.player_.scrubbing(true);

                        this.videoWasPlaying = !this.player_.paused();
                        this.player_.pause();
                    };

                    /**
                     * Handle mouse move on seek bar
                     *
                     * @method handleMouseMove
                     */

                    SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
                        var newTime = this.calculateDistance(event) * this.player_.duration();

                        // Don't let video end while scrubbing.
                        if (newTime === this.player_.duration()) {
                            newTime = newTime - 0.1;
                        }

                        // Set new time (tell player to seek to new time)
                        this.player_.currentTime(newTime);
                    };

                    /**
                     * Handle mouse up on seek bar
                     *
                     * @method handleMouseUp
                     */

                    SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {
                        _Slider.prototype.handleMouseUp.call(this, event);

                        this.player_.scrubbing(false);
                        if (this.videoWasPlaying) {
                            this.player_.play();
                        }
                    };

                    /**
                     * Move more quickly fast forward for keyboard-only users
                     *
                     * @method stepForward
                     */

                    SeekBar.prototype.stepForward = function stepForward() {
                        this.player_.currentTime(this.player_.currentTime() + 5); // more quickly fast forward for keyboard-only users
                    };

                    /**
                     * Move more quickly rewind for keyboard-only users
                     *
                     * @method stepBack
                     */

                    SeekBar.prototype.stepBack = function stepBack() {
                        this.player_.currentTime(this.player_.currentTime() - 5); // more quickly rewind for keyboard-only users
                    };

                    return SeekBar;
                })(_sliderSliderJs2['default']);

                SeekBar.prototype.options_ = {
                    children: ['loadProgressBar', 'mouseTimeDisplay', 'playProgressBar'],
                    'barName': 'playProgressBar'
                };

                SeekBar.prototype.playerEvent = 'timeupdate';

                _componentJs2['default'].registerComponent('SeekBar', SeekBar);
                exports['default'] = SeekBar;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../slider/slider.js":116,"../../utils/fn.js":136,"../../utils/format-time.js":137,"./load-progress-bar.js":75,"./play-progress-bar.js":77,"./tooltip-progress-bar.js":80,"global/window":2,"object.assign":45}],80:[function(_dereq_,module,exports){
                /**
                 * @file play-progress-bar.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsFnJs = _dereq_('../../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsDomJs = _dereq_('../../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

                var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

                /**
                 * Shows play progress
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Component
                 * @class PlayProgressBar
                 */

                var TooltipProgressBar = (function (_Component) {
                    _inherits(TooltipProgressBar, _Component);

                    function TooltipProgressBar(player, options) {
                        _classCallCheck(this, TooltipProgressBar);

                        _Component.call(this, player, options);
                        this.updateDataAttr();
                        this.on(player, 'timeupdate', this.updateDataAttr);
                        player.ready(Fn.bind(this, this.updateDataAttr));
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    TooltipProgressBar.prototype.createEl = function createEl() {
                        var el = _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-tooltip-progress-bar vjs-slider-bar',
                            innerHTML: '<div class="vjs-time-tooltip"></div>\n        <span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
                        });

                        this.tooltip = el.querySelector('.vjs-time-tooltip');

                        return el;
                    };

                    TooltipProgressBar.prototype.updateDataAttr = function updateDataAttr() {
                        var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                        var formattedTime = _utilsFormatTimeJs2['default'](time, this.player_.duration());
                        this.el_.setAttribute('data-current-time', formattedTime);
                        this.tooltip.innerHTML = formattedTime;
                    };

                    return TooltipProgressBar;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('TooltipProgressBar', TooltipProgressBar);
                exports['default'] = TooltipProgressBar;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../utils/dom.js":134,"../../utils/fn.js":136,"../../utils/format-time.js":137}],81:[function(_dereq_,module,exports){
                /**
                 * @file custom-control-spacer.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _spacerJs = _dereq_('./spacer.js');

                var _spacerJs2 = _interopRequireDefault(_spacerJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                /**
                 * Spacer specifically meant to be used as an insertion point for new plugins, etc.
                 *
                 * @extends Spacer
                 * @class CustomControlSpacer
                 */

                var CustomControlSpacer = (function (_Spacer) {
                    _inherits(CustomControlSpacer, _Spacer);

                    function CustomControlSpacer() {
                        _classCallCheck(this, CustomControlSpacer);

                        _Spacer.apply(this, arguments);
                    }

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);
                    };

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    CustomControlSpacer.prototype.createEl = function createEl() {
                        var el = _Spacer.prototype.createEl.call(this, {
                            className: this.buildCSSClass()
                        });

                        // No-flex/table-cell mode requires there be some content
                        // in the cell to fill the remaining space of the table.
                        el.innerHTML = '&nbsp;';
                        return el;
                    };

                    return CustomControlSpacer;
                })(_spacerJs2['default']);

                _componentJs2['default'].registerComponent('CustomControlSpacer', CustomControlSpacer);
                exports['default'] = CustomControlSpacer;
                module.exports = exports['default'];

            },{"../../component.js":67,"./spacer.js":82}],82:[function(_dereq_,module,exports){
                /**
                 * @file spacer.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                /**
                 * Just an empty spacer element that can be used as an append point for plugins, etc.
                 * Also can be used to create space between elements when necessary.
                 *
                 * @extends Component
                 * @class Spacer
                 */

                var Spacer = (function (_Component) {
                    _inherits(Spacer, _Component);

                    function Spacer() {
                        _classCallCheck(this, Spacer);

                        _Component.apply(this, arguments);
                    }

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    Spacer.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);
                    };

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    Spacer.prototype.createEl = function createEl() {
                        return _Component.prototype.createEl.call(this, 'div', {
                            className: this.buildCSSClass()
                        });
                    };

                    return Spacer;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('Spacer', Spacer);

                exports['default'] = Spacer;
                module.exports = exports['default'];

            },{"../../component.js":67}],83:[function(_dereq_,module,exports){
                /**
                 * @file caption-settings-menu-item.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

                var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                /**
                 * The menu item for caption track settings menu
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends TextTrackMenuItem
                 * @class CaptionSettingsMenuItem
                 */

                var CaptionSettingsMenuItem = (function (_TextTrackMenuItem) {
                    _inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);

                    function CaptionSettingsMenuItem(player, options) {
                        _classCallCheck(this, CaptionSettingsMenuItem);

                        options['track'] = {
                            'kind': options['kind'],
                            'player': player,
                            'label': options['kind'] + ' settings',
                            'selectable': false,
                            'default': false,
                            mode: 'disabled'
                        };

                        // CaptionSettingsMenuItem has no concept of 'selected'
                        options['selectable'] = false;

                        _TextTrackMenuItem.call(this, player, options);
                        this.addClass('vjs-texttrack-settings');
                        this.controlText(', opens ' + options['kind'] + ' settings dialog');
                    }

                    /**
                     * Handle click on menu item
                     *
                     * @method handleClick
                     */

                    CaptionSettingsMenuItem.prototype.handleClick = function handleClick() {
                        this.player().getChild('textTrackSettings').show();
                        this.player().getChild('textTrackSettings').el_.focus();
                    };

                    return CaptionSettingsMenuItem;
                })(_textTrackMenuItemJs2['default']);

                _componentJs2['default'].registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);
                exports['default'] = CaptionSettingsMenuItem;
                module.exports = exports['default'];

            },{"../../component.js":67,"./text-track-menu-item.js":91}],84:[function(_dereq_,module,exports){
                /**
                 * @file captions-button.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _textTrackButtonJs = _dereq_('./text-track-button.js');

                var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _captionSettingsMenuItemJs = _dereq_('./caption-settings-menu-item.js');

                var _captionSettingsMenuItemJs2 = _interopRequireDefault(_captionSettingsMenuItemJs);

                /**
                 * The button component for toggling and selecting captions
                 *
                 * @param {Object} player  Player object
                 * @param {Object=} options Object of option names and values
                 * @param {Function=} ready    Ready callback function
                 * @extends TextTrackButton
                 * @class CaptionsButton
                 */

                var CaptionsButton = (function (_TextTrackButton) {
                    _inherits(CaptionsButton, _TextTrackButton);

                    function CaptionsButton(player, options, ready) {
                        _classCallCheck(this, CaptionsButton);

                        _TextTrackButton.call(this, player, options, ready);
                        this.el_.setAttribute('aria-label', 'Captions Menu');
                    }

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
                    };

                    /**
                     * Update caption menu items
                     *
                     * @method update
                     */

                    CaptionsButton.prototype.update = function update() {
                        var threshold = 2;
                        _TextTrackButton.prototype.update.call(this);

                        // if native, then threshold is 1 because no settings button
                        if (this.player().tech_ && this.player().tech_['featuresNativeTextTracks']) {
                            threshold = 1;
                        }

                        if (this.items && this.items.length > threshold) {
                            this.show();
                        } else {
                            this.hide();
                        }
                    };

                    /**
                     * Create caption menu items
                     *
                     * @return {Array} Array of menu items
                     * @method createItems
                     */

                    CaptionsButton.prototype.createItems = function createItems() {
                        var items = [];

                        if (!(this.player().tech_ && this.player().tech_['featuresNativeTextTracks'])) {
                            items.push(new _captionSettingsMenuItemJs2['default'](this.player_, { 'kind': this.kind_ }));
                        }

                        return _TextTrackButton.prototype.createItems.call(this, items);
                    };

                    return CaptionsButton;
                })(_textTrackButtonJs2['default']);

                CaptionsButton.prototype.kind_ = 'captions';
                CaptionsButton.prototype.controlText_ = 'Captions';

                _componentJs2['default'].registerComponent('CaptionsButton', CaptionsButton);
                exports['default'] = CaptionsButton;
                module.exports = exports['default'];

            },{"../../component.js":67,"./caption-settings-menu-item.js":83,"./text-track-button.js":90}],85:[function(_dereq_,module,exports){
                /**
                 * @file chapters-button.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _textTrackButtonJs = _dereq_('./text-track-button.js');

                var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

                var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

                var _chaptersTrackMenuItemJs = _dereq_('./chapters-track-menu-item.js');

                var _chaptersTrackMenuItemJs2 = _interopRequireDefault(_chaptersTrackMenuItemJs);

                var _menuMenuJs = _dereq_('../../menu/menu.js');

                var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);

                var _utilsDomJs = _dereq_('../../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsFnJs = _dereq_('../../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsToTitleCaseJs = _dereq_('../../utils/to-title-case.js');

                var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                /**
                 * The button component for toggling and selecting chapters
                 * Chapters act much differently than other text tracks
                 * Cues are navigation vs. other tracks of alternative languages
                 *
                 * @param {Object} player  Player object
                 * @param {Object=} options Object of option names and values
                 * @param {Function=} ready    Ready callback function
                 * @extends TextTrackButton
                 * @class ChaptersButton
                 */

                var ChaptersButton = (function (_TextTrackButton) {
                    _inherits(ChaptersButton, _TextTrackButton);

                    function ChaptersButton(player, options, ready) {
                        _classCallCheck(this, ChaptersButton);

                        _TextTrackButton.call(this, player, options, ready);
                        this.el_.setAttribute('aria-label', 'Chapters Menu');
                    }

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
                    };

                    /**
                     * Create a menu item for each text track
                     *
                     * @return {Array} Array of menu items
                     * @method createItems
                     */

                    ChaptersButton.prototype.createItems = function createItems() {
                        var items = [];

                        var tracks = this.player_.textTracks();

                        if (!tracks) {
                            return items;
                        }

                        for (var i = 0; i < tracks.length; i++) {
                            var track = tracks[i];
                            if (track['kind'] === this.kind_) {
                                items.push(new _textTrackMenuItemJs2['default'](this.player_, {
                                    'track': track
                                }));
                            }
                        }

                        return items;
                    };

                    /**
                     * Create menu from chapter buttons
                     *
                     * @return {Menu} Menu of chapter buttons
                     * @method createMenu
                     */

                    ChaptersButton.prototype.createMenu = function createMenu() {
                        var _this = this;

                        var tracks = this.player_.textTracks() || [];
                        var chaptersTrack = undefined;
                        var items = this.items = [];

                        for (var i = 0, _length = tracks.length; i < _length; i++) {
                            var track = tracks[i];

                            if (track['kind'] === this.kind_) {
                                chaptersTrack = track;

                                break;
                            }
                        }

                        var menu = this.menu;
                        if (menu === undefined) {
                            menu = new _menuMenuJs2['default'](this.player_);
                            var title = Dom.createEl('li', {
                                className: 'vjs-menu-title',
                                innerHTML: _utilsToTitleCaseJs2['default'](this.kind_),
                                tabIndex: -1
                            });
                            menu.children_.unshift(title);
                            Dom.insertElFirst(title, menu.contentEl());
                        }

                        if (chaptersTrack && chaptersTrack.cues == null) {
                            chaptersTrack['mode'] = 'hidden';

                            var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(chaptersTrack);

                            if (remoteTextTrackEl) {
                                remoteTextTrackEl.addEventListener('load', function (event) {
                                    return _this.update();
                                });
                            }
                        }

                        if (chaptersTrack && chaptersTrack.cues && chaptersTrack.cues.length > 0) {
                            var cues = chaptersTrack['cues'],
                                cue = undefined;

                            for (var i = 0, l = cues.length; i < l; i++) {
                                cue = cues[i];

                                var mi = new _chaptersTrackMenuItemJs2['default'](this.player_, {
                                    'track': chaptersTrack,
                                    'cue': cue
                                });

                                items.push(mi);

                                menu.addChild(mi);
                            }

                            this.addChild(menu);
                        }

                        if (this.items.length > 0) {
                            this.show();
                        }

                        return menu;
                    };

                    return ChaptersButton;
                })(_textTrackButtonJs2['default']);

                ChaptersButton.prototype.kind_ = 'chapters';
                ChaptersButton.prototype.controlText_ = 'Chapters';

                _componentJs2['default'].registerComponent('ChaptersButton', ChaptersButton);
                exports['default'] = ChaptersButton;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../menu/menu.js":108,"../../utils/dom.js":134,"../../utils/fn.js":136,"../../utils/to-title-case.js":143,"./chapters-track-menu-item.js":86,"./text-track-button.js":90,"./text-track-menu-item.js":91,"global/window":2}],86:[function(_dereq_,module,exports){
                /**
                 * @file chapters-track-menu-item.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

                var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsFnJs = _dereq_('../../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                /**
                 * The chapter track menu item
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends MenuItem
                 * @class ChaptersTrackMenuItem
                 */

                var ChaptersTrackMenuItem = (function (_MenuItem) {
                    _inherits(ChaptersTrackMenuItem, _MenuItem);

                    function ChaptersTrackMenuItem(player, options) {
                        _classCallCheck(this, ChaptersTrackMenuItem);

                        var track = options['track'];
                        var cue = options['cue'];
                        var currentTime = player.currentTime();

                        // Modify options for parent MenuItem class's init.
                        options['label'] = cue.text;
                        options['selected'] = cue['startTime'] <= currentTime && currentTime < cue['endTime'];
                        _MenuItem.call(this, player, options);

                        this.track = track;
                        this.cue = cue;
                        track.addEventListener('cuechange', Fn.bind(this, this.update));
                    }

                    /**
                     * Handle click on menu item
                     *
                     * @method handleClick
                     */

                    ChaptersTrackMenuItem.prototype.handleClick = function handleClick() {
                        _MenuItem.prototype.handleClick.call(this);
                        this.player_.currentTime(this.cue.startTime);
                        this.update(this.cue.startTime);
                    };

                    /**
                     * Update chapter menu item
                     *
                     * @method update
                     */

                    ChaptersTrackMenuItem.prototype.update = function update() {
                        var cue = this.cue;
                        var currentTime = this.player_.currentTime();

                        // vjs.log(currentTime, cue.startTime);
                        this.selected(cue['startTime'] <= currentTime && currentTime < cue['endTime']);
                    };

                    return ChaptersTrackMenuItem;
                })(_menuMenuItemJs2['default']);

                _componentJs2['default'].registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);
                exports['default'] = ChaptersTrackMenuItem;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../menu/menu-item.js":107,"../../utils/fn.js":136}],87:[function(_dereq_,module,exports){
                /**
                 * @file descriptions-button.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _textTrackButtonJs = _dereq_('./text-track-button.js');

                var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsFnJs = _dereq_('../../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                /**
                 * The button component for toggling and selecting descriptions
                 *
                 * @param {Object} player  Player object
                 * @param {Object=} options Object of option names and values
                 * @param {Function=} ready    Ready callback function
                 * @extends TextTrackButton
                 * @class DescriptionsButton
                 */

                var DescriptionsButton = (function (_TextTrackButton) {
                    _inherits(DescriptionsButton, _TextTrackButton);

                    function DescriptionsButton(player, options, ready) {
                        var _this = this;

                        _classCallCheck(this, DescriptionsButton);

                        _TextTrackButton.call(this, player, options, ready);
                        this.el_.setAttribute('aria-label', 'Descriptions Menu');

                        var tracks = player.textTracks();

                        if (tracks) {
                            (function () {
                                var changeHandler = Fn.bind(_this, _this.handleTracksChange);

                                tracks.addEventListener('change', changeHandler);
                                _this.on('dispose', function () {
                                    tracks.removeEventListener('change', changeHandler);
                                });
                            })();
                        }
                    }

                    /**
                     * Handle text track change
                     *
                     * @method handleTracksChange
                     */

                    DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {
                        var tracks = this.player().textTracks();
                        var disabled = false;

                        // Check whether a track of a different kind is showing
                        for (var i = 0, l = tracks.length; i < l; i++) {
                            var track = tracks[i];
                            if (track['kind'] !== this.kind_ && track['mode'] === 'showing') {
                                disabled = true;
                                break;
                            }
                        }

                        // If another track is showing, disable this menu button
                        if (disabled) {
                            this.disable();
                        } else {
                            this.enable();
                        }
                    };

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
                    };

                    return DescriptionsButton;
                })(_textTrackButtonJs2['default']);

                DescriptionsButton.prototype.kind_ = 'descriptions';
                DescriptionsButton.prototype.controlText_ = 'Descriptions';

                _componentJs2['default'].registerComponent('DescriptionsButton', DescriptionsButton);
                exports['default'] = DescriptionsButton;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../utils/fn.js":136,"./text-track-button.js":90}],88:[function(_dereq_,module,exports){
                /**
                 * @file off-text-track-menu-item.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

                var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                /**
                 * A special menu item for turning of a specific type of text track
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends TextTrackMenuItem
                 * @class OffTextTrackMenuItem
                 */

                var OffTextTrackMenuItem = (function (_TextTrackMenuItem) {
                    _inherits(OffTextTrackMenuItem, _TextTrackMenuItem);

                    function OffTextTrackMenuItem(player, options) {
                        _classCallCheck(this, OffTextTrackMenuItem);

                        // Create pseudo track info
                        // Requires options['kind']
                        options['track'] = {
                            'kind': options['kind'],
                            'player': player,
                            'label': options['kind'] + ' off',
                            'default': false,
                            'mode': 'disabled'
                        };

                        // MenuItem is selectable
                        options['selectable'] = true;

                        _TextTrackMenuItem.call(this, player, options);
                        this.selected(true);
                    }

                    /**
                     * Handle text track change
                     *
                     * @param {Object} event Event object
                     * @method handleTracksChange
                     */

                    OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
                        var tracks = this.player().textTracks();
                        var selected = true;

                        for (var i = 0, l = tracks.length; i < l; i++) {
                            var track = tracks[i];
                            if (track['kind'] === this.track['kind'] && track['mode'] === 'showing') {
                                selected = false;
                                break;
                            }
                        }

                        this.selected(selected);
                    };

                    return OffTextTrackMenuItem;
                })(_textTrackMenuItemJs2['default']);

                _componentJs2['default'].registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);
                exports['default'] = OffTextTrackMenuItem;
                module.exports = exports['default'];

            },{"../../component.js":67,"./text-track-menu-item.js":91}],89:[function(_dereq_,module,exports){
                /**
                 * @file subtitles-button.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _textTrackButtonJs = _dereq_('./text-track-button.js');

                var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                /**
                 * The button component for toggling and selecting subtitles
                 *
                 * @param {Object} player  Player object
                 * @param {Object=} options Object of option names and values
                 * @param {Function=} ready    Ready callback function
                 * @extends TextTrackButton
                 * @class SubtitlesButton
                 */

                var SubtitlesButton = (function (_TextTrackButton) {
                    _inherits(SubtitlesButton, _TextTrackButton);

                    function SubtitlesButton(player, options, ready) {
                        _classCallCheck(this, SubtitlesButton);

                        _TextTrackButton.call(this, player, options, ready);
                        this.el_.setAttribute('aria-label', 'Subtitles Menu');
                    }

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
                    };

                    return SubtitlesButton;
                })(_textTrackButtonJs2['default']);

                SubtitlesButton.prototype.kind_ = 'subtitles';
                SubtitlesButton.prototype.controlText_ = 'Subtitles';

                _componentJs2['default'].registerComponent('SubtitlesButton', SubtitlesButton);
                exports['default'] = SubtitlesButton;
                module.exports = exports['default'];

            },{"../../component.js":67,"./text-track-button.js":90}],90:[function(_dereq_,module,exports){
                /**
                 * @file text-track-button.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _menuMenuButtonJs = _dereq_('../../menu/menu-button.js');

                var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsFnJs = _dereq_('../../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');

                var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);

                var _offTextTrackMenuItemJs = _dereq_('./off-text-track-menu-item.js');

                var _offTextTrackMenuItemJs2 = _interopRequireDefault(_offTextTrackMenuItemJs);

                /**
                 * The base class for buttons that toggle specific text track types (e.g. subtitles)
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends MenuButton
                 * @class TextTrackButton
                 */

                var TextTrackButton = (function (_MenuButton) {
                    _inherits(TextTrackButton, _MenuButton);

                    function TextTrackButton(player, options) {
                        _classCallCheck(this, TextTrackButton);

                        _MenuButton.call(this, player, options);

                        var tracks = this.player_.textTracks();

                        if (this.items.length <= 1) {
                            this.hide();
                        }

                        if (!tracks) {
                            return;
                        }

                        var updateHandler = Fn.bind(this, this.update);
                        tracks.addEventListener('removetrack', updateHandler);
                        tracks.addEventListener('addtrack', updateHandler);

                        this.player_.on('dispose', function () {
                            tracks.removeEventListener('removetrack', updateHandler);
                            tracks.removeEventListener('addtrack', updateHandler);
                        });
                    }

                    // Create a menu item for each text track

                    TextTrackButton.prototype.createItems = function createItems() {
                        var items = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

                        // Add an OFF menu item to turn all tracks off
                        items.push(new _offTextTrackMenuItemJs2['default'](this.player_, { 'kind': this.kind_ }));

                        var tracks = this.player_.textTracks();

                        if (!tracks) {
                            return items;
                        }

                        for (var i = 0; i < tracks.length; i++) {
                            var track = tracks[i];

                            // only add tracks that are of the appropriate kind and have a label
                            if (track['kind'] === this.kind_) {
                                items.push(new _textTrackMenuItemJs2['default'](this.player_, {
                                    // MenuItem is selectable
                                    'selectable': true,
                                    'track': track
                                }));
                            }
                        }

                        return items;
                    };

                    return TextTrackButton;
                })(_menuMenuButtonJs2['default']);

                _componentJs2['default'].registerComponent('TextTrackButton', TextTrackButton);
                exports['default'] = TextTrackButton;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../menu/menu-button.js":106,"../../utils/fn.js":136,"./off-text-track-menu-item.js":88,"./text-track-menu-item.js":91}],91:[function(_dereq_,module,exports){
                /**
                 * @file text-track-menu-item.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');

                var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsFnJs = _dereq_('../../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                /**
                 * The specific menu item type for selecting a language within a text track kind
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends MenuItem
                 * @class TextTrackMenuItem
                 */

                var TextTrackMenuItem = (function (_MenuItem) {
                    _inherits(TextTrackMenuItem, _MenuItem);

                    function TextTrackMenuItem(player, options) {
                        var _this = this;

                        _classCallCheck(this, TextTrackMenuItem);

                        var track = options['track'];
                        var tracks = player.textTracks();

                        // Modify options for parent MenuItem class's init.
                        options['label'] = track['label'] || track['language'] || 'Unknown';
                        options['selected'] = track['default'] || track['mode'] === 'showing';

                        _MenuItem.call(this, player, options);

                        this.track = track;

                        if (tracks) {
                            (function () {
                                var changeHandler = Fn.bind(_this, _this.handleTracksChange);

                                tracks.addEventListener('change', changeHandler);
                                _this.on('dispose', function () {
                                    tracks.removeEventListener('change', changeHandler);
                                });
                            })();
                        }

                        // iOS7 doesn't dispatch change events to TextTrackLists when an
                        // associated track's mode changes. Without something like
                        // Object.observe() (also not present on iOS7), it's not
                        // possible to detect changes to the mode attribute and polyfill
                        // the change event. As a poor substitute, we manually dispatch
                        // change events whenever the controls modify the mode.
                        if (tracks && tracks.onchange === undefined) {
                            (function () {
                                var event = undefined;

                                _this.on(['tap', 'click'], function () {
                                    if (typeof _globalWindow2['default'].Event !== 'object') {
                                        // Android 2.3 throws an Illegal Constructor error for window.Event
                                        try {
                                            event = new _globalWindow2['default'].Event('change');
                                        } catch (err) {}
                                    }

                                    if (!event) {
                                        event = _globalDocument2['default'].createEvent('Event');
                                        event.initEvent('change', true, true);
                                    }

                                    tracks.dispatchEvent(event);
                                });
                            })();
                        }
                    }

                    /**
                     * Handle click on text track
                     *
                     * @method handleClick
                     */

                    TextTrackMenuItem.prototype.handleClick = function handleClick(event) {
                        var kind = this.track['kind'];
                        var tracks = this.player_.textTracks();

                        _MenuItem.prototype.handleClick.call(this, event);

                        if (!tracks) return;

                        for (var i = 0; i < tracks.length; i++) {
                            var track = tracks[i];

                            if (track['kind'] !== kind) {
                                continue;
                            }

                            if (track === this.track) {
                                track['mode'] = 'showing';
                            } else {
                                track['mode'] = 'disabled';
                            }
                        }
                    };

                    /**
                     * Handle text track change
                     *
                     * @method handleTracksChange
                     */

                    TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
                        this.selected(this.track['mode'] === 'showing');
                    };

                    return TextTrackMenuItem;
                })(_menuMenuItemJs2['default']);

                _componentJs2['default'].registerComponent('TextTrackMenuItem', TextTrackMenuItem);
                exports['default'] = TextTrackMenuItem;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../menu/menu-item.js":107,"../../utils/fn.js":136,"global/document":1,"global/window":2}],92:[function(_dereq_,module,exports){
                /**
                 * @file current-time-display.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsDomJs = _dereq_('../../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

                var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

                /**
                 * Displays the current time
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Component
                 * @class CurrentTimeDisplay
                 */

                var CurrentTimeDisplay = (function (_Component) {
                    _inherits(CurrentTimeDisplay, _Component);

                    function CurrentTimeDisplay(player, options) {
                        _classCallCheck(this, CurrentTimeDisplay);

                        _Component.call(this, player, options);

                        this.on(player, 'timeupdate', this.updateContent);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    CurrentTimeDisplay.prototype.createEl = function createEl() {
                        var el = _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-current-time vjs-time-control vjs-control'
                        });

                        this.contentEl_ = Dom.createEl('div', {
                            className: 'vjs-current-time-display',
                            // label the current time for screen reader users
                            innerHTML: '<span class="vjs-control-text">Current Time </span>' + '0:00'
                        }, {
                            // tell screen readers not to automatically read the time as it changes
                            'aria-live': 'off'
                        });

                        el.appendChild(this.contentEl_);
                        return el;
                    };

                    /**
                     * Update current time display
                     *
                     * @method updateContent
                     */

                    CurrentTimeDisplay.prototype.updateContent = function updateContent() {
                        // Allows for smooth scrubbing, when player can't keep up.
                        var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                        var localizedText = this.localize('Current Time');
                        var formattedTime = _utilsFormatTimeJs2['default'](time, this.player_.duration());
                        if (formattedTime !== this.formattedTime_) {
                            this.formattedTime_ = formattedTime;
                            this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime;
                        }
                    };

                    return CurrentTimeDisplay;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);
                exports['default'] = CurrentTimeDisplay;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../utils/dom.js":134,"../../utils/format-time.js":137}],93:[function(_dereq_,module,exports){
                /**
                 * @file duration-display.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsDomJs = _dereq_('../../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

                var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

                /**
                 * Displays the duration
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Component
                 * @class DurationDisplay
                 */

                var DurationDisplay = (function (_Component) {
                    _inherits(DurationDisplay, _Component);

                    function DurationDisplay(player, options) {
                        _classCallCheck(this, DurationDisplay);

                        _Component.call(this, player, options);

                        // this might need to be changed to 'durationchange' instead of 'timeupdate' eventually,
                        // however the durationchange event fires before this.player_.duration() is set,
                        // so the value cannot be written out using this method.
                        // Once the order of durationchange and this.player_.duration() being set is figured out,
                        // this can be updated.
                        this.on(player, 'timeupdate', this.updateContent);
                        this.on(player, 'loadedmetadata', this.updateContent);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    DurationDisplay.prototype.createEl = function createEl() {
                        var el = _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-duration vjs-time-control vjs-control'
                        });

                        this.contentEl_ = Dom.createEl('div', {
                            className: 'vjs-duration-display',
                            // label the duration time for screen reader users
                            innerHTML: '<span class="vjs-control-text">' + this.localize('Duration Time') + '</span> 0:00'
                        }, {
                            // tell screen readers not to automatically read the time as it changes
                            'aria-live': 'off'
                        });

                        el.appendChild(this.contentEl_);
                        return el;
                    };

                    /**
                     * Update duration time display
                     *
                     * @method updateContent
                     */

                    DurationDisplay.prototype.updateContent = function updateContent() {
                        var duration = this.player_.duration();
                        if (duration && this.duration_ !== duration) {
                            this.duration_ = duration;
                            var localizedText = this.localize('Duration Time');
                            var formattedTime = _utilsFormatTimeJs2['default'](duration);
                            this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime; // label the duration time for screen reader users
                        }
                    };

                    return DurationDisplay;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('DurationDisplay', DurationDisplay);
                exports['default'] = DurationDisplay;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../utils/dom.js":134,"../../utils/format-time.js":137}],94:[function(_dereq_,module,exports){
                /**
                 * @file remaining-time-display.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsDomJs = _dereq_('../../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');

                var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

                /**
                 * Displays the time left in the video
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Component
                 * @class RemainingTimeDisplay
                 */

                var RemainingTimeDisplay = (function (_Component) {
                    _inherits(RemainingTimeDisplay, _Component);

                    function RemainingTimeDisplay(player, options) {
                        _classCallCheck(this, RemainingTimeDisplay);

                        _Component.call(this, player, options);

                        this.on(player, 'timeupdate', this.updateContent);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    RemainingTimeDisplay.prototype.createEl = function createEl() {
                        var el = _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-remaining-time vjs-time-control vjs-control'
                        });

                        this.contentEl_ = Dom.createEl('div', {
                            className: 'vjs-remaining-time-display',
                            // label the remaining time for screen reader users
                            innerHTML: '<span class="vjs-control-text">' + this.localize('Remaining Time') + '</span> -0:00'
                        }, {
                            // tell screen readers not to automatically read the time as it changes
                            'aria-live': 'off'
                        });

                        el.appendChild(this.contentEl_);
                        return el;
                    };

                    /**
                     * Update remaining time display
                     *
                     * @method updateContent
                     */

                    RemainingTimeDisplay.prototype.updateContent = function updateContent() {
                        if (this.player_.duration()) {
                            var localizedText = this.localize('Remaining Time');
                            var formattedTime = _utilsFormatTimeJs2['default'](this.player_.remainingTime());
                            if (formattedTime !== this.formattedTime_) {
                                this.formattedTime_ = formattedTime;
                                this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> -' + formattedTime;
                            }
                        }

                        // Allows for smooth scrubbing, when player can't keep up.
                        // var time = (this.player_.scrubbing()) ? this.player_.getCache().currentTime : this.player_.currentTime();
                        // this.contentEl_.innerHTML = vjs.formatTime(time, this.player_.duration());
                    };

                    return RemainingTimeDisplay;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);
                exports['default'] = RemainingTimeDisplay;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../utils/dom.js":134,"../../utils/format-time.js":137}],95:[function(_dereq_,module,exports){
                /**
                 * @file time-divider.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                /**
                 * The separator between the current time and duration.
                 * Can be hidden if it's not needed in the design.
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Component
                 * @class TimeDivider
                 */

                var TimeDivider = (function (_Component) {
                    _inherits(TimeDivider, _Component);

                    function TimeDivider() {
                        _classCallCheck(this, TimeDivider);

                        _Component.apply(this, arguments);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    TimeDivider.prototype.createEl = function createEl() {
                        return _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-time-control vjs-time-divider',
                            innerHTML: '<div><span>/</span></div>'
                        });
                    };

                    return TimeDivider;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('TimeDivider', TimeDivider);
                exports['default'] = TimeDivider;
                module.exports = exports['default'];

            },{"../../component.js":67}],96:[function(_dereq_,module,exports){
                /**
                 * @file volume-bar.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _sliderSliderJs = _dereq_('../../slider/slider.js');

                var _sliderSliderJs2 = _interopRequireDefault(_sliderSliderJs);

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsFnJs = _dereq_('../../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

// Required children

                var _volumeLevelJs = _dereq_('./volume-level.js');

                var _volumeLevelJs2 = _interopRequireDefault(_volumeLevelJs);

                /**
                 * The bar that contains the volume level and can be clicked on to adjust the level
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Slider
                 * @class VolumeBar
                 */

                var VolumeBar = (function (_Slider) {
                    _inherits(VolumeBar, _Slider);

                    function VolumeBar(player, options) {
                        _classCallCheck(this, VolumeBar);

                        _Slider.call(this, player, options);
                        this.on(player, 'volumechange', this.updateARIAAttributes);
                        player.ready(Fn.bind(this, this.updateARIAAttributes));
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    VolumeBar.prototype.createEl = function createEl() {
                        return _Slider.prototype.createEl.call(this, 'div', {
                            className: 'vjs-volume-bar vjs-slider-bar'
                        }, {
                            'aria-label': 'volume level'
                        });
                    };

                    /**
                     * Handle mouse move on volume bar
                     *
                     * @method handleMouseMove
                     */

                    VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {
                        this.checkMuted();
                        this.player_.volume(this.calculateDistance(event));
                    };

                    VolumeBar.prototype.checkMuted = function checkMuted() {
                        if (this.player_.muted()) {
                            this.player_.muted(false);
                        }
                    };

                    /**
                     * Get percent of volume level
                     *
                     * @retun {Number} Volume level percent
                     * @method getPercent
                     */

                    VolumeBar.prototype.getPercent = function getPercent() {
                        if (this.player_.muted()) {
                            return 0;
                        } else {
                            return this.player_.volume();
                        }
                    };

                    /**
                     * Increase volume level for keyboard users
                     *
                     * @method stepForward
                     */

                    VolumeBar.prototype.stepForward = function stepForward() {
                        this.checkMuted();
                        this.player_.volume(this.player_.volume() + 0.1);
                    };

                    /**
                     * Decrease volume level for keyboard users
                     *
                     * @method stepBack
                     */

                    VolumeBar.prototype.stepBack = function stepBack() {
                        this.checkMuted();
                        this.player_.volume(this.player_.volume() - 0.1);
                    };

                    /**
                     * Update ARIA accessibility attributes
                     *
                     * @method updateARIAAttributes
                     */

                    VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes() {
                        // Current value of volume bar as a percentage
                        var volume = (this.player_.volume() * 100).toFixed(2);
                        this.el_.setAttribute('aria-valuenow', volume);
                        this.el_.setAttribute('aria-valuetext', volume + '%');
                    };

                    return VolumeBar;
                })(_sliderSliderJs2['default']);

                VolumeBar.prototype.options_ = {
                    children: ['volumeLevel'],
                    'barName': 'volumeLevel'
                };

                VolumeBar.prototype.playerEvent = 'volumechange';

                _componentJs2['default'].registerComponent('VolumeBar', VolumeBar);
                exports['default'] = VolumeBar;
                module.exports = exports['default'];

            },{"../../component.js":67,"../../slider/slider.js":116,"../../utils/fn.js":136,"./volume-level.js":98}],97:[function(_dereq_,module,exports){
                /**
                 * @file volume-control.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

// Required children

                var _volumeBarJs = _dereq_('./volume-bar.js');

                var _volumeBarJs2 = _interopRequireDefault(_volumeBarJs);

                /**
                 * The component for controlling the volume level
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Component
                 * @class VolumeControl
                 */

                var VolumeControl = (function (_Component) {
                    _inherits(VolumeControl, _Component);

                    function VolumeControl(player, options) {
                        _classCallCheck(this, VolumeControl);

                        _Component.call(this, player, options);

                        // hide volume controls when they're not supported by the current tech
                        if (player.tech_ && player.tech_['featuresVolumeControl'] === false) {
                            this.addClass('vjs-hidden');
                        }
                        this.on(player, 'loadstart', function () {
                            if (player.tech_['featuresVolumeControl'] === false) {
                                this.addClass('vjs-hidden');
                            } else {
                                this.removeClass('vjs-hidden');
                            }
                        });
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    VolumeControl.prototype.createEl = function createEl() {
                        return _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-volume-control vjs-control'
                        });
                    };

                    return VolumeControl;
                })(_componentJs2['default']);

                VolumeControl.prototype.options_ = {
                    children: ['volumeBar']
                };

                _componentJs2['default'].registerComponent('VolumeControl', VolumeControl);
                exports['default'] = VolumeControl;
                module.exports = exports['default'];

            },{"../../component.js":67,"./volume-bar.js":96}],98:[function(_dereq_,module,exports){
                /**
                 * @file volume-level.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                /**
                 * Shows volume level
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Component
                 * @class VolumeLevel
                 */

                var VolumeLevel = (function (_Component) {
                    _inherits(VolumeLevel, _Component);

                    function VolumeLevel() {
                        _classCallCheck(this, VolumeLevel);

                        _Component.apply(this, arguments);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    VolumeLevel.prototype.createEl = function createEl() {
                        return _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-volume-level',
                            innerHTML: '<span class="vjs-control-text"></span>'
                        });
                    };

                    return VolumeLevel;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('VolumeLevel', VolumeLevel);
                exports['default'] = VolumeLevel;
                module.exports = exports['default'];

            },{"../../component.js":67}],99:[function(_dereq_,module,exports){
                /**
                 * @file volume-menu-button.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _utilsFnJs = _dereq_('../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _componentJs = _dereq_('../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _popupPopupJs = _dereq_('../popup/popup.js');

                var _popupPopupJs2 = _interopRequireDefault(_popupPopupJs);

                var _popupPopupButtonJs = _dereq_('../popup/popup-button.js');

                var _popupPopupButtonJs2 = _interopRequireDefault(_popupPopupButtonJs);

                var _muteToggleJs = _dereq_('./mute-toggle.js');

                var _muteToggleJs2 = _interopRequireDefault(_muteToggleJs);

                var _volumeControlVolumeBarJs = _dereq_('./volume-control/volume-bar.js');

                var _volumeControlVolumeBarJs2 = _interopRequireDefault(_volumeControlVolumeBarJs);

                /**
                 * Button for volume popup
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends PopupButton
                 * @class VolumeMenuButton
                 */

                var VolumeMenuButton = (function (_PopupButton) {
                    _inherits(VolumeMenuButton, _PopupButton);

                    function VolumeMenuButton(player) {
                        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                        _classCallCheck(this, VolumeMenuButton);

                        // Default to inline
                        if (options.inline === undefined) {
                            options.inline = true;
                        }

                        // If the vertical option isn't passed at all, default to true.
                        if (options.vertical === undefined) {
                            // If an inline volumeMenuButton is used, we should default to using
                            // a horizontal slider for obvious reasons.
                            if (options.inline) {
                                options.vertical = false;
                            } else {
                                options.vertical = true;
                            }
                        }

                        // The vertical option needs to be set on the volumeBar as well,
                        // since that will need to be passed along to the VolumeBar constructor
                        options.volumeBar = options.volumeBar || {};
                        options.volumeBar.vertical = !!options.vertical;

                        _PopupButton.call(this, player, options);

                        // Same listeners as MuteToggle
                        this.on(player, 'volumechange', this.volumeUpdate);
                        this.on(player, 'loadstart', this.volumeUpdate);

                        // hide mute toggle if the current tech doesn't support volume control
                        function updateVisibility() {
                            if (player.tech_ && player.tech_['featuresVolumeControl'] === false) {
                                this.addClass('vjs-hidden');
                            } else {
                                this.removeClass('vjs-hidden');
                            }
                        }

                        updateVisibility.call(this);
                        this.on(player, 'loadstart', updateVisibility);

                        this.on(this.volumeBar, ['slideractive', 'focus'], function () {
                            this.addClass('vjs-slider-active');
                        });

                        this.on(this.volumeBar, ['sliderinactive', 'blur'], function () {
                            this.removeClass('vjs-slider-active');
                        });

                        this.on(this.volumeBar, ['focus'], function () {
                            this.addClass('vjs-lock-showing');
                        });

                        this.on(this.volumeBar, ['blur'], function () {
                            this.removeClass('vjs-lock-showing');
                        });
                    }

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    VolumeMenuButton.prototype.buildCSSClass = function buildCSSClass() {
                        var orientationClass = '';
                        if (!!this.options_.vertical) {
                            orientationClass = 'vjs-volume-menu-button-vertical';
                        } else {
                            orientationClass = 'vjs-volume-menu-button-horizontal';
                        }

                        return 'vjs-volume-menu-button ' + _PopupButton.prototype.buildCSSClass.call(this) + ' ' + orientationClass;
                    };

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {Popup} The volume popup button
                     * @method createPopup
                     */

                    VolumeMenuButton.prototype.createPopup = function createPopup() {
                        var popup = new _popupPopupJs2['default'](this.player_, {
                            contentElType: 'div'
                        });

                        var vb = new _volumeControlVolumeBarJs2['default'](this.player_, this.options_.volumeBar);

                        popup.addChild(vb);

                        this.menuContent = popup;
                        this.volumeBar = vb;

                        this.attachVolumeBarEvents();

                        return popup;
                    };

                    /**
                     * Handle click on volume popup and calls super
                     *
                     * @method handleClick
                     */

                    VolumeMenuButton.prototype.handleClick = function handleClick() {
                        _muteToggleJs2['default'].prototype.handleClick.call(this);
                        _PopupButton.prototype.handleClick.call(this);
                    };

                    VolumeMenuButton.prototype.attachVolumeBarEvents = function attachVolumeBarEvents() {
                        this.menuContent.on(['mousedown', 'touchdown'], Fn.bind(this, this.handleMouseDown));
                    };

                    VolumeMenuButton.prototype.handleMouseDown = function handleMouseDown(event) {
                        this.on(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));
                        this.on(this.el_.ownerDocument, ['mouseup', 'touchend'], this.handleMouseUp);
                    };

                    VolumeMenuButton.prototype.handleMouseUp = function handleMouseUp(event) {
                        this.off(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));
                    };

                    return VolumeMenuButton;
                })(_popupPopupButtonJs2['default']);

                VolumeMenuButton.prototype.volumeUpdate = _muteToggleJs2['default'].prototype.update;
                VolumeMenuButton.prototype.controlText_ = 'Mute';

                _componentJs2['default'].registerComponent('VolumeMenuButton', VolumeMenuButton);
                exports['default'] = VolumeMenuButton;
                module.exports = exports['default'];

            },{"../component.js":67,"../popup/popup-button.js":112,"../popup/popup.js":113,"../utils/fn.js":136,"./mute-toggle.js":71,"./volume-control/volume-bar.js":96}],100:[function(_dereq_,module,exports){
                /**
                 * @file error-display.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _component = _dereq_('./component');

                var _component2 = _interopRequireDefault(_component);

                var _modalDialog = _dereq_('./modal-dialog');

                var _modalDialog2 = _interopRequireDefault(_modalDialog);

                var _utilsDom = _dereq_('./utils/dom');

                var Dom = _interopRequireWildcard(_utilsDom);

                var _utilsMergeOptions = _dereq_('./utils/merge-options');

                var _utilsMergeOptions2 = _interopRequireDefault(_utilsMergeOptions);

                /**
                 * Display that an error has occurred making the video unplayable.
                 *
                 * @extends ModalDialog
                 * @class ErrorDisplay
                 */

                var ErrorDisplay = (function (_ModalDialog) {
                    _inherits(ErrorDisplay, _ModalDialog);

                    /**
                     * Constructor for error display modal.
                     *
                     * @param  {Player} player
                     * @param  {Object} [options]
                     */

                    function ErrorDisplay(player, options) {
                        _classCallCheck(this, ErrorDisplay);

                        _ModalDialog.call(this, player, options);
                        this.on(player, 'error', this.open);
                    }

                    /**
                     * Include the old class for backward-compatibility.
                     *
                     * This can be removed in 6.0.
                     *
                     * @method buildCSSClass
                     * @deprecated
                     * @return {String}
                     */

                    ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {
                        return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);
                    };

                    /**
                     * Generates the modal content based on the player error.
                     *
                     * @return {String|Null}
                     */

                    ErrorDisplay.prototype.content = function content() {
                        var error = this.player().error();
                        return error ? this.localize(error.message) : '';
                    };

                    return ErrorDisplay;
                })(_modalDialog2['default']);

                ErrorDisplay.prototype.options_ = _utilsMergeOptions2['default'](_modalDialog2['default'].prototype.options_, {
                    fillAlways: true,
                    temporary: false,
                    uncloseable: true
                });

                _component2['default'].registerComponent('ErrorDisplay', ErrorDisplay);
                exports['default'] = ErrorDisplay;
                module.exports = exports['default'];

            },{"./component":67,"./modal-dialog":109,"./utils/dom":134,"./utils/merge-options":140}],101:[function(_dereq_,module,exports){
                /**
                 * @file event-target.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                var _utilsEventsJs = _dereq_('./utils/events.js');

                var Events = _interopRequireWildcard(_utilsEventsJs);

                var EventTarget = function EventTarget() {};

                EventTarget.prototype.allowedEvents_ = {};

                EventTarget.prototype.on = function (type, fn) {
                    // Remove the addEventListener alias before calling Events.on
                    // so we don't get into an infinite type loop
                    var ael = this.addEventListener;
                    this.addEventListener = Function.prototype;
                    Events.on(this, type, fn);
                    this.addEventListener = ael;
                };
                EventTarget.prototype.addEventListener = EventTarget.prototype.on;

                EventTarget.prototype.off = function (type, fn) {
                    Events.off(this, type, fn);
                };
                EventTarget.prototype.removeEventListener = EventTarget.prototype.off;

                EventTarget.prototype.one = function (type, fn) {
                    Events.one(this, type, fn);
                };

                EventTarget.prototype.trigger = function (event) {
                    var type = event.type || event;

                    if (typeof event === 'string') {
                        event = {
                            type: type
                        };
                    }
                    event = Events.fixEvent(event);

                    if (this.allowedEvents_[type] && this['on' + type]) {
                        this['on' + type](event);
                    }

                    Events.trigger(this, event);
                };
// The standard DOM EventTarget.dispatchEvent() is aliased to trigger()
                EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;

                exports['default'] = EventTarget;
                module.exports = exports['default'];

            },{"./utils/events.js":135}],102:[function(_dereq_,module,exports){
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var _utilsLog = _dereq_('./utils/log');

                var _utilsLog2 = _interopRequireDefault(_utilsLog);

                /*
                 * @file extend.js
                 *
                 * A combination of node inherits and babel's inherits (after transpile).
                 * Both work the same but node adds `super_` to the subClass
                 * and Bable adds the superClass as __proto__. Both seem useful.
                 */
                var _inherits = function _inherits(subClass, superClass) {
                    if (typeof superClass !== 'function' && superClass !== null) {
                        throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
                    }

                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });

                    if (superClass) {
                        // node
                        subClass.super_ = superClass;
                    }
                };

                /*
                 * Function for subclassing using the same inheritance that
                 * videojs uses internally
                 * ```js
                 * var Button = videojs.getComponent('Button');
                 * ```
                 * ```js
                 * var MyButton = videojs.extend(Button, {
                 *   constructor: function(player, options) {
                 *     Button.call(this, player, options);
                 *   },
                 *   onClick: function() {
                 *     // doSomething
                 *   }
                 * });
                 * ```
                 */
                var extendFn = function extendFn(superClass) {
                    var subClassMethods = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                    var subClass = function subClass() {
                        superClass.apply(this, arguments);
                    };
                    var methods = {};

                    if (typeof subClassMethods === 'object') {
                        if (typeof subClassMethods.init === 'function') {
                            _utilsLog2['default'].warn('Constructor logic via init() is deprecated; please use constructor() instead.');
                            subClassMethods.constructor = subClassMethods.init;
                        }
                        if (subClassMethods.constructor !== Object.prototype.constructor) {
                            subClass = subClassMethods.constructor;
                        }
                        methods = subClassMethods;
                    } else if (typeof subClassMethods === 'function') {
                        subClass = subClassMethods;
                    }

                    _inherits(subClass, superClass);

                    // Extend subObj's prototype with functions and other properties from props
                    for (var name in methods) {
                        if (methods.hasOwnProperty(name)) {
                            subClass.prototype[name] = methods[name];
                        }
                    }

                    return subClass;
                };

                exports['default'] = extendFn;
                module.exports = exports['default'];

            },{"./utils/log":139}],103:[function(_dereq_,module,exports){
                /**
                 * @file fullscreen-api.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                /*
                 * Store the browser-specific methods for the fullscreen API
                 * @type {Object|undefined}
                 * @private
                 */
                var FullscreenApi = {};

// browser API methods
// map approach from Screenful.js - https://github.com/sindresorhus/screenfull.js
                var apiMap = [
// Spec: https://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html
                    ['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
// WebKit
                    ['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Old WebKit (Safari 5.1)
                    ['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Mozilla
                    ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
// Microsoft
                    ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];

                var specApi = apiMap[0];
                var browserApi = undefined;

// determine the supported set of functions
                for (var i = 0; i < apiMap.length; i++) {
                    // check for exitFullscreen function
                    if (apiMap[i][1] in _globalDocument2['default']) {
                        browserApi = apiMap[i];
                        break;
                    }
                }

// map the browser API names to the spec API names
                if (browserApi) {
                    for (var i = 0; i < browserApi.length; i++) {
                        FullscreenApi[specApi[i]] = browserApi[i];
                    }
                }

                exports['default'] = FullscreenApi;
                module.exports = exports['default'];

            },{"global/document":1}],104:[function(_dereq_,module,exports){
                /**
                 * @file loading-spinner.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _component = _dereq_('./component');

                var _component2 = _interopRequireDefault(_component);

                /* Loading Spinner
                 ================================================================================ */
                /**
                 * Loading spinner for waiting events
                 *
                 * @extends Component
                 * @class LoadingSpinner
                 */

                var LoadingSpinner = (function (_Component) {
                    _inherits(LoadingSpinner, _Component);

                    function LoadingSpinner() {
                        _classCallCheck(this, LoadingSpinner);

                        _Component.apply(this, arguments);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @method createEl
                     */

                    LoadingSpinner.prototype.createEl = function createEl() {
                        return _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-loading-spinner',
                            dir: 'ltr'
                        });
                    };

                    return LoadingSpinner;
                })(_component2['default']);

                _component2['default'].registerComponent('LoadingSpinner', LoadingSpinner);
                exports['default'] = LoadingSpinner;
                module.exports = exports['default'];

            },{"./component":67}],105:[function(_dereq_,module,exports){
                /**
                 * @file media-error.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var _objectAssign = _dereq_('object.assign');

                var _objectAssign2 = _interopRequireDefault(_objectAssign);

                /*
                 * Custom MediaError to mimic the HTML5 MediaError
                 *
                 * @param {Number} code The media error code
                 */
                var MediaError = function MediaError(code) {
                    if (typeof code === 'number') {
                        this.code = code;
                    } else if (typeof code === 'string') {
                        // default code is zero, so this is a custom error
                        this.message = code;
                    } else if (typeof code === 'object') {
                        // object
                        _objectAssign2['default'](this, code);
                    }

                    if (!this.message) {
                        this.message = MediaError.defaultMessages[this.code] || '';
                    }
                };

                /*
                 * The error code that refers two one of the defined
                 * MediaError types
                 *
                 * @type {Number}
                 */
                MediaError.prototype.code = 0;

                /*
                 * An optional message to be shown with the error.
                 * Message is not part of the HTML5 video spec
                 * but allows for more informative custom errors.
                 *
                 * @type {String}
                 */
                MediaError.prototype.message = '';

                /*
                 * An optional status code that can be set by plugins
                 * to allow even more detail about the error.
                 * For example the HLS plugin might provide the specific
                 * HTTP status code that was returned when the error
                 * occurred, then allowing a custom error overlay
                 * to display more information.
                 *
                 * @type {Array}
                 */
                MediaError.prototype.status = null;

                MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', // = 0
                    'MEDIA_ERR_ABORTED', // = 1
                    'MEDIA_ERR_NETWORK', // = 2
                    'MEDIA_ERR_DECODE', // = 3
                    'MEDIA_ERR_SRC_NOT_SUPPORTED', // = 4
                    'MEDIA_ERR_ENCRYPTED' // = 5
                ];

                MediaError.defaultMessages = {
                    1: 'You aborted the media playback',
                    2: 'A network error caused the media download to fail part-way.',
                    3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',
                    4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',
                    5: 'The media is encrypted and we do not have the keys to decrypt it.'
                };

// Add types as properties on MediaError
// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
                for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
                    MediaError[MediaError.errorTypes[errNum]] = errNum;
                    // values should be accessible on both the class and instance
                    MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
                }

                exports['default'] = MediaError;
                module.exports = exports['default'];

            },{"object.assign":45}],106:[function(_dereq_,module,exports){
                /**
                 * @file menu-button.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _clickableComponentJs = _dereq_('../clickable-component.js');

                var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

                var _componentJs = _dereq_('../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _menuJs = _dereq_('./menu.js');

                var _menuJs2 = _interopRequireDefault(_menuJs);

                var _utilsDomJs = _dereq_('../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsFnJs = _dereq_('../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');

                var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

                /**
                 * A button class with a popup menu
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Button
                 * @class MenuButton
                 */

                var MenuButton = (function (_ClickableComponent) {
                    _inherits(MenuButton, _ClickableComponent);

                    function MenuButton(player) {
                        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                        _classCallCheck(this, MenuButton);

                        _ClickableComponent.call(this, player, options);

                        this.update();

                        this.enabled_ = true;

                        this.el_.setAttribute('aria-haspopup', 'true');
                        this.el_.setAttribute('role', 'menuitem');
                        this.on('keydown', this.handleSubmenuKeyPress);
                    }

                    /**
                     * Update menu
                     *
                     * @method update
                     */

                    MenuButton.prototype.update = function update() {
                        var menu = this.createMenu();

                        if (this.menu) {
                            this.removeChild(this.menu);
                        }

                        this.menu = menu;
                        this.addChild(menu);

                        /**
                         * Track the state of the menu button
                         *
                         * @type {Boolean}
                         * @private
                         */
                        this.buttonPressed_ = false;
                        this.el_.setAttribute('aria-expanded', 'false');

                        if (this.items && this.items.length === 0) {
                            this.hide();
                        } else if (this.items && this.items.length > 1) {
                            this.show();
                        }
                    };

                    /**
                     * Create menu
                     *
                     * @return {Menu} The constructed menu
                     * @method createMenu
                     */

                    MenuButton.prototype.createMenu = function createMenu() {
                        var menu = new _menuJs2['default'](this.player_);

                        // Add a title list item to the top
                        if (this.options_.title) {
                            var title = Dom.createEl('li', {
                                className: 'vjs-menu-title',
                                innerHTML: _utilsToTitleCaseJs2['default'](this.options_.title),
                                tabIndex: -1
                            });
                            menu.children_.unshift(title);
                            Dom.insertElFirst(title, menu.contentEl());
                        }

                        this.items = this['createItems']();

                        if (this.items) {
                            // Add menu items to the menu
                            for (var i = 0; i < this.items.length; i++) {
                                menu.addItem(this.items[i]);
                            }
                        }

                        return menu;
                    };

                    /**
                     * Create the list of menu items. Specific to each subclass.
                     *
                     * @method createItems
                     */

                    MenuButton.prototype.createItems = function createItems() {};

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    MenuButton.prototype.createEl = function createEl() {
                        return _ClickableComponent.prototype.createEl.call(this, 'div', {
                            className: this.buildCSSClass()
                        });
                    };

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    MenuButton.prototype.buildCSSClass = function buildCSSClass() {
                        var menuButtonClass = 'vjs-menu-button';

                        // If the inline option is passed, we want to use different styles altogether.
                        if (this.options_.inline === true) {
                            menuButtonClass += '-inline';
                        } else {
                            menuButtonClass += '-popup';
                        }

                        return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);
                    };

                    /**
                     * When you click the button it adds focus, which
                     * will show the menu indefinitely.
                     * So we'll remove focus when the mouse leaves the button.
                     * Focus is needed for tab navigation.
                     * Allow sub components to stack CSS class names
                     *
                     * @method handleClick
                     */

                    MenuButton.prototype.handleClick = function handleClick() {
                        this.one('mouseout', Fn.bind(this, function () {
                            this.menu.unlockShowing();
                            this.el_.blur();
                        }));
                        if (this.buttonPressed_) {
                            this.unpressButton();
                        } else {
                            this.pressButton();
                        }
                    };

                    /**
                     * Handle key press on menu
                     *
                     * @param {Object} event Key press event
                     * @method handleKeyPress
                     */

                    MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {

                        // Escape (27) key or Tab (9) key unpress the 'button'
                        if (event.which === 27 || event.which === 9) {
                            if (this.buttonPressed_) {
                                this.unpressButton();
                            }
                            // Don't preventDefault for Tab key - we still want to lose focus
                            if (event.which !== 9) {
                                event.preventDefault();
                            }
                            // Up (38) key or Down (40) key press the 'button'
                        } else if (event.which === 38 || event.which === 40) {
                            if (!this.buttonPressed_) {
                                this.pressButton();
                                event.preventDefault();
                            }
                        } else {
                            _ClickableComponent.prototype.handleKeyPress.call(this, event);
                        }
                    };

                    /**
                     * Handle key press on submenu
                     *
                     * @param {Object} event Key press event
                     * @method handleSubmenuKeyPress
                     */

                    MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {

                        // Escape (27) key or Tab (9) key unpress the 'button'
                        if (event.which === 27 || event.which === 9) {
                            if (this.buttonPressed_) {
                                this.unpressButton();
                            }
                            // Don't preventDefault for Tab key - we still want to lose focus
                            if (event.which !== 9) {
                                event.preventDefault();
                            }
                        }
                    };

                    /**
                     * Makes changes based on button pressed
                     *
                     * @method pressButton
                     */

                    MenuButton.prototype.pressButton = function pressButton() {
                        if (this.enabled_) {
                            this.buttonPressed_ = true;
                            this.menu.lockShowing();
                            this.el_.setAttribute('aria-expanded', 'true');
                            this.menu.focus(); // set the focus into the submenu
                        }
                    };

                    /**
                     * Makes changes based on button unpressed
                     *
                     * @method unpressButton
                     */

                    MenuButton.prototype.unpressButton = function unpressButton() {
                        if (this.enabled_) {
                            this.buttonPressed_ = false;
                            this.menu.unlockShowing();
                            this.el_.setAttribute('aria-expanded', 'false');
                            this.el_.focus(); // Set focus back to this menu button
                        }
                    };

                    /**
                     * Disable the menu button
                     *
                     * @return {Component}
                     * @method disable
                     */

                    MenuButton.prototype.disable = function disable() {
                        // Unpress, but don't force focus on this button
                        this.buttonPressed_ = false;
                        this.menu.unlockShowing();
                        this.el_.setAttribute('aria-expanded', 'false');

                        this.enabled_ = false;

                        return _ClickableComponent.prototype.disable.call(this);
                    };

                    /**
                     * Enable the menu button
                     *
                     * @return {Component}
                     * @method disable
                     */

                    MenuButton.prototype.enable = function enable() {
                        this.enabled_ = true;

                        return _ClickableComponent.prototype.enable.call(this);
                    };

                    return MenuButton;
                })(_clickableComponentJs2['default']);

                _componentJs2['default'].registerComponent('MenuButton', MenuButton);
                exports['default'] = MenuButton;
                module.exports = exports['default'];

            },{"../clickable-component.js":65,"../component.js":67,"../utils/dom.js":134,"../utils/fn.js":136,"../utils/to-title-case.js":143,"./menu.js":108}],107:[function(_dereq_,module,exports){
                /**
                 * @file menu-item.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _clickableComponentJs = _dereq_('../clickable-component.js');

                var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

                var _componentJs = _dereq_('../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _objectAssign = _dereq_('object.assign');

                var _objectAssign2 = _interopRequireDefault(_objectAssign);

                /**
                 * The component for a menu item. `<li>`
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Button
                 * @class MenuItem
                 */

                var MenuItem = (function (_ClickableComponent) {
                    _inherits(MenuItem, _ClickableComponent);

                    function MenuItem(player, options) {
                        _classCallCheck(this, MenuItem);

                        _ClickableComponent.call(this, player, options);

                        this.selectable = options['selectable'];

                        this.selected(options['selected']);

                        if (this.selectable) {
                            // TODO: May need to be either menuitemcheckbox or menuitemradio,
                            //       and may need logical grouping of menu items.
                            this.el_.setAttribute('role', 'menuitemcheckbox');
                        } else {
                            this.el_.setAttribute('role', 'menuitem');
                        }
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @param {String=} type Desc
                     * @param {Object=} props Desc
                     * @return {Element}
                     * @method createEl
                     */

                    MenuItem.prototype.createEl = function createEl(type, props, attrs) {
                        return _ClickableComponent.prototype.createEl.call(this, 'li', _objectAssign2['default']({
                            className: 'vjs-menu-item',
                            innerHTML: this.localize(this.options_['label']),
                            tabIndex: -1
                        }, props), attrs);
                    };

                    /**
                     * Handle a click on the menu item, and set it to selected
                     *
                     * @method handleClick
                     */

                    MenuItem.prototype.handleClick = function handleClick() {
                        this.selected(true);
                    };

                    /**
                     * Set this menu item as selected or not
                     *
                     * @param  {Boolean} selected
                     * @method selected
                     */

                    MenuItem.prototype.selected = function selected(_selected) {
                        if (this.selectable) {
                            if (_selected) {
                                this.addClass('vjs-selected');
                                this.el_.setAttribute('aria-checked', 'true');
                                // aria-checked isn't fully supported by browsers/screen readers,
                                // so indicate selected state to screen reader in the control text.
                                this.controlText(', selected');
                            } else {
                                this.removeClass('vjs-selected');
                                this.el_.setAttribute('aria-checked', 'false');
                                // Indicate un-selected state to screen reader
                                // Note that a space clears out the selected state text
                                this.controlText(' ');
                            }
                        }
                    };

                    return MenuItem;
                })(_clickableComponentJs2['default']);

                _componentJs2['default'].registerComponent('MenuItem', MenuItem);
                exports['default'] = MenuItem;
                module.exports = exports['default'];

            },{"../clickable-component.js":65,"../component.js":67,"object.assign":45}],108:[function(_dereq_,module,exports){
                /**
                 * @file menu.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsDomJs = _dereq_('../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsFnJs = _dereq_('../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsEventsJs = _dereq_('../utils/events.js');

                var Events = _interopRequireWildcard(_utilsEventsJs);

                /**
                 * The Menu component is used to build pop up menus, including subtitle and
                 * captions selection menus.
                 *
                 * @extends Component
                 * @class Menu
                 */

                var Menu = (function (_Component) {
                    _inherits(Menu, _Component);

                    function Menu(player, options) {
                        _classCallCheck(this, Menu);

                        _Component.call(this, player, options);

                        this.focusedChild_ = -1;

                        this.on('keydown', this.handleKeyPress);
                    }

                    /**
                     * Add a menu item to the menu
                     *
                     * @param {Object|String} component Component or component type to add
                     * @method addItem
                     */

                    Menu.prototype.addItem = function addItem(component) {
                        this.addChild(component);
                        component.on('click', Fn.bind(this, function () {
                            this.unlockShowing();
                            //TODO: Need to set keyboard focus back to the menuButton
                        }));
                    };

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    Menu.prototype.createEl = function createEl() {
                        var contentElType = this.options_.contentElType || 'ul';
                        this.contentEl_ = Dom.createEl(contentElType, {
                            className: 'vjs-menu-content'
                        });
                        this.contentEl_.setAttribute('role', 'menu');
                        var el = _Component.prototype.createEl.call(this, 'div', {
                            append: this.contentEl_,
                            className: 'vjs-menu'
                        });
                        el.setAttribute('role', 'presentation');
                        el.appendChild(this.contentEl_);

                        // Prevent clicks from bubbling up. Needed for Menu Buttons,
                        // where a click on the parent is significant
                        Events.on(el, 'click', function (event) {
                            event.preventDefault();
                            event.stopImmediatePropagation();
                        });

                        return el;
                    };

                    /**
                     * Handle key press for menu
                     *
                     * @param {Object} event Event object
                     * @method handleKeyPress
                     */

                    Menu.prototype.handleKeyPress = function handleKeyPress(event) {
                        if (event.which === 37 || event.which === 40) {
                            // Left and Down Arrows
                            event.preventDefault();
                            this.stepForward();
                        } else if (event.which === 38 || event.which === 39) {
                            // Up and Right Arrows
                            event.preventDefault();
                            this.stepBack();
                        }
                    };

                    /**
                     * Move to next (lower) menu item for keyboard users
                     *
                     * @method stepForward
                     */

                    Menu.prototype.stepForward = function stepForward() {
                        var stepChild = 0;

                        if (this.focusedChild_ !== undefined) {
                            stepChild = this.focusedChild_ + 1;
                        }
                        this.focus(stepChild);
                    };

                    /**
                     * Move to previous (higher) menu item for keyboard users
                     *
                     * @method stepBack
                     */

                    Menu.prototype.stepBack = function stepBack() {
                        var stepChild = 0;

                        if (this.focusedChild_ !== undefined) {
                            stepChild = this.focusedChild_ - 1;
                        }
                        this.focus(stepChild);
                    };

                    /**
                     * Set focus on a menu item in the menu
                     *
                     * @param {Object|String} item Index of child item set focus on
                     * @method focus
                     */

                    Menu.prototype.focus = function focus() {
                        var item = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

                        var children = this.children().slice();
                        var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);

                        if (haveTitle) {
                            children.shift();
                        }

                        if (children.length > 0) {
                            if (item < 0) {
                                item = 0;
                            } else if (item >= children.length) {
                                item = children.length - 1;
                            }

                            this.focusedChild_ = item;

                            children[item].el_.focus();
                        }
                    };

                    return Menu;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('Menu', Menu);
                exports['default'] = Menu;
                module.exports = exports['default'];

            },{"../component.js":67,"../utils/dom.js":134,"../utils/events.js":135,"../utils/fn.js":136}],109:[function(_dereq_,module,exports){
                /**
                 * @file modal-dialog.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _utilsDom = _dereq_('./utils/dom');

                var Dom = _interopRequireWildcard(_utilsDom);

                var _utilsFn = _dereq_('./utils/fn');

                var Fn = _interopRequireWildcard(_utilsFn);

                var _utilsLog = _dereq_('./utils/log');

                var _utilsLog2 = _interopRequireDefault(_utilsLog);

                var _component = _dereq_('./component');

                var _component2 = _interopRequireDefault(_component);

                var _closeButton = _dereq_('./close-button');

                var _closeButton2 = _interopRequireDefault(_closeButton);

                var MODAL_CLASS_NAME = 'vjs-modal-dialog';
                var ESC = 27;

                /**
                 * The `ModalDialog` displays over the video and its controls, which blocks
                 * interaction with the player until it is closed.
                 *
                 * Modal dialogs include a "Close" button and will close when that button
                 * is activated - or when ESC is pressed anywhere.
                 *
                 * @extends Component
                 * @class ModalDialog
                 */

                var ModalDialog = (function (_Component) {
                    _inherits(ModalDialog, _Component);

                    /**
                     * Constructor for modals.
                     *
                     * @param  {Player} player
                     * @param  {Object} [options]
                     * @param  {Mixed} [options.content=undefined]
                     *         Provide customized content for this modal.
                     *
                     * @param  {String} [options.description]
                     *         A text description for the modal, primarily for accessibility.
                     *
                     * @param  {Boolean} [options.fillAlways=false]
                     *         Normally, modals are automatically filled only the first time
                     *         they open. This tells the modal to refresh its content
                     *         every time it opens.
                     *
                     * @param  {String} [options.label]
                     *         A text label for the modal, primarily for accessibility.
                     *
                     * @param  {Boolean} [options.temporary=true]
                     *         If `true`, the modal can only be opened once; it will be
                     *         disposed as soon as it's closed.
                     *
                     * @param  {Boolean} [options.uncloseable=false]
                     *         If `true`, the user will not be able to close the modal
                     *         through the UI in the normal ways. Programmatic closing is
                     *         still possible.
                     *
                     */

                    function ModalDialog(player, options) {
                        _classCallCheck(this, ModalDialog);

                        _Component.call(this, player, options);
                        this.opened_ = this.hasBeenOpened_ = this.hasBeenFilled_ = false;

                        this.closeable(!this.options_.uncloseable);
                        this.content(this.options_.content);

                        // Make sure the contentEl is defined AFTER any children are initialized
                        // because we only want the contents of the modal in the contentEl
                        // (not the UI elements like the close button).
                        this.contentEl_ = Dom.createEl('div', {
                            className: MODAL_CLASS_NAME + '-content'
                        }, {
                            role: 'document'
                        });

                        this.descEl_ = Dom.createEl('p', {
                            className: MODAL_CLASS_NAME + '-description vjs-offscreen',
                            id: this.el().getAttribute('aria-describedby')
                        });

                        Dom.textContent(this.descEl_, this.description());
                        this.el_.appendChild(this.descEl_);
                        this.el_.appendChild(this.contentEl_);
                    }

                    /*
                     * Modal dialog default options.
                     *
                     * @type {Object}
                     * @private
                     */

                    /**
                     * Create the modal's DOM element
                     *
                     * @method createEl
                     * @return {Element}
                     */

                    ModalDialog.prototype.createEl = function createEl() {
                        return _Component.prototype.createEl.call(this, 'div', {
                            className: this.buildCSSClass(),
                            tabIndex: -1
                        }, {
                            'aria-describedby': this.id() + '_description',
                            'aria-hidden': 'true',
                            'aria-label': this.label(),
                            role: 'dialog'
                        });
                    };

                    /**
                     * Build the modal's CSS class.
                     *
                     * @method buildCSSClass
                     * @return {String}
                     */

                    ModalDialog.prototype.buildCSSClass = function buildCSSClass() {
                        return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);
                    };

                    /**
                     * Handles key presses on the document, looking for ESC, which closes
                     * the modal.
                     *
                     * @method handleKeyPress
                     * @param  {Event} e
                     */

                    ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {
                        if (e.which === ESC && this.closeable()) {
                            this.close();
                        }
                    };

                    /**
                     * Returns the label string for this modal. Primarily used for accessibility.
                     *
                     * @return {String}
                     */

                    ModalDialog.prototype.label = function label() {
                        return this.options_.label || this.localize('Modal Window');
                    };

                    /**
                     * Returns the description string for this modal. Primarily used for
                     * accessibility.
                     *
                     * @return {String}
                     */

                    ModalDialog.prototype.description = function description() {
                        var desc = this.options_.description || this.localize('This is a modal window.');

                        // Append a universal closeability message if the modal is closeable.
                        if (this.closeable()) {
                            desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');
                        }

                        return desc;
                    };

                    /**
                     * Opens the modal.
                     *
                     * @method open
                     * @return {ModalDialog}
                     */

                    ModalDialog.prototype.open = function open() {
                        if (!this.opened_) {
                            var player = this.player();

                            this.trigger('beforemodalopen');
                            this.opened_ = true;

                            // Fill content if the modal has never opened before and
                            // never been filled.
                            if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
                                this.fill();
                            }

                            // If the player was playing, pause it and take note of its previously
                            // playing state.
                            this.wasPlaying_ = !player.paused();

                            if (this.wasPlaying_) {
                                player.pause();
                            }

                            if (this.closeable()) {
                                this.on(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));
                            }

                            player.controls(false);
                            this.show();
                            this.el().setAttribute('aria-hidden', 'false');
                            this.trigger('modalopen');
                            this.hasBeenOpened_ = true;
                        }
                        return this;
                    };

                    /**
                     * Whether or not the modal is opened currently.
                     *
                     * @method opened
                     * @param  {Boolean} [value]
                     *         If given, it will open (`true`) or close (`false`) the modal.
                     *
                     * @return {Boolean}
                     */

                    ModalDialog.prototype.opened = function opened(value) {
                        if (typeof value === 'boolean') {
                            this[value ? 'open' : 'close']();
                        }
                        return this.opened_;
                    };

                    /**
                     * Closes the modal.
                     *
                     * @method close
                     * @return {ModalDialog}
                     */

                    ModalDialog.prototype.close = function close() {
                        if (this.opened_) {
                            var player = this.player();

                            this.trigger('beforemodalclose');
                            this.opened_ = false;

                            if (this.wasPlaying_) {
                                player.play();
                            }

                            if (this.closeable()) {
                                this.off(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));
                            }

                            player.controls(true);
                            this.hide();
                            this.el().setAttribute('aria-hidden', 'true');
                            this.trigger('modalclose');

                            if (this.options_.temporary) {
                                this.dispose();
                            }
                        }
                        return this;
                    };

                    /**
                     * Whether or not the modal is closeable via the UI.
                     *
                     * @method closeable
                     * @param  {Boolean} [value]
                     *         If given as a Boolean, it will set the `closeable` option.
                     *
                     * @return {Boolean}
                     */

                    ModalDialog.prototype.closeable = function closeable(value) {
                        if (typeof value === 'boolean') {
                            var closeable = this.closeable_ = !!value;
                            var _close = this.getChild('closeButton');

                            // If this is being made closeable and has no close button, add one.
                            if (closeable && !_close) {

                                // The close button should be a child of the modal - not its
                                // content element, so temporarily change the content element.
                                var temp = this.contentEl_;
                                this.contentEl_ = this.el_;
                                _close = this.addChild('closeButton');
                                this.contentEl_ = temp;
                                this.on(_close, 'close', this.close);
                            }

                            // If this is being made uncloseable and has a close button, remove it.
                            if (!closeable && _close) {
                                this.off(_close, 'close', this.close);
                                this.removeChild(_close);
                                _close.dispose();
                            }
                        }
                        return this.closeable_;
                    };

                    /**
                     * Fill the modal's content element with the modal's "content" option.
                     *
                     * The content element will be emptied before this change takes place.
                     *
                     * @method fill
                     * @return {ModalDialog}
                     */

                    ModalDialog.prototype.fill = function fill() {
                        return this.fillWith(this.content());
                    };

                    /**
                     * Fill the modal's content element with arbitrary content.
                     *
                     * The content element will be emptied before this change takes place.
                     *
                     * @method fillWith
                     * @param  {Mixed} [content]
                     *         The same rules apply to this as apply to the `content` option.
                     *
                     * @return {ModalDialog}
                     */

                    ModalDialog.prototype.fillWith = function fillWith(content) {
                        var contentEl = this.contentEl();
                        var parentEl = contentEl.parentNode;
                        var nextSiblingEl = contentEl.nextSibling;

                        this.trigger('beforemodalfill');
                        this.hasBeenFilled_ = true;

                        // Detach the content element from the DOM before performing
                        // manipulation to avoid modifying the live DOM multiple times.
                        parentEl.removeChild(contentEl);
                        this.empty();
                        Dom.insertContent(contentEl, content);
                        this.trigger('modalfill');

                        // Re-inject the re-filled content element.
                        if (nextSiblingEl) {
                            parentEl.insertBefore(contentEl, nextSiblingEl);
                        } else {
                            parentEl.appendChild(contentEl);
                        }

                        return this;
                    };

                    /**
                     * Empties the content element.
                     *
                     * This happens automatically anytime the modal is filled.
                     *
                     * @method empty
                     * @return {ModalDialog}
                     */

                    ModalDialog.prototype.empty = function empty() {
                        this.trigger('beforemodalempty');
                        Dom.emptyEl(this.contentEl());
                        this.trigger('modalempty');
                        return this;
                    };

                    /**
                     * Gets or sets the modal content, which gets normalized before being
                     * rendered into the DOM.
                     *
                     * This does not update the DOM or fill the modal, but it is called during
                     * that process.
                     *
                     * @method content
                     * @param  {Mixed} [value]
                     *         If defined, sets the internal content value to be used on the
                     *         next call(s) to `fill`. This value is normalized before being
                     *         inserted. To "clear" the internal content value, pass `null`.
                     *
                     * @return {Mixed}
                     */

                    ModalDialog.prototype.content = function content(value) {
                        if (typeof value !== 'undefined') {
                            this.content_ = value;
                        }
                        return this.content_;
                    };

                    return ModalDialog;
                })(_component2['default']);

                ModalDialog.prototype.options_ = {
                    temporary: true
                };

                _component2['default'].registerComponent('ModalDialog', ModalDialog);
                exports['default'] = ModalDialog;
                module.exports = exports['default'];

            },{"./close-button":66,"./component":67,"./utils/dom":134,"./utils/fn":136,"./utils/log":139}],110:[function(_dereq_,module,exports){
                /**
                 * @file player.js
                 */
// Subclasses Component
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('./component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _utilsEventsJs = _dereq_('./utils/events.js');

                var Events = _interopRequireWildcard(_utilsEventsJs);

                var _utilsDomJs = _dereq_('./utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsFnJs = _dereq_('./utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsGuidJs = _dereq_('./utils/guid.js');

                var Guid = _interopRequireWildcard(_utilsGuidJs);

                var _utilsBrowserJs = _dereq_('./utils/browser.js');

                var browser = _interopRequireWildcard(_utilsBrowserJs);

                var _utilsLogJs = _dereq_('./utils/log.js');

                var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

                var _utilsToTitleCaseJs = _dereq_('./utils/to-title-case.js');

                var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

                var _utilsTimeRangesJs = _dereq_('./utils/time-ranges.js');

                var _utilsBufferJs = _dereq_('./utils/buffer.js');

                var _utilsStylesheetJs = _dereq_('./utils/stylesheet.js');

                var stylesheet = _interopRequireWildcard(_utilsStylesheetJs);

                var _fullscreenApiJs = _dereq_('./fullscreen-api.js');

                var _fullscreenApiJs2 = _interopRequireDefault(_fullscreenApiJs);

                var _mediaErrorJs = _dereq_('./media-error.js');

                var _mediaErrorJs2 = _interopRequireDefault(_mediaErrorJs);

                var _safeJsonParseTuple = _dereq_('safe-json-parse/tuple');

                var _safeJsonParseTuple2 = _interopRequireDefault(_safeJsonParseTuple);

                var _objectAssign = _dereq_('object.assign');

                var _objectAssign2 = _interopRequireDefault(_objectAssign);

                var _utilsMergeOptionsJs = _dereq_('./utils/merge-options.js');

                var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);

                var _tracksTextTrackListConverterJs = _dereq_('./tracks/text-track-list-converter.js');

                var _tracksTextTrackListConverterJs2 = _interopRequireDefault(_tracksTextTrackListConverterJs);

// Include required child components (importing also registers them)

                var _techLoaderJs = _dereq_('./tech/loader.js');

                var _techLoaderJs2 = _interopRequireDefault(_techLoaderJs);

                var _posterImageJs = _dereq_('./poster-image.js');

                var _posterImageJs2 = _interopRequireDefault(_posterImageJs);

                var _tracksTextTrackDisplayJs = _dereq_('./tracks/text-track-display.js');

                var _tracksTextTrackDisplayJs2 = _interopRequireDefault(_tracksTextTrackDisplayJs);

                var _loadingSpinnerJs = _dereq_('./loading-spinner.js');

                var _loadingSpinnerJs2 = _interopRequireDefault(_loadingSpinnerJs);

                var _bigPlayButtonJs = _dereq_('./big-play-button.js');

                var _bigPlayButtonJs2 = _interopRequireDefault(_bigPlayButtonJs);

                var _controlBarControlBarJs = _dereq_('./control-bar/control-bar.js');

                var _controlBarControlBarJs2 = _interopRequireDefault(_controlBarControlBarJs);

                var _errorDisplayJs = _dereq_('./error-display.js');

                var _errorDisplayJs2 = _interopRequireDefault(_errorDisplayJs);

                var _tracksTextTrackSettingsJs = _dereq_('./tracks/text-track-settings.js');

                var _tracksTextTrackSettingsJs2 = _interopRequireDefault(_tracksTextTrackSettingsJs);

                var _modalDialog = _dereq_('./modal-dialog');

                var _modalDialog2 = _interopRequireDefault(_modalDialog);

// Require html5 tech, at least for disposing the original video tag

                var _techTechJs = _dereq_('./tech/tech.js');

                var _techTechJs2 = _interopRequireDefault(_techTechJs);

                var _techHtml5Js = _dereq_('./tech/html5.js');

                var _techHtml5Js2 = _interopRequireDefault(_techHtml5Js);

                /**
                 * An instance of the `Player` class is created when any of the Video.js setup methods are used to initialize a video.
                 * ```js
                 * var myPlayer = videojs('example_video_1');
                 * ```
                 * In the following example, the `data-setup` attribute tells the Video.js library to create a player instance when the library is ready.
                 * ```html
                 * <video id="example_video_1" data-setup='{}' controls>
                 *   <source src="my-source.mp4" type="video/mp4">
                 * </video>
                 * ```
                 * After an instance has been created it can be accessed globally using `Video('example_video_1')`.
                 *
                 * @param {Element} tag        The original video tag used for configuring options
                 * @param {Object=} options    Object of option names and values
                 * @param {Function=} ready    Ready callback function
                 * @extends Component
                 * @class Player
                 */

                var Player = (function (_Component) {
                    _inherits(Player, _Component);

                    /**
                     * player's constructor function
                     *
                     * @constructs
                     * @method init
                     * @param {Element} tag        The original video tag used for configuring options
                     * @param {Object=} options    Player options
                     * @param {Function=} ready    Ready callback function
                     */

                    function Player(tag, options, ready) {
                        var _this = this;

                        _classCallCheck(this, Player);

                        // Make sure tag ID exists
                        tag.id = tag.id || 'vjs_video_' + Guid.newGUID();

                        // Set Options
                        // The options argument overrides options set in the video tag
                        // which overrides globally set options.
                        // This latter part coincides with the load order
                        // (tag must exist before Player)
                        options = _objectAssign2['default'](Player.getTagSettings(tag), options);

                        // Delay the initialization of children because we need to set up
                        // player properties first, and can't use `this` before `super()`
                        options.initChildren = false;

                        // Same with creating the element
                        options.createEl = false;

                        // we don't want the player to report touch activity on itself
                        // see enableTouchActivity in Component
                        options.reportTouchActivity = false;

                        // Run base component initializing with new options
                        _Component.call(this, null, options, ready);

                        // if the global option object was accidentally blown away by
                        // someone, bail early with an informative error
                        if (!this.options_ || !this.options_.techOrder || !this.options_.techOrder.length) {
                            throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
                        }

                        this.tag = tag; // Store the original tag used to set options

                        // Store the tag attributes used to restore html5 element
                        this.tagAttributes = tag && Dom.getElAttributes(tag);

                        // Update current language
                        this.language(this.options_.language);

                        // Update Supported Languages
                        if (options.languages) {
                            (function () {
                                // Normalise player option languages to lowercase
                                var languagesToLower = {};

                                Object.getOwnPropertyNames(options.languages).forEach(function (name) {
                                    languagesToLower[name.toLowerCase()] = options.languages[name];
                                });
                                _this.languages_ = languagesToLower;
                            })();
                        } else {
                            this.languages_ = Player.prototype.options_.languages;
                        }

                        // Cache for video property values.
                        this.cache_ = {};

                        // Set poster
                        this.poster_ = options.poster || '';

                        // Set controls
                        this.controls_ = !!options.controls;

                        // Original tag settings stored in options
                        // now remove immediately so native controls don't flash.
                        // May be turned back on by HTML5 tech if nativeControlsForTouch is true
                        tag.controls = false;

                        /*
                         * Store the internal state of scrubbing
                         *
                         * @private
                         * @return {Boolean} True if the user is scrubbing
                         */
                        this.scrubbing_ = false;

                        this.el_ = this.createEl();

                        // We also want to pass the original player options to each component and plugin
                        // as well so they don't need to reach back into the player for options later.
                        // We also need to do another copy of this.options_ so we don't end up with
                        // an infinite loop.
                        var playerOptionsCopy = _utilsMergeOptionsJs2['default'](this.options_);

                        // Load plugins
                        if (options.plugins) {
                            (function () {
                                var plugins = options.plugins;

                                Object.getOwnPropertyNames(plugins).forEach(function (name) {
                                    if (typeof this[name] === 'function') {
                                        this[name](plugins[name]);
                                    } else {
                                        _utilsLogJs2['default'].error('Unable to find plugin:', name);
                                    }
                                }, _this);
                            })();
                        }

                        this.options_.playerOptions = playerOptionsCopy;

                        this.initChildren();

                        // Set isAudio based on whether or not an audio tag was used
                        this.isAudio(tag.nodeName.toLowerCase() === 'audio');

                        // Update controls className. Can't do this when the controls are initially
                        // set because the element doesn't exist yet.
                        if (this.controls()) {
                            this.addClass('vjs-controls-enabled');
                        } else {
                            this.addClass('vjs-controls-disabled');
                        }

                        // Set ARIA label and region role depending on player type
                        this.el_.setAttribute('role', 'region');
                        if (this.isAudio()) {
                            this.el_.setAttribute('aria-label', 'audio player');
                        } else {
                            this.el_.setAttribute('aria-label', 'video player');
                        }

                        if (this.isAudio()) {
                            this.addClass('vjs-audio');
                        }

                        if (this.flexNotSupported_()) {
                            this.addClass('vjs-no-flex');
                        }

                        // TODO: Make this smarter. Toggle user state between touching/mousing
                        // using events, since devices can have both touch and mouse events.
                        // if (browser.TOUCH_ENABLED) {
                        //   this.addClass('vjs-touch-enabled');
                        // }

                        // iOS Safari has broken hover handling
                        if (!browser.IS_IOS) {
                            this.addClass('vjs-workinghover');
                        }

                        // Make player easily findable by ID
                        Player.players[this.id_] = this;

                        // When the player is first initialized, trigger activity so components
                        // like the control bar show themselves if needed
                        this.userActive(true);
                        this.reportUserActivity();
                        this.listenForUserActivity_();

                        this.on('fullscreenchange', this.handleFullscreenChange_);
                        this.on('stageclick', this.handleStageClick_);
                    }

                    /*
                     * Global player list
                     *
                     * @type {Object}
                     */

                    /**
                     * Destroys the video player and does any necessary cleanup
                     * ```js
                     *     myPlayer.dispose();
                     * ```
                     * This is especially helpful if you are dynamically adding and removing videos
                     * to/from the DOM.
                     *
                     * @method dispose
                     */

                    Player.prototype.dispose = function dispose() {
                        this.trigger('dispose');
                        // prevent dispose from being called twice
                        this.off('dispose');

                        if (this.styleEl_ && this.styleEl_.parentNode) {
                            this.styleEl_.parentNode.removeChild(this.styleEl_);
                        }

                        // Kill reference to this player
                        Player.players[this.id_] = null;
                        if (this.tag && this.tag.player) {
                            this.tag.player = null;
                        }
                        if (this.el_ && this.el_.player) {
                            this.el_.player = null;
                        }

                        if (this.tech_) {
                            this.tech_.dispose();
                        }

                        _Component.prototype.dispose.call(this);
                    };

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    Player.prototype.createEl = function createEl() {
                        var el = this.el_ = _Component.prototype.createEl.call(this, 'div');
                        var tag = this.tag;

                        // Remove width/height attrs from tag so CSS can make it 100% width/height
                        tag.removeAttribute('width');
                        tag.removeAttribute('height');

                        // Copy over all the attributes from the tag, including ID and class
                        // ID will now reference player box, not the video tag
                        var attrs = Dom.getElAttributes(tag);

                        Object.getOwnPropertyNames(attrs).forEach(function (attr) {
                            // workaround so we don't totally break IE7
                            // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7
                            if (attr === 'class') {
                                el.className = attrs[attr];
                            } else {
                                el.setAttribute(attr, attrs[attr]);
                            }
                        });

                        // Update tag id/class for use as HTML5 playback tech
                        // Might think we should do this after embedding in container so .vjs-tech class
                        // doesn't flash 100% width/height, but class only applies with .video-js parent
                        tag.playerId = tag.id;
                        tag.id += '_html5_api';
                        tag.className = 'vjs-tech';

                        // Make player findable on elements
                        tag.player = el.player = this;
                        // Default state of video is paused
                        this.addClass('vjs-paused');

                        // Add a style element in the player that we'll use to set the width/height
                        // of the player in a way that's still overrideable by CSS, just like the
                        // video element
                        if (_globalWindow2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {
                            this.styleEl_ = stylesheet.createStyleElement('vjs-styles-dimensions');
                            var defaultsStyleEl = Dom.$('.vjs-styles-defaults');
                            var head = Dom.$('head');
                            head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
                        }

                        // Pass in the width/height/aspectRatio options which will update the style el
                        this.width(this.options_.width);
                        this.height(this.options_.height);
                        this.fluid(this.options_.fluid);
                        this.aspectRatio(this.options_.aspectRatio);

                        // Hide any links within the video/audio tag, because IE doesn't hide them completely.
                        var links = tag.getElementsByTagName('a');
                        for (var i = 0; i < links.length; i++) {
                            var linkEl = links.item(i);
                            Dom.addElClass(linkEl, 'vjs-hidden');
                            linkEl.setAttribute('hidden', 'hidden');
                        }

                        // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
                        // keep track of the original for later so we can know if the source originally failed
                        tag.initNetworkState_ = tag.networkState;

                        // Wrap video tag in div (el/box) container
                        if (tag.parentNode) {
                            tag.parentNode.insertBefore(el, tag);
                        }

                        // insert the tag as the first child of the player element
                        // then manually add it to the children array so that this.addChild
                        // will work properly for other components
                        Dom.insertElFirst(tag, el); // Breaks iPhone, fixed in HTML5 setup.
                        this.children_.unshift(tag);

                        this.el_ = el;

                        return el;
                    };

                    /**
                     * Get/set player width
                     *
                     * @param {Number=} value Value for width
                     * @return {Number} Width when getting
                     * @method width
                     */

                    Player.prototype.width = function width(value) {
                        return this.dimension('width', value);
                    };

                    /**
                     * Get/set player height
                     *
                     * @param {Number=} value Value for height
                     * @return {Number} Height when getting
                     * @method height
                     */

                    Player.prototype.height = function height(value) {
                        return this.dimension('height', value);
                    };

                    /**
                     * Get/set dimension for player
                     *
                     * @param {String} dimension Either width or height
                     * @param {Number=} value Value for dimension
                     * @return {Component}
                     * @method dimension
                     */

                    Player.prototype.dimension = function dimension(_dimension, value) {
                        var privDimension = _dimension + '_';

                        if (value === undefined) {
                            return this[privDimension] || 0;
                        }

                        if (value === '') {
                            // If an empty string is given, reset the dimension to be automatic
                            this[privDimension] = undefined;
                        } else {
                            var parsedVal = parseFloat(value);

                            if (isNaN(parsedVal)) {
                                _utilsLogJs2['default'].error('Improper value "' + value + '" supplied for for ' + _dimension);
                                return this;
                            }

                            this[privDimension] = parsedVal;
                        }

                        this.updateStyleEl_();
                        return this;
                    };

                    /**
                     * Add/remove the vjs-fluid class
                     *
                     * @param {Boolean} bool Value of true adds the class, value of false removes the class
                     * @method fluid
                     */

                    Player.prototype.fluid = function fluid(bool) {
                        if (bool === undefined) {
                            return !!this.fluid_;
                        }

                        this.fluid_ = !!bool;

                        if (bool) {
                            this.addClass('vjs-fluid');
                        } else {
                            this.removeClass('vjs-fluid');
                        }
                    };

                    /**
                     * Get/Set the aspect ratio
                     *
                     * @param {String=} ratio Aspect ratio for player
                     * @return aspectRatio
                     * @method aspectRatio
                     */

                    Player.prototype.aspectRatio = function aspectRatio(ratio) {
                        if (ratio === undefined) {
                            return this.aspectRatio_;
                        }

                        // Check for width:height format
                        if (!/^\d+\:\d+$/.test(ratio)) {
                            throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');
                        }
                        this.aspectRatio_ = ratio;

                        // We're assuming if you set an aspect ratio you want fluid mode,
                        // because in fixed mode you could calculate width and height yourself.
                        this.fluid(true);

                        this.updateStyleEl_();
                    };

                    /**
                     * Update styles of the player element (height, width and aspect ratio)
                     *
                     * @method updateStyleEl_
                     */

                    Player.prototype.updateStyleEl_ = function updateStyleEl_() {
                        if (_globalWindow2['default'].VIDEOJS_NO_DYNAMIC_STYLE === true) {
                            var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;
                            var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;
                            var techEl = this.tech_ && this.tech_.el();

                            if (techEl) {
                                if (_width >= 0) {
                                    techEl.width = _width;
                                }
                                if (_height >= 0) {
                                    techEl.height = _height;
                                }
                            }

                            return;
                        }

                        var width = undefined;
                        var height = undefined;
                        var aspectRatio = undefined;
                        var idClass = undefined;

                        // The aspect ratio is either used directly or to calculate width and height.
                        if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {
                            // Use any aspectRatio that's been specifically set
                            aspectRatio = this.aspectRatio_;
                        } else if (this.videoWidth()) {
                            // Otherwise try to get the aspect ratio from the video metadata
                            aspectRatio = this.videoWidth() + ':' + this.videoHeight();
                        } else {
                            // Or use a default. The video element's is 2:1, but 16:9 is more common.
                            aspectRatio = '16:9';
                        }

                        // Get the ratio as a decimal we can use to calculate dimensions
                        var ratioParts = aspectRatio.split(':');
                        var ratioMultiplier = ratioParts[1] / ratioParts[0];

                        if (this.width_ !== undefined) {
                            // Use any width that's been specifically set
                            width = this.width_;
                        } else if (this.height_ !== undefined) {
                            // Or calulate the width from the aspect ratio if a height has been set
                            width = this.height_ / ratioMultiplier;
                        } else {
                            // Or use the video's metadata, or use the video el's default of 300
                            width = this.videoWidth() || 300;
                        }

                        if (this.height_ !== undefined) {
                            // Use any height that's been specifically set
                            height = this.height_;
                        } else {
                            // Otherwise calculate the height from the ratio and the width
                            height = width * ratioMultiplier;
                        }

                        // Ensure the CSS class is valid by starting with an alpha character
                        if (/^[^a-zA-Z]/.test(this.id())) {
                            idClass = 'dimensions-' + this.id();
                        } else {
                            idClass = this.id() + '-dimensions';
                        }

                        // Ensure the right class is still on the player for the style element
                        this.addClass(idClass);

                        stylesheet.setTextContent(this.styleEl_, '\n      .' + idClass + ' {\n        width: ' + width + 'px;\n        height: ' + height + 'px;\n      }\n\n      .' + idClass + '.vjs-fluid {\n        padding-top: ' + ratioMultiplier * 100 + '%;\n      }\n    ');
                    };

                    /**
                     * Load the Media Playback Technology (tech)
                     * Load/Create an instance of playback technology including element and API methods
                     * And append playback element in player div.
                     *
                     * @param {String} techName Name of the playback technology
                     * @param {String} source Video source
                     * @method loadTech_
                     * @private
                     */

                    Player.prototype.loadTech_ = function loadTech_(techName, source) {

                        // Pause and remove current playback technology
                        if (this.tech_) {
                            this.unloadTech_();
                        }

                        // get rid of the HTML5 video tag as soon as we are using another tech
                        if (techName !== 'Html5' && this.tag) {
                            _techTechJs2['default'].getTech('Html5').disposeMediaElement(this.tag);
                            this.tag.player = null;
                            this.tag = null;
                        }

                        this.techName_ = techName;

                        // Turn off API access because we're loading a new tech that might load asynchronously
                        this.isReady_ = false;

                        // Grab tech-specific options from player options and add source and parent element to use.
                        var techOptions = _objectAssign2['default']({
                            'nativeControlsForTouch': this.options_.nativeControlsForTouch,
                            'source': source,
                            'playerId': this.id(),
                            'techId': this.id() + '_' + techName + '_api',
                            'textTracks': this.textTracks_,
                            'autoplay': this.options_.autoplay,
                            'preload': this.options_.preload,
                            'loop': this.options_.loop,
                            'muted': this.options_.muted,
                            'poster': this.poster(),
                            'language': this.language(),
                            'vtt.js': this.options_['vtt.js']
                        }, this.options_[techName.toLowerCase()]);

                        if (this.tag) {
                            techOptions.tag = this.tag;
                        }

                        if (source) {
                            this.currentType_ = source.type;
                            if (source.src === this.cache_.src && this.cache_.currentTime > 0) {
                                techOptions.startTime = this.cache_.currentTime;
                            }

                            this.cache_.src = source.src;
                        }

                        // Initialize tech instance
                        var techComponent = _techTechJs2['default'].getTech(techName);
                        // Support old behavior of techs being registered as components.
                        // Remove once that deprecated behavior is removed.
                        if (!techComponent) {
                            techComponent = _componentJs2['default'].getComponent(techName);
                        }
                        this.tech_ = new techComponent(techOptions);

                        // player.triggerReady is always async, so don't need this to be async
                        this.tech_.ready(Fn.bind(this, this.handleTechReady_), true);

                        _tracksTextTrackListConverterJs2['default'].jsonToTextTracks(this.textTracksJson_ || [], this.tech_);

                        // Listen to all HTML5-defined events and trigger them on the player
                        this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);
                        this.on(this.tech_, 'waiting', this.handleTechWaiting_);
                        this.on(this.tech_, 'canplay', this.handleTechCanPlay_);
                        this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);
                        this.on(this.tech_, 'playing', this.handleTechPlaying_);
                        this.on(this.tech_, 'ended', this.handleTechEnded_);
                        this.on(this.tech_, 'seeking', this.handleTechSeeking_);
                        this.on(this.tech_, 'seeked', this.handleTechSeeked_);
                        this.on(this.tech_, 'play', this.handleTechPlay_);
                        this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);
                        this.on(this.tech_, 'pause', this.handleTechPause_);
                        this.on(this.tech_, 'progress', this.handleTechProgress_);
                        this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);
                        this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);
                        this.on(this.tech_, 'error', this.handleTechError_);
                        this.on(this.tech_, 'suspend', this.handleTechSuspend_);
                        this.on(this.tech_, 'abort', this.handleTechAbort_);
                        this.on(this.tech_, 'emptied', this.handleTechEmptied_);
                        this.on(this.tech_, 'stalled', this.handleTechStalled_);
                        this.on(this.tech_, 'loadedmetadata', this.handleTechLoadedMetaData_);
                        this.on(this.tech_, 'loadeddata', this.handleTechLoadedData_);
                        this.on(this.tech_, 'timeupdate', this.handleTechTimeUpdate_);
                        this.on(this.tech_, 'ratechange', this.handleTechRateChange_);
                        this.on(this.tech_, 'volumechange', this.handleTechVolumeChange_);
                        this.on(this.tech_, 'texttrackchange', this.handleTechTextTrackChange_);
                        this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);
                        this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);

                        this.usingNativeControls(this.techGet_('controls'));

                        if (this.controls() && !this.usingNativeControls()) {
                            this.addTechControlsListeners_();
                        }

                        // Add the tech element in the DOM if it was not already there
                        // Make sure to not insert the original video element if using Html5
                        if (this.tech_.el().parentNode !== this.el() && (techName !== 'Html5' || !this.tag)) {
                            Dom.insertElFirst(this.tech_.el(), this.el());
                        }

                        // Get rid of the original video tag reference after the first tech is loaded
                        if (this.tag) {
                            this.tag.player = null;
                            this.tag = null;
                        }
                    };

                    /**
                     * Unload playback technology
                     *
                     * @method unloadTech_
                     * @private
                     */

                    Player.prototype.unloadTech_ = function unloadTech_() {
                        // Save the current text tracks so that we can reuse the same text tracks with the next tech
                        this.textTracks_ = this.textTracks();
                        this.textTracksJson_ = _tracksTextTrackListConverterJs2['default'].textTracksToJson(this.tech_);

                        this.isReady_ = false;

                        this.tech_.dispose();

                        this.tech_ = false;
                    };

                    /**
                     * Return a reference to the current tech.
                     * It will only return a reference to the tech if given an object with the
                     * `IWillNotUseThisInPlugins` property on it. This is try and prevent misuse
                     * of techs by plugins.
                     *
                     * @param {Object}
                     * @return {Object} The Tech
                     * @method tech
                     */

                    Player.prototype.tech = function tech(safety) {
                        if (safety && safety.IWillNotUseThisInPlugins) {
                            return this.tech_;
                        }
                        var errorText = '\n      Please make sure that you are not using this inside of a plugin.\n      To disable this alert and error, please pass in an object with\n      `IWillNotUseThisInPlugins` to the `tech` method. See\n      https://github.com/videojs/video.js/issues/2617 for more info.\n    ';
                        _globalWindow2['default'].alert(errorText);
                        throw new Error(errorText);
                    };

                    /**
                     * Set up click and touch listeners for the playback element
                     *
                     * On desktops, a click on the video itself will toggle playback,
                     * on a mobile device a click on the video toggles controls.
                     * (toggling controls is done by toggling the user state between active and
                     * inactive)
                     * A tap can signal that a user has become active, or has become inactive
                     * e.g. a quick tap on an iPhone movie should reveal the controls. Another
                     * quick tap should hide them again (signaling the user is in an inactive
                     * viewing state)
                     * In addition to this, we still want the user to be considered inactive after
                     * a few seconds of inactivity.
                     * Note: the only part of iOS interaction we can't mimic with this setup
                     * is a touch and hold on the video element counting as activity in order to
                     * keep the controls showing, but that shouldn't be an issue. A touch and hold
                     * on any controls will still keep the user active
                     *
                     * @private
                     * @method addTechControlsListeners_
                     */

                    Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {
                        // Make sure to remove all the previous listeners in case we are called multiple times.
                        this.removeTechControlsListeners_();

                        // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
                        // trigger mousedown/up.
                        // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
                        // Any touch events are set to block the mousedown event from happening
                        this.on(this.tech_, 'mousedown', this.handleTechClick_);

                        // If the controls were hidden we don't want that to change without a tap event
                        // so we'll check if the controls were already showing before reporting user
                        // activity
                        this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);
                        this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);
                        this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);

                        // The tap listener needs to come after the touchend listener because the tap
                        // listener cancels out any reportedUserActivity when setting userActive(false)
                        this.on(this.tech_, 'tap', this.handleTechTap_);
                    };

                    /**
                     * Remove the listeners used for click and tap controls. This is needed for
                     * toggling to controls disabled, where a tap/touch should do nothing.
                     *
                     * @method removeTechControlsListeners_
                     * @private
                     */

                    Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {
                        // We don't want to just use `this.off()` because there might be other needed
                        // listeners added by techs that extend this.
                        this.off(this.tech_, 'tap', this.handleTechTap_);
                        this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);
                        this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);
                        this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);
                        this.off(this.tech_, 'mousedown', this.handleTechClick_);
                    };

                    /**
                     * Player waits for the tech to be ready
                     *
                     * @method handleTechReady_
                     * @private
                     */

                    Player.prototype.handleTechReady_ = function handleTechReady_() {
                        this.triggerReady();

                        // Keep the same volume as before
                        if (this.cache_.volume) {
                            this.techCall_('setVolume', this.cache_.volume);
                        }

                        // Look if the tech found a higher resolution poster while loading
                        this.handleTechPosterChange_();

                        // Update the duration if available
                        this.handleTechDurationChange_();

                        // Chrome and Safari both have issues with autoplay.
                        // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.
                        // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)
                        // This fixes both issues. Need to wait for API, so it updates displays correctly
                        if (this.src() && this.tag && this.options_.autoplay && this.paused()) {
                            delete this.tag.poster; // Chrome Fix. Fixed in Chrome v16.
                            this.play();
                        }
                    };

                    /**
                     * Fired when the user agent begins looking for media data
                     *
                     * @private
                     * @method handleTechLoadStart_
                     */

                    Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {
                        // TODO: Update to use `emptied` event instead. See #1277.

                        this.removeClass('vjs-ended');

                        // reset the error state
                        this.error(null);

                        // If it's already playing we want to trigger a firstplay event now.
                        // The firstplay event relies on both the play and loadstart events
                        // which can happen in any order for a new source
                        if (!this.paused()) {
                            this.trigger('loadstart');
                            this.trigger('firstplay');
                        } else {
                            // reset the hasStarted state
                            this.hasStarted(false);
                            this.trigger('loadstart');
                        }
                    };

                    /**
                     * Add/remove the vjs-has-started class
                     *
                     * @param {Boolean} hasStarted The value of true adds the class the value of false remove the class
                     * @return {Boolean} Boolean value if has started
                     * @private
                     * @method hasStarted
                     */

                    Player.prototype.hasStarted = function hasStarted(_hasStarted) {
                        if (_hasStarted !== undefined) {
                            // only update if this is a new value
                            if (this.hasStarted_ !== _hasStarted) {
                                this.hasStarted_ = _hasStarted;
                                if (_hasStarted) {
                                    this.addClass('vjs-has-started');
                                    // trigger the firstplay event if this newly has played
                                    this.trigger('firstplay');
                                } else {
                                    this.removeClass('vjs-has-started');
                                }
                            }
                            return this;
                        }
                        return !!this.hasStarted_;
                    };

                    /**
                     * Fired whenever the media begins or resumes playback
                     *
                     * @private
                     * @method handleTechPlay_
                     */

                    Player.prototype.handleTechPlay_ = function handleTechPlay_() {
                        this.removeClass('vjs-ended');
                        this.removeClass('vjs-paused');
                        this.addClass('vjs-playing');

                        // hide the poster when the user hits play
                        // https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play
                        this.hasStarted(true);

                        this.trigger('play');
                    };

                    /**
                     * Fired whenever the media begins waiting
                     *
                     * @private
                     * @method handleTechWaiting_
                     */

                    Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {
                        var _this2 = this;

                        this.addClass('vjs-waiting');
                        this.trigger('waiting');
                        this.one('timeupdate', function () {
                            return _this2.removeClass('vjs-waiting');
                        });
                    };

                    /**
                     * A handler for events that signal that waiting has ended
                     * which is not consistent between browsers. See #1351
                     *
                     * @private
                     * @method handleTechCanPlay_
                     */

                    Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {
                        this.removeClass('vjs-waiting');
                        this.trigger('canplay');
                    };

                    /**
                     * A handler for events that signal that waiting has ended
                     * which is not consistent between browsers. See #1351
                     *
                     * @private
                     * @method handleTechCanPlayThrough_
                     */

                    Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {
                        this.removeClass('vjs-waiting');
                        this.trigger('canplaythrough');
                    };

                    /**
                     * A handler for events that signal that waiting has ended
                     * which is not consistent between browsers. See #1351
                     *
                     * @private
                     * @method handleTechPlaying_
                     */

                    Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {
                        this.removeClass('vjs-waiting');
                        this.trigger('playing');
                    };

                    /**
                     * Fired whenever the player is jumping to a new time
                     *
                     * @private
                     * @method handleTechSeeking_
                     */

                    Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {
                        this.addClass('vjs-seeking');
                        this.trigger('seeking');
                    };

                    /**
                     * Fired when the player has finished jumping to a new time
                     *
                     * @private
                     * @method handleTechSeeked_
                     */

                    Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {
                        this.removeClass('vjs-seeking');
                        this.trigger('seeked');
                    };

                    /**
                     * Fired the first time a video is played
                     * Not part of the HLS spec, and we're not sure if this is the best
                     * implementation yet, so use sparingly. If you don't have a reason to
                     * prevent playback, use `myPlayer.one('play');` instead.
                     *
                     * @private
                     * @method handleTechFirstPlay_
                     */

                    Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {
                        //If the first starttime attribute is specified
                        //then we will start at the given offset in seconds
                        if (this.options_.starttime) {
                            this.currentTime(this.options_.starttime);
                        }

                        this.addClass('vjs-has-started');
                        this.trigger('firstplay');
                    };

                    /**
                     * Fired whenever the media has been paused
                     *
                     * @private
                     * @method handleTechPause_
                     */

                    Player.prototype.handleTechPause_ = function handleTechPause_() {
                        this.removeClass('vjs-playing');
                        this.addClass('vjs-paused');
                        this.trigger('pause');
                    };

                    /**
                     * Fired while the user agent is downloading media data
                     *
                     * @private
                     * @method handleTechProgress_
                     */

                    Player.prototype.handleTechProgress_ = function handleTechProgress_() {
                        this.trigger('progress');
                    };

                    /**
                     * Fired when the end of the media resource is reached (currentTime == duration)
                     *
                     * @private
                     * @method handleTechEnded_
                     */

                    Player.prototype.handleTechEnded_ = function handleTechEnded_() {
                        this.addClass('vjs-ended');
                        if (this.options_.loop) {
                            this.currentTime(0);
                            this.play();
                        } else if (!this.paused()) {
                            this.pause();
                        }

                        this.trigger('ended');
                    };

                    /**
                     * Fired when the duration of the media resource is first known or changed
                     *
                     * @private
                     * @method handleTechDurationChange_
                     */

                    Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {
                        this.duration(this.techGet_('duration'));
                    };

                    /**
                     * Handle a click on the media element to play/pause
                     *
                     * @param {Object=} event Event object
                     * @private
                     * @method handleTechClick_
                     */

                    Player.prototype.handleTechClick_ = function handleTechClick_(event) {
                        // We're using mousedown to detect clicks thanks to Flash, but mousedown
                        // will also be triggered with right-clicks, so we need to prevent that
                        if (event.button !== 0) return;

                        // When controls are disabled a click should not toggle playback because
                        // the click is considered a control
                        if (this.controls()) {
                            if (this.paused()) {
                                this.play();
                            } else {
                                this.pause();
                            }
                        }
                    };

                    /**
                     * Handle a tap on the media element. It will toggle the user
                     * activity state, which hides and shows the controls.
                     *
                     * @private
                     * @method handleTechTap_
                     */

                    Player.prototype.handleTechTap_ = function handleTechTap_() {
                        this.userActive(!this.userActive());
                    };

                    /**
                     * Handle touch to start
                     *
                     * @private
                     * @method handleTechTouchStart_
                     */

                    Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {
                        this.userWasActive = this.userActive();
                    };

                    /**
                     * Handle touch to move
                     *
                     * @private
                     * @method handleTechTouchMove_
                     */

                    Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {
                        if (this.userWasActive) {
                            this.reportUserActivity();
                        }
                    };

                    /**
                     * Handle touch to end
                     *
                     * @private
                     * @method handleTechTouchEnd_
                     */

                    Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {
                        // Stop the mouse events from also happening
                        event.preventDefault();
                    };

                    /**
                     * Fired when the player switches in or out of fullscreen mode
                     *
                     * @private
                     * @method handleFullscreenChange_
                     */

                    Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {
                        if (this.isFullscreen()) {
                            this.addClass('vjs-fullscreen');
                        } else {
                            this.removeClass('vjs-fullscreen');
                        }
                    };

                    /**
                     * native click events on the SWF aren't triggered on IE11, Win8.1RT
                     * use stageclick events triggered from inside the SWF instead
                     *
                     * @private
                     * @method handleStageClick_
                     */

                    Player.prototype.handleStageClick_ = function handleStageClick_() {
                        this.reportUserActivity();
                    };

                    /**
                     * Handle Tech Fullscreen Change
                     *
                     * @private
                     * @method handleTechFullscreenChange_
                     */

                    Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {
                        if (data) {
                            this.isFullscreen(data.isFullscreen);
                        }
                        this.trigger('fullscreenchange');
                    };

                    /**
                     * Fires when an error occurred during the loading of an audio/video
                     *
                     * @private
                     * @method handleTechError_
                     */

                    Player.prototype.handleTechError_ = function handleTechError_() {
                        var error = this.tech_.error();
                        this.error(error && error.code);
                    };

                    /**
                     * Fires when the browser is intentionally not getting media data
                     *
                     * @private
                     * @method handleTechSuspend_
                     */

                    Player.prototype.handleTechSuspend_ = function handleTechSuspend_() {
                        this.trigger('suspend');
                    };

                    /**
                     * Fires when the loading of an audio/video is aborted
                     *
                     * @private
                     * @method handleTechAbort_
                     */

                    Player.prototype.handleTechAbort_ = function handleTechAbort_() {
                        this.trigger('abort');
                    };

                    /**
                     * Fires when the current playlist is empty
                     *
                     * @private
                     * @method handleTechEmptied_
                     */

                    Player.prototype.handleTechEmptied_ = function handleTechEmptied_() {
                        this.trigger('emptied');
                    };

                    /**
                     * Fires when the browser is trying to get media data, but data is not available
                     *
                     * @private
                     * @method handleTechStalled_
                     */

                    Player.prototype.handleTechStalled_ = function handleTechStalled_() {
                        this.trigger('stalled');
                    };

                    /**
                     * Fires when the browser has loaded meta data for the audio/video
                     *
                     * @private
                     * @method handleTechLoadedMetaData_
                     */

                    Player.prototype.handleTechLoadedMetaData_ = function handleTechLoadedMetaData_() {
                        this.trigger('loadedmetadata');
                    };

                    /**
                     * Fires when the browser has loaded the current frame of the audio/video
                     *
                     * @private
                     * @method handleTechLoadedData_
                     */

                    Player.prototype.handleTechLoadedData_ = function handleTechLoadedData_() {
                        this.trigger('loadeddata');
                    };

                    /**
                     * Fires when the current playback position has changed
                     *
                     * @private
                     * @method handleTechTimeUpdate_
                     */

                    Player.prototype.handleTechTimeUpdate_ = function handleTechTimeUpdate_() {
                        this.trigger('timeupdate');
                    };

                    /**
                     * Fires when the playing speed of the audio/video is changed
                     *
                     * @private
                     * @method handleTechRateChange_
                     */

                    Player.prototype.handleTechRateChange_ = function handleTechRateChange_() {
                        this.trigger('ratechange');
                    };

                    /**
                     * Fires when the volume has been changed
                     *
                     * @private
                     * @method handleTechVolumeChange_
                     */

                    Player.prototype.handleTechVolumeChange_ = function handleTechVolumeChange_() {
                        this.trigger('volumechange');
                    };

                    /**
                     * Fires when the text track has been changed
                     *
                     * @private
                     * @method handleTechTextTrackChange_
                     */

                    Player.prototype.handleTechTextTrackChange_ = function handleTechTextTrackChange_() {
                        this.trigger('texttrackchange');
                    };

                    /**
                     * Get object for cached values.
                     *
                     * @return {Object}
                     * @method getCache
                     */

                    Player.prototype.getCache = function getCache() {
                        return this.cache_;
                    };

                    /**
                     * Pass values to the playback tech
                     *
                     * @param {String=} method Method
                     * @param {Object=} arg Argument
                     * @private
                     * @method techCall_
                     */

                    Player.prototype.techCall_ = function techCall_(method, arg) {
                        // If it's not ready yet, call method when it is
                        if (this.tech_ && !this.tech_.isReady_) {
                            this.tech_.ready(function () {
                                this[method](arg);
                            }, true);

                            // Otherwise call method now
                        } else {
                            try {
                                this.tech_[method](arg);
                            } catch (e) {
                                _utilsLogJs2['default'](e);
                                throw e;
                            }
                        }
                    };

                    /**
                     * Get calls can't wait for the tech, and sometimes don't need to.
                     *
                     * @param {String} method Tech method
                     * @return {Method}
                     * @private
                     * @method techGet_
                     */

                    Player.prototype.techGet_ = function techGet_(method) {
                        if (this.tech_ && this.tech_.isReady_) {

                            // Flash likes to die and reload when you hide or reposition it.
                            // In these cases the object methods go away and we get errors.
                            // When that happens we'll catch the errors and inform tech that it's not ready any more.
                            try {
                                return this.tech_[method]();
                            } catch (e) {
                                // When building additional tech libs, an expected method may not be defined yet
                                if (this.tech_[method] === undefined) {
                                    _utilsLogJs2['default']('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);
                                } else {
                                    // When a method isn't available on the object it throws a TypeError
                                    if (e.name === 'TypeError') {
                                        _utilsLogJs2['default']('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);
                                        this.tech_.isReady_ = false;
                                    } else {
                                        _utilsLogJs2['default'](e);
                                    }
                                }
                                throw e;
                            }
                        }

                        return;
                    };

                    /**
                     * start media playback
                     * ```js
                     *     myPlayer.play();
                     * ```
                     *
                     * @return {Player} self
                     * @method play
                     */

                    Player.prototype.play = function play() {
                        this.techCall_('play');
                        return this;
                    };

                    /**
                     * Pause the video playback
                     * ```js
                     *     myPlayer.pause();
                     * ```
                     *
                     * @return {Player} self
                     * @method pause
                     */

                    Player.prototype.pause = function pause() {
                        this.techCall_('pause');
                        return this;
                    };

                    /**
                     * Check if the player is paused
                     * ```js
                     *     var isPaused = myPlayer.paused();
                     *     var isPlaying = !myPlayer.paused();
                     * ```
                     *
                     * @return {Boolean} false if the media is currently playing, or true otherwise
                     * @method paused
                     */

                    Player.prototype.paused = function paused() {
                        // The initial state of paused should be true (in Safari it's actually false)
                        return this.techGet_('paused') === false ? false : true;
                    };

                    /**
                     * Returns whether or not the user is "scrubbing". Scrubbing is when the user
                     * has clicked the progress bar handle and is dragging it along the progress bar.
                     *
                     * @param  {Boolean} isScrubbing   True/false the user is scrubbing
                     * @return {Boolean}               The scrubbing status when getting
                     * @return {Object}                The player when setting
                     * @method scrubbing
                     */

                    Player.prototype.scrubbing = function scrubbing(isScrubbing) {
                        if (isScrubbing !== undefined) {
                            this.scrubbing_ = !!isScrubbing;

                            if (isScrubbing) {
                                this.addClass('vjs-scrubbing');
                            } else {
                                this.removeClass('vjs-scrubbing');
                            }

                            return this;
                        }

                        return this.scrubbing_;
                    };

                    /**
                     * Get or set the current time (in seconds)
                     * ```js
                     *     // get
                     *     var whereYouAt = myPlayer.currentTime();
                     *     // set
                     *     myPlayer.currentTime(120); // 2 minutes into the video
                     * ```
                     *
                     * @param  {Number|String=} seconds The time to seek to
                     * @return {Number}        The time in seconds, when not setting
                     * @return {Player}    self, when the current time is set
                     * @method currentTime
                     */

                    Player.prototype.currentTime = function currentTime(seconds) {
                        if (seconds !== undefined) {

                            this.techCall_('setCurrentTime', seconds);

                            return this;
                        }

                        // cache last currentTime and return. default to 0 seconds
                        //
                        // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
                        // currentTime when scrubbing, but may not provide much performance benefit afterall.
                        // Should be tested. Also something has to read the actual current time or the cache will
                        // never get updated.
                        return this.cache_.currentTime = this.techGet_('currentTime') || 0;
                    };

                    /**
                     * Get the length in time of the video in seconds
                     * ```js
                     *     var lengthOfVideo = myPlayer.duration();
                     * ```
                     * **NOTE**: The video must have started loading before the duration can be
                     * known, and in the case of Flash, may not be known until the video starts
                     * playing.
                     *
                     * @param {Number} seconds Duration when setting
                     * @return {Number} The duration of the video in seconds when getting
                     * @method duration
                     */

                    Player.prototype.duration = function duration(seconds) {
                        if (seconds === undefined) {
                            return this.cache_.duration || 0;
                        }

                        seconds = parseFloat(seconds) || 0;

                        // Standardize on Inifity for signaling video is live
                        if (seconds < 0) {
                            seconds = Infinity;
                        }

                        if (seconds !== this.cache_.duration) {
                            // Cache the last set value for optimized scrubbing (esp. Flash)
                            this.cache_.duration = seconds;

                            if (seconds === Infinity) {
                                this.addClass('vjs-live');
                            } else {
                                this.removeClass('vjs-live');
                            }

                            this.trigger('durationchange');
                        }

                        return this;
                    };

                    /**
                     * Calculates how much time is left.
                     * ```js
                     *     var timeLeft = myPlayer.remainingTime();
                     * ```
                     * Not a native video element function, but useful
                     *
                     * @return {Number} The time remaining in seconds
                     * @method remainingTime
                     */

                    Player.prototype.remainingTime = function remainingTime() {
                        return this.duration() - this.currentTime();
                    };

                    // http://dev.w3.org/html5/spec/video.html#dom-media-buffered
                    // Buffered returns a timerange object.
                    // Kind of like an array of portions of the video that have been downloaded.

                    /**
                     * Get a TimeRange object with the times of the video that have been downloaded
                     * If you just want the percent of the video that's been downloaded,
                     * use bufferedPercent.
                     * ```js
                     *     // Number of different ranges of time have been buffered. Usually 1.
                     *     numberOfRanges = bufferedTimeRange.length,
                     *     // Time in seconds when the first range starts. Usually 0.
                     *     firstRangeStart = bufferedTimeRange.start(0),
                     *     // Time in seconds when the first range ends
                     *     firstRangeEnd = bufferedTimeRange.end(0),
                     *     // Length in seconds of the first time range
                     *     firstRangeLength = firstRangeEnd - firstRangeStart;
                     * ```
                     *
                     * @return {Object} A mock TimeRange object (following HTML spec)
                     * @method buffered
                     */

                    Player.prototype.buffered = function buffered() {
                        var buffered = this.techGet_('buffered');

                        if (!buffered || !buffered.length) {
                            buffered = _utilsTimeRangesJs.createTimeRange(0, 0);
                        }

                        return buffered;
                    };

                    /**
                     * Get the percent (as a decimal) of the video that's been downloaded
                     * ```js
                     *     var howMuchIsDownloaded = myPlayer.bufferedPercent();
                     * ```
                     * 0 means none, 1 means all.
                     * (This method isn't in the HTML5 spec, but it's very convenient)
                     *
                     * @return {Number} A decimal between 0 and 1 representing the percent
                     * @method bufferedPercent
                     */

                    Player.prototype.bufferedPercent = function bufferedPercent() {
                        return _utilsBufferJs.bufferedPercent(this.buffered(), this.duration());
                    };

                    /**
                     * Get the ending time of the last buffered time range
                     * This is used in the progress bar to encapsulate all time ranges.
                     *
                     * @return {Number} The end of the last buffered time range
                     * @method bufferedEnd
                     */

                    Player.prototype.bufferedEnd = function bufferedEnd() {
                        var buffered = this.buffered(),
                            duration = this.duration(),
                            end = buffered.end(buffered.length - 1);

                        if (end > duration) {
                            end = duration;
                        }

                        return end;
                    };

                    /**
                     * Get or set the current volume of the media
                     * ```js
                     *     // get
                     *     var howLoudIsIt = myPlayer.volume();
                     *     // set
                     *     myPlayer.volume(0.5); // Set volume to half
                     * ```
                     * 0 is off (muted), 1.0 is all the way up, 0.5 is half way.
                     *
                     * @param  {Number} percentAsDecimal The new volume as a decimal percent
                     * @return {Number}              The current volume when getting
                     * @return {Player}              self when setting
                     * @method volume
                     */

                    Player.prototype.volume = function volume(percentAsDecimal) {
                        var vol = undefined;

                        if (percentAsDecimal !== undefined) {
                            vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal))); // Force value to between 0 and 1
                            this.cache_.volume = vol;
                            this.techCall_('setVolume', vol);

                            return this;
                        }

                        // Default to 1 when returning current volume.
                        vol = parseFloat(this.techGet_('volume'));
                        return isNaN(vol) ? 1 : vol;
                    };

                    /**
                     * Get the current muted state, or turn mute on or off
                     * ```js
                     *     // get
                     *     var isVolumeMuted = myPlayer.muted();
                     *     // set
                     *     myPlayer.muted(true); // mute the volume
                     * ```
                     *
                     * @param  {Boolean=} muted True to mute, false to unmute
                     * @return {Boolean} True if mute is on, false if not when getting
                     * @return {Player} self when setting mute
                     * @method muted
                     */

                    Player.prototype.muted = function muted(_muted) {
                        if (_muted !== undefined) {
                            this.techCall_('setMuted', _muted);
                            return this;
                        }
                        return this.techGet_('muted') || false; // Default to false
                    };

                    // Check if current tech can support native fullscreen
                    // (e.g. with built in controls like iOS, so not our flash swf)
                    /**
                     * Check to see if fullscreen is supported
                     *
                     * @return {Boolean}
                     * @method supportsFullScreen
                     */

                    Player.prototype.supportsFullScreen = function supportsFullScreen() {
                        return this.techGet_('supportsFullScreen') || false;
                    };

                    /**
                     * Check if the player is in fullscreen mode
                     * ```js
                     *     // get
                     *     var fullscreenOrNot = myPlayer.isFullscreen();
                     *     // set
                     *     myPlayer.isFullscreen(true); // tell the player it's in fullscreen
                     * ```
                     * NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
                     * property and instead document.fullscreenElement is used. But isFullscreen is
                     * still a valuable property for internal player workings.
                     *
                     * @param  {Boolean=} isFS Update the player's fullscreen state
                     * @return {Boolean} true if fullscreen false if not when getting
                     * @return {Player} self when setting
                     * @method isFullscreen
                     */

                    Player.prototype.isFullscreen = function isFullscreen(isFS) {
                        if (isFS !== undefined) {
                            this.isFullscreen_ = !!isFS;
                            return this;
                        }
                        return !!this.isFullscreen_;
                    };

                    /**
                     * Increase the size of the video to full screen
                     * ```js
                     *     myPlayer.requestFullscreen();
                     * ```
                     * In some browsers, full screen is not supported natively, so it enters
                     * "full window mode", where the video fills the browser window.
                     * In browsers and devices that support native full screen, sometimes the
                     * browser's default controls will be shown, and not the Video.js custom skin.
                     * This includes most mobile devices (iOS, Android) and older versions of
                     * Safari.
                     *
                     * @return {Player} self
                     * @method requestFullscreen
                     */

                    Player.prototype.requestFullscreen = function requestFullscreen() {
                        var fsApi = _fullscreenApiJs2['default'];

                        this.isFullscreen(true);

                        if (fsApi.requestFullscreen) {
                            // the browser supports going fullscreen at the element level so we can
                            // take the controls fullscreen as well as the video

                            // Trigger fullscreenchange event after change
                            // We have to specifically add this each time, and remove
                            // when canceling fullscreen. Otherwise if there's multiple
                            // players on a page, they would all be reacting to the same fullscreen
                            // events
                            Events.on(_globalDocument2['default'], fsApi.fullscreenchange, Fn.bind(this, function documentFullscreenChange(e) {
                                this.isFullscreen(_globalDocument2['default'][fsApi.fullscreenElement]);

                                // If cancelling fullscreen, remove event listener.
                                if (this.isFullscreen() === false) {
                                    Events.off(_globalDocument2['default'], fsApi.fullscreenchange, documentFullscreenChange);
                                }

                                this.trigger('fullscreenchange');
                            }));

                            this.el_[fsApi.requestFullscreen]();
                        } else if (this.tech_.supportsFullScreen()) {
                            // we can't take the video.js controls fullscreen but we can go fullscreen
                            // with native controls
                            this.techCall_('enterFullScreen');
                        } else {
                            // fullscreen isn't supported so we'll just stretch the video element to
                            // fill the viewport
                            this.enterFullWindow();
                            this.trigger('fullscreenchange');
                        }

                        return this;
                    };

                    /**
                     * Return the video to its normal size after having been in full screen mode
                     * ```js
                     *     myPlayer.exitFullscreen();
                     * ```
                     *
                     * @return {Player} self
                     * @method exitFullscreen
                     */

                    Player.prototype.exitFullscreen = function exitFullscreen() {
                        var fsApi = _fullscreenApiJs2['default'];
                        this.isFullscreen(false);

                        // Check for browser element fullscreen support
                        if (fsApi.requestFullscreen) {
                            _globalDocument2['default'][fsApi.exitFullscreen]();
                        } else if (this.tech_.supportsFullScreen()) {
                            this.techCall_('exitFullScreen');
                        } else {
                            this.exitFullWindow();
                            this.trigger('fullscreenchange');
                        }

                        return this;
                    };

                    /**
                     * When fullscreen isn't supported we can stretch the video container to as wide as the browser will let us.
                     *
                     * @method enterFullWindow
                     */

                    Player.prototype.enterFullWindow = function enterFullWindow() {
                        this.isFullWindow = true;

                        // Storing original doc overflow value to return to when fullscreen is off
                        this.docOrigOverflow = _globalDocument2['default'].documentElement.style.overflow;

                        // Add listener for esc key to exit fullscreen
                        Events.on(_globalDocument2['default'], 'keydown', Fn.bind(this, this.fullWindowOnEscKey));

                        // Hide any scroll bars
                        _globalDocument2['default'].documentElement.style.overflow = 'hidden';

                        // Apply fullscreen styles
                        Dom.addElClass(_globalDocument2['default'].body, 'vjs-full-window');

                        this.trigger('enterFullWindow');
                    };

                    /**
                     * Check for call to either exit full window or full screen on ESC key
                     *
                     * @param {String} event Event to check for key press
                     * @method fullWindowOnEscKey
                     */

                    Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {
                        if (event.keyCode === 27) {
                            if (this.isFullscreen() === true) {
                                this.exitFullscreen();
                            } else {
                                this.exitFullWindow();
                            }
                        }
                    };

                    /**
                     * Exit full window
                     *
                     * @method exitFullWindow
                     */

                    Player.prototype.exitFullWindow = function exitFullWindow() {
                        this.isFullWindow = false;
                        Events.off(_globalDocument2['default'], 'keydown', this.fullWindowOnEscKey);

                        // Unhide scroll bars.
                        _globalDocument2['default'].documentElement.style.overflow = this.docOrigOverflow;

                        // Remove fullscreen styles
                        Dom.removeElClass(_globalDocument2['default'].body, 'vjs-full-window');

                        // Resize the box, controller, and poster to original sizes
                        // this.positionAll();
                        this.trigger('exitFullWindow');
                    };

                    /**
                     * Check whether the player can play a given mimetype
                     *
                     * @param {String} type The mimetype to check
                     * @return {String} 'probably', 'maybe', or '' (empty string)
                     * @method canPlayType
                     */

                    Player.prototype.canPlayType = function canPlayType(type) {
                        var can = undefined;

                        // Loop through each playback technology in the options order
                        for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
                            var techName = _utilsToTitleCaseJs2['default'](j[i]);
                            var tech = _techTechJs2['default'].getTech(techName);

                            // Support old behavior of techs being registered as components.
                            // Remove once that deprecated behavior is removed.
                            if (!tech) {
                                tech = _componentJs2['default'].getComponent(techName);
                            }

                            // Check if the current tech is defined before continuing
                            if (!tech) {
                                _utilsLogJs2['default'].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
                                continue;
                            }

                            // Check if the browser supports this technology
                            if (tech.isSupported()) {
                                can = tech.canPlayType(type);

                                if (can) {
                                    return can;
                                }
                            }
                        }

                        return '';
                    };

                    /**
                     * Select source based on tech-order or source-order
                     * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
                     * defaults to tech-order selection
                     *
                     * @param {Array} sources The sources for a media asset
                     * @return {Object|Boolean} Object of source and tech order, otherwise false
                     * @method selectSource
                     */

                    Player.prototype.selectSource = function selectSource(sources) {
                        // Get only the techs specified in `techOrder` that exist and are supported by the
                        // current platform
                        var techs = this.options_.techOrder.map(_utilsToTitleCaseJs2['default']).map(function (techName) {
                            // `Component.getComponent(...)` is for support of old behavior of techs
                            // being registered as components.
                            // Remove once that deprecated behavior is removed.
                            return [techName, _techTechJs2['default'].getTech(techName) || _componentJs2['default'].getComponent(techName)];
                        }).filter(function (_ref) {
                            var techName = _ref[0];
                            var tech = _ref[1];

                            // Check if the current tech is defined before continuing
                            if (tech) {
                                // Check if the browser supports this technology
                                return tech.isSupported();
                            }

                            _utilsLogJs2['default'].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
                            return false;
                        });

                        // Iterate over each `innerArray` element once per `outerArray` element and execute
                        // `tester` with both. If `tester` returns a non-falsy value, exit early and return
                        // that value.
                        var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {
                            var found = undefined;

                            outerArray.some(function (outerChoice) {
                                return innerArray.some(function (innerChoice) {
                                    found = tester(outerChoice, innerChoice);

                                    if (found) {
                                        return true;
                                    }
                                });
                            });

                            return found;
                        };

                        var foundSourceAndTech = undefined;
                        var flip = function flip(fn) {
                            return function (a, b) {
                                return fn(b, a);
                            };
                        };
                        var finder = function finder(_ref2, source) {
                            var techName = _ref2[0];
                            var tech = _ref2[1];

                            if (tech.canPlaySource(source)) {
                                return { source: source, tech: techName };
                            }
                        };

                        // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources
                        // to select from them based on their priority.
                        if (this.options_.sourceOrder) {
                            // Source-first ordering
                            foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
                        } else {
                            // Tech-first ordering
                            foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
                        }

                        return foundSourceAndTech || false;
                    };

                    /**
                     * The source function updates the video source
                     * There are three types of variables you can pass as the argument.
                     * **URL String**: A URL to the the video file. Use this method if you are sure
                     * the current playback technology (HTML5/Flash) can support the source you
                     * provide. Currently only MP4 files can be used in both HTML5 and Flash.
                     * ```js
                     *     myPlayer.src("http://www.example.com/path/to/video.mp4");
                     * ```
                     * **Source Object (or element):* * A javascript object containing information
                     * about the source file. Use this method if you want the player to determine if
                     * it can support the file using the type information.
                     * ```js
                     *     myPlayer.src({ type: "video/mp4", src: "http://www.example.com/path/to/video.mp4" });
                     * ```
                     * **Array of Source Objects:* * To provide multiple versions of the source so
                     * that it can be played using HTML5 across browsers you can use an array of
                     * source objects. Video.js will detect which version is supported and load that
                     * file.
                     * ```js
                     *     myPlayer.src([
                     *       { type: "video/mp4", src: "http://www.example.com/path/to/video.mp4" },
                     *       { type: "video/webm", src: "http://www.example.com/path/to/video.webm" },
                     *       { type: "video/ogg", src: "http://www.example.com/path/to/video.ogv" }
                     *     ]);
                     * ```
                     *
                     * @param  {String|Object|Array=} source The source URL, object, or array of sources
                     * @return {String} The current video source when getting
                     * @return {String} The player when setting
                     * @method src
                     */

                    Player.prototype.src = function src(source) {
                        if (source === undefined) {
                            return this.techGet_('src');
                        }

                        var currentTech = _techTechJs2['default'].getTech(this.techName_);
                        // Support old behavior of techs being registered as components.
                        // Remove once that deprecated behavior is removed.
                        if (!currentTech) {
                            currentTech = _componentJs2['default'].getComponent(this.techName_);
                        }

                        // case: Array of source objects to choose from and pick the best to play
                        if (Array.isArray(source)) {
                            this.sourceList_(source);

                            // case: URL String (http://myvideo...)
                        } else if (typeof source === 'string') {
                            // create a source object from the string
                            this.src({ src: source });

                            // case: Source object { src: '', type: '' ... }
                        } else if (source instanceof Object) {
                            // check if the source has a type and the loaded tech cannot play the source
                            // if there's no type we'll just try the current tech
                            if (source.type && !currentTech.canPlaySource(source)) {
                                // create a source list with the current source and send through
                                // the tech loop to check for a compatible technology
                                this.sourceList_([source]);
                            } else {
                                this.cache_.src = source.src;
                                this.currentType_ = source.type || '';

                                // wait until the tech is ready to set the source
                                this.ready(function () {

                                    // The setSource tech method was added with source handlers
                                    // so older techs won't support it
                                    // We need to check the direct prototype for the case where subclasses
                                    // of the tech do not support source handlers
                                    if (currentTech.prototype.hasOwnProperty('setSource')) {
                                        this.techCall_('setSource', source);
                                    } else {
                                        this.techCall_('src', source.src);
                                    }

                                    if (this.options_.preload === 'auto') {
                                        this.load();
                                    }

                                    if (this.options_.autoplay) {
                                        this.play();
                                    }

                                    // Set the source synchronously if possible (#2326)
                                }, true);
                            }
                        }

                        return this;
                    };

                    /**
                     * Handle an array of source objects
                     *
                     * @param  {Array} sources Array of source objects
                     * @private
                     * @method sourceList_
                     */

                    Player.prototype.sourceList_ = function sourceList_(sources) {
                        var sourceTech = this.selectSource(sources);

                        if (sourceTech) {
                            if (sourceTech.tech === this.techName_) {
                                // if this technology is already loaded, set the source
                                this.src(sourceTech.source);
                            } else {
                                // load this technology with the chosen source
                                this.loadTech_(sourceTech.tech, sourceTech.source);
                            }
                        } else {
                            // We need to wrap this in a timeout to give folks a chance to add error event handlers
                            this.setTimeout(function () {
                                this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
                            }, 0);

                            // we could not find an appropriate tech, but let's still notify the delegate that this is it
                            // this needs a better comment about why this is needed
                            this.triggerReady();
                        }
                    };

                    /**
                     * Begin loading the src data.
                     *
                     * @return {Player} Returns the player
                     * @method load
                     */

                    Player.prototype.load = function load() {
                        this.techCall_('load');
                        return this;
                    };

                    /**
                     * Reset the player. Loads the first tech in the techOrder,
                     * and calls `reset` on the tech`.
                     *
                     * @return {Player} Returns the player
                     * @method reset
                     */

                    Player.prototype.reset = function reset() {
                        this.loadTech_(_utilsToTitleCaseJs2['default'](this.options_.techOrder[0]), null);
                        this.techCall_('reset');
                        return this;
                    };

                    /**
                     * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
                     * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.
                     *
                     * @return {String} The current source
                     * @method currentSrc
                     */

                    Player.prototype.currentSrc = function currentSrc() {
                        return this.techGet_('currentSrc') || this.cache_.src || '';
                    };

                    /**
                     * Get the current source type e.g. video/mp4
                     * This can allow you rebuild the current source object so that you could load the same
                     * source and tech later
                     *
                     * @return {String} The source MIME type
                     * @method currentType
                     */

                    Player.prototype.currentType = function currentType() {
                        return this.currentType_ || '';
                    };

                    /**
                     * Get or set the preload attribute
                     *
                     * @param {Boolean} value Boolean to determine if preload should be used
                     * @return {String} The preload attribute value when getting
                     * @return {Player} Returns the player when setting
                     * @method preload
                     */

                    Player.prototype.preload = function preload(value) {
                        if (value !== undefined) {
                            this.techCall_('setPreload', value);
                            this.options_.preload = value;
                            return this;
                        }
                        return this.techGet_('preload');
                    };

                    /**
                     * Get or set the autoplay attribute.
                     *
                     * @param {Boolean} value Boolean to determine if video should autoplay
                     * @return {String} The autoplay attribute value when getting
                     * @return {Player} Returns the player when setting
                     * @method autoplay
                     */

                    Player.prototype.autoplay = function autoplay(value) {
                        if (value !== undefined) {
                            this.techCall_('setAutoplay', value);
                            this.options_.autoplay = value;
                            return this;
                        }
                        return this.techGet_('autoplay', value);
                    };

                    /**
                     * Get or set the loop attribute on the video element.
                     *
                     * @param {Boolean} value Boolean to determine if video should loop
                     * @return {String} The loop attribute value when getting
                     * @return {Player} Returns the player when setting
                     * @method loop
                     */

                    Player.prototype.loop = function loop(value) {
                        if (value !== undefined) {
                            this.techCall_('setLoop', value);
                            this.options_['loop'] = value;
                            return this;
                        }
                        return this.techGet_('loop');
                    };

                    /**
                     * Get or set the poster image source url
                     *
                     * ##### EXAMPLE:
                     * ```js
                     *     // get
                     *     var currentPoster = myPlayer.poster();
                     *     // set
                     *     myPlayer.poster('http://example.com/myImage.jpg');
                     * ```
                     *
                     * @param  {String=} src Poster image source URL
                     * @return {String} poster URL when getting
                     * @return {Player} self when setting
                     * @method poster
                     */

                    Player.prototype.poster = function poster(src) {
                        if (src === undefined) {
                            return this.poster_;
                        }

                        // The correct way to remove a poster is to set as an empty string
                        // other falsey values will throw errors
                        if (!src) {
                            src = '';
                        }

                        // update the internal poster variable
                        this.poster_ = src;

                        // update the tech's poster
                        this.techCall_('setPoster', src);

                        // alert components that the poster has been set
                        this.trigger('posterchange');

                        return this;
                    };

                    /**
                     * Some techs (e.g. YouTube) can provide a poster source in an
                     * asynchronous way. We want the poster component to use this
                     * poster source so that it covers up the tech's controls.
                     * (YouTube's play button). However we only want to use this
                     * soruce if the player user hasn't set a poster through
                     * the normal APIs.
                     *
                     * @private
                     * @method handleTechPosterChange_
                     */

                    Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {
                        if (!this.poster_ && this.tech_ && this.tech_.poster) {
                            this.poster_ = this.tech_.poster() || '';

                            // Let components know the poster has changed
                            this.trigger('posterchange');
                        }
                    };

                    /**
                     * Get or set whether or not the controls are showing.
                     *
                     * @param  {Boolean} bool Set controls to showing or not
                     * @return {Boolean}    Controls are showing
                     * @method controls
                     */

                    Player.prototype.controls = function controls(bool) {
                        if (bool !== undefined) {
                            bool = !!bool; // force boolean
                            // Don't trigger a change event unless it actually changed
                            if (this.controls_ !== bool) {
                                this.controls_ = bool;

                                if (this.usingNativeControls()) {
                                    this.techCall_('setControls', bool);
                                }

                                if (bool) {
                                    this.removeClass('vjs-controls-disabled');
                                    this.addClass('vjs-controls-enabled');
                                    this.trigger('controlsenabled');

                                    if (!this.usingNativeControls()) {
                                        this.addTechControlsListeners_();
                                    }
                                } else {
                                    this.removeClass('vjs-controls-enabled');
                                    this.addClass('vjs-controls-disabled');
                                    this.trigger('controlsdisabled');

                                    if (!this.usingNativeControls()) {
                                        this.removeTechControlsListeners_();
                                    }
                                }
                            }
                            return this;
                        }
                        return !!this.controls_;
                    };

                    /**
                     * Toggle native controls on/off. Native controls are the controls built into
                     * devices (e.g. default iPhone controls), Flash, or other techs
                     * (e.g. Vimeo Controls)
                     * **This should only be set by the current tech, because only the tech knows
                     * if it can support native controls**
                     *
                     * @param  {Boolean} bool    True signals that native controls are on
                     * @return {Player}      Returns the player
                     * @private
                     * @method usingNativeControls
                     */

                    Player.prototype.usingNativeControls = function usingNativeControls(bool) {
                        if (bool !== undefined) {
                            bool = !!bool; // force boolean
                            // Don't trigger a change event unless it actually changed
                            if (this.usingNativeControls_ !== bool) {
                                this.usingNativeControls_ = bool;
                                if (bool) {
                                    this.addClass('vjs-using-native-controls');

                                    /**
                                     * player is using the native device controls
                                     *
                                     * @event usingnativecontrols
                                     * @memberof Player
                                     * @instance
                                     * @private
                                     */
                                    this.trigger('usingnativecontrols');
                                } else {
                                    this.removeClass('vjs-using-native-controls');

                                    /**
                                     * player is using the custom HTML controls
                                     *
                                     * @event usingcustomcontrols
                                     * @memberof Player
                                     * @instance
                                     * @private
                                     */
                                    this.trigger('usingcustomcontrols');
                                }
                            }
                            return this;
                        }
                        return !!this.usingNativeControls_;
                    };

                    /**
                     * Set or get the current MediaError
                     *
                     * @param  {*} err A MediaError or a String/Number to be turned into a MediaError
                     * @return {MediaError|null}     when getting
                     * @return {Player}              when setting
                     * @method error
                     */

                    Player.prototype.error = function error(err) {
                        if (err === undefined) {
                            return this.error_ || null;
                        }

                        // restoring to default
                        if (err === null) {
                            this.error_ = err;
                            this.removeClass('vjs-error');
                            this.errorDisplay.close();
                            return this;
                        }

                        // error instance
                        if (err instanceof _mediaErrorJs2['default']) {
                            this.error_ = err;
                        } else {
                            this.error_ = new _mediaErrorJs2['default'](err);
                        }

                        // add the vjs-error classname to the player
                        this.addClass('vjs-error');

                        // log the name of the error type and any message
                        // ie8 just logs "[object object]" if you just log the error object
                        _utilsLogJs2['default'].error('(CODE:' + this.error_.code + ' ' + _mediaErrorJs2['default'].errorTypes[this.error_.code] + ')', this.error_.message, this.error_);

                        // fire an error event on the player
                        this.trigger('error');

                        return this;
                    };

                    /**
                     * Returns whether or not the player is in the "ended" state.
                     *
                     * @return {Boolean} True if the player is in the ended state, false if not.
                     * @method ended
                     */

                    Player.prototype.ended = function ended() {
                        return this.techGet_('ended');
                    };

                    /**
                     * Returns whether or not the player is in the "seeking" state.
                     *
                     * @return {Boolean} True if the player is in the seeking state, false if not.
                     * @method seeking
                     */

                    Player.prototype.seeking = function seeking() {
                        return this.techGet_('seeking');
                    };

                    /**
                     * Returns the TimeRanges of the media that are currently available
                     * for seeking to.
                     *
                     * @return {TimeRanges} the seekable intervals of the media timeline
                     * @method seekable
                     */

                    Player.prototype.seekable = function seekable() {
                        return this.techGet_('seekable');
                    };

                    /**
                     * Report user activity
                     *
                     * @param {Object} event Event object
                     * @method reportUserActivity
                     */

                    Player.prototype.reportUserActivity = function reportUserActivity(event) {
                        this.userActivity_ = true;
                    };

                    /**
                     * Get/set if user is active
                     *
                     * @param {Boolean} bool Value when setting
                     * @return {Boolean} Value if user is active user when getting
                     * @method userActive
                     */

                    Player.prototype.userActive = function userActive(bool) {
                        if (bool !== undefined) {
                            bool = !!bool;
                            if (bool !== this.userActive_) {
                                this.userActive_ = bool;
                                if (bool) {
                                    // If the user was inactive and is now active we want to reset the
                                    // inactivity timer
                                    this.userActivity_ = true;
                                    this.removeClass('vjs-user-inactive');
                                    this.addClass('vjs-user-active');
                                    this.trigger('useractive');
                                } else {
                                    // We're switching the state to inactive manually, so erase any other
                                    // activity
                                    this.userActivity_ = false;

                                    // Chrome/Safari/IE have bugs where when you change the cursor it can
                                    // trigger a mousemove event. This causes an issue when you're hiding
                                    // the cursor when the user is inactive, and a mousemove signals user
                                    // activity. Making it impossible to go into inactive mode. Specifically
                                    // this happens in fullscreen when we really need to hide the cursor.
                                    //
                                    // When this gets resolved in ALL browsers it can be removed
                                    // https://code.google.com/p/chromium/issues/detail?id=103041
                                    if (this.tech_) {
                                        this.tech_.one('mousemove', function (e) {
                                            e.stopPropagation();
                                            e.preventDefault();
                                        });
                                    }

                                    this.removeClass('vjs-user-active');
                                    this.addClass('vjs-user-inactive');
                                    this.trigger('userinactive');
                                }
                            }
                            return this;
                        }
                        return this.userActive_;
                    };

                    /**
                     * Listen for user activity based on timeout value
                     *
                     * @private
                     * @method listenForUserActivity_
                     */

                    Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {
                        var mouseInProgress = undefined,
                            lastMoveX = undefined,
                            lastMoveY = undefined;

                        var handleActivity = Fn.bind(this, this.reportUserActivity);

                        var handleMouseMove = function handleMouseMove(e) {
                            // #1068 - Prevent mousemove spamming
                            // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
                            if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
                                lastMoveX = e.screenX;
                                lastMoveY = e.screenY;
                                handleActivity();
                            }
                        };

                        var handleMouseDown = function handleMouseDown() {
                            handleActivity();
                            // For as long as the they are touching the device or have their mouse down,
                            // we consider them active even if they're not moving their finger or mouse.
                            // So we want to continue to update that they are active
                            this.clearInterval(mouseInProgress);
                            // Setting userActivity=true now and setting the interval to the same time
                            // as the activityCheck interval (250) should ensure we never miss the
                            // next activityCheck
                            mouseInProgress = this.setInterval(handleActivity, 250);
                        };

                        var handleMouseUp = function handleMouseUp(event) {
                            handleActivity();
                            // Stop the interval that maintains activity if the mouse/touch is down
                            this.clearInterval(mouseInProgress);
                        };

                        // Any mouse movement will be considered user activity
                        this.on('mousedown', handleMouseDown);
                        this.on('mousemove', handleMouseMove);
                        this.on('mouseup', handleMouseUp);

                        // Listen for keyboard navigation
                        // Shouldn't need to use inProgress interval because of key repeat
                        this.on('keydown', handleActivity);
                        this.on('keyup', handleActivity);

                        // Run an interval every 250 milliseconds instead of stuffing everything into
                        // the mousemove/touchmove function itself, to prevent performance degradation.
                        // `this.reportUserActivity` simply sets this.userActivity_ to true, which
                        // then gets picked up by this loop
                        // http://ejohn.org/blog/learning-from-twitter/
                        var inactivityTimeout = undefined;
                        var activityCheck = this.setInterval(function () {
                            // Check to see if mouse/touch activity has happened
                            if (this.userActivity_) {
                                // Reset the activity tracker
                                this.userActivity_ = false;

                                // If the user state was inactive, set the state to active
                                this.userActive(true);

                                // Clear any existing inactivity timeout to start the timer over
                                this.clearTimeout(inactivityTimeout);

                                var timeout = this.options_['inactivityTimeout'];
                                if (timeout > 0) {
                                    // In <timeout> milliseconds, if no more activity has occurred the
                                    // user will be considered inactive
                                    inactivityTimeout = this.setTimeout(function () {
                                        // Protect against the case where the inactivityTimeout can trigger just
                                        // before the next user activity is picked up by the activityCheck loop
                                        // causing a flicker
                                        if (!this.userActivity_) {
                                            this.userActive(false);
                                        }
                                    }, timeout);
                                }
                            }
                        }, 250);
                    };

                    /**
                     * Gets or sets the current playback rate.  A playback rate of
                     * 1.0 represents normal speed and 0.5 would indicate half-speed
                     * playback, for instance.
                     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
                     *
                     * @param  {Number} rate    New playback rate to set.
                     * @return {Number}         Returns the new playback rate when setting
                     * @return {Number}         Returns the current playback rate when getting
                     * @method playbackRate
                     */

                    Player.prototype.playbackRate = function playbackRate(rate) {
                        if (rate !== undefined) {
                            this.techCall_('setPlaybackRate', rate);
                            return this;
                        }

                        if (this.tech_ && this.tech_['featuresPlaybackRate']) {
                            return this.techGet_('playbackRate');
                        } else {
                            return 1.0;
                        }
                    };

                    /**
                     * Gets or sets the audio flag
                     *
                     * @param  {Boolean} bool    True signals that this is an audio player.
                     * @return {Boolean}         Returns true if player is audio, false if not when getting
                     * @return {Player}      Returns the player if setting
                     * @private
                     * @method isAudio
                     */

                    Player.prototype.isAudio = function isAudio(bool) {
                        if (bool !== undefined) {
                            this.isAudio_ = !!bool;
                            return this;
                        }

                        return !!this.isAudio_;
                    };

                    /**
                     * Returns the current state of network activity for the element, from
                     * the codes in the list below.
                     * - NETWORK_EMPTY (numeric value 0)
                     *   The element has not yet been initialised. All attributes are in
                     *   their initial states.
                     * - NETWORK_IDLE (numeric value 1)
                     *   The element's resource selection algorithm is active and has
                     *   selected a resource, but it is not actually using the network at
                     *   this time.
                     * - NETWORK_LOADING (numeric value 2)
                     *   The user agent is actively trying to download data.
                     * - NETWORK_NO_SOURCE (numeric value 3)
                     *   The element's resource selection algorithm is active, but it has
                     *   not yet found a resource to use.
                     *
                     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
                     * @return {Number} the current network activity state
                     * @method networkState
                     */

                    Player.prototype.networkState = function networkState() {
                        return this.techGet_('networkState');
                    };

                    /**
                     * Returns a value that expresses the current state of the element
                     * with respect to rendering the current playback position, from the
                     * codes in the list below.
                     * - HAVE_NOTHING (numeric value 0)
                     *   No information regarding the media resource is available.
                     * - HAVE_METADATA (numeric value 1)
                     *   Enough of the resource has been obtained that the duration of the
                     *   resource is available.
                     * - HAVE_CURRENT_DATA (numeric value 2)
                     *   Data for the immediate current playback position is available.
                     * - HAVE_FUTURE_DATA (numeric value 3)
                     *   Data for the immediate current playback position is available, as
                     *   well as enough data for the user agent to advance the current
                     *   playback position in the direction of playback.
                     * - HAVE_ENOUGH_DATA (numeric value 4)
                     *   The user agent estimates that enough data is available for
                     *   playback to proceed uninterrupted.
                     *
                     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
                     * @return {Number} the current playback rendering state
                     * @method readyState
                     */

                    Player.prototype.readyState = function readyState() {
                        return this.techGet_('readyState');
                    };

                    /**
                     * Text tracks are tracks of timed text events.
                     * Captions - text displayed over the video for the hearing impaired
                     * Subtitles - text displayed over the video for those who don't understand language in the video
                     * Chapters - text displayed in a menu allowing the user to jump to particular points (chapters) in the video
                     * Descriptions - audio descriptions that are read back to the user by a screen reading device
                     */

                    /**
                     * Get an array of associated text tracks. captions, subtitles, chapters, descriptions
                     * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
                     *
                     * @return {Array}           Array of track objects
                     * @method textTracks
                     */

                    Player.prototype.textTracks = function textTracks() {
                        // cannot use techGet_ directly because it checks to see whether the tech is ready.
                        // Flash is unlikely to be ready in time but textTracks should still work.
                        return this.tech_ && this.tech_['textTracks']();
                    };

                    /**
                     * Get an array of remote text tracks
                     *
                     * @return {Array}
                     * @method remoteTextTracks
                     */

                    Player.prototype.remoteTextTracks = function remoteTextTracks() {
                        return this.tech_ && this.tech_['remoteTextTracks']();
                    };

                    /**
                     * Get an array of remote html track elements
                     *
                     * @return {HTMLTrackElement[]}
                     * @method remoteTextTrackEls
                     */

                    Player.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
                        return this.tech_ && this.tech_['remoteTextTrackEls']();
                    };

                    /**
                     * Add a text track
                     * In addition to the W3C settings we allow adding additional info through options.
                     * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
                     *
                     * @param {String}  kind        Captions, subtitles, chapters, descriptions, or metadata
                     * @param {String=} label       Optional label
                     * @param {String=} language    Optional language
                     * @method addTextTrack
                     */

                    Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {
                        return this.tech_ && this.tech_['addTextTrack'](kind, label, language);
                    };

                    /**
                     * Add a remote text track
                     *
                     * @param {Object} options    Options for remote text track
                     * @method addRemoteTextTrack
                     */

                    Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options) {
                        return this.tech_ && this.tech_['addRemoteTextTrack'](options);
                    };

                    /**
                     * Remove a remote text track
                     *
                     * @param {Object} track    Remote text track to remove
                     * @method removeRemoteTextTrack
                     */
                        // destructure the input into an object with a track argument, defaulting to arguments[0]
                        // default the whole argument to an empty object if nothing was passed in

                    Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {
                        var _ref3 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        var _ref3$track = _ref3.track;
                        var track = _ref3$track === undefined ? arguments[0] : _ref3$track;
                        // jshint ignore:line
                        this.tech_ && this.tech_['removeRemoteTextTrack'](track);
                    };

                    /**
                     * Get video width
                     *
                     * @return {Number} Video width
                     * @method videoWidth
                     */

                    Player.prototype.videoWidth = function videoWidth() {
                        return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
                    };

                    /**
                     * Get video height
                     *
                     * @return {Number} Video height
                     * @method videoHeight
                     */

                    Player.prototype.videoHeight = function videoHeight() {
                        return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
                    };

                    // Methods to add support for
                    // initialTime: function(){ return this.techCall_('initialTime'); },
                    // startOffsetTime: function(){ return this.techCall_('startOffsetTime'); },
                    // played: function(){ return this.techCall_('played'); },
                    // videoTracks: function(){ return this.techCall_('videoTracks'); },
                    // audioTracks: function(){ return this.techCall_('audioTracks'); },
                    // defaultPlaybackRate: function(){ return this.techCall_('defaultPlaybackRate'); },
                    // defaultMuted: function(){ return this.techCall_('defaultMuted'); }

                    /**
                     * The player's language code
                     * NOTE: The language should be set in the player options if you want the
                     * the controls to be built with a specific language. Changing the lanugage
                     * later will not update controls text.
                     *
                     * @param {String} code  The locale string
                     * @return {String}      The locale string when getting
                     * @return {Player}      self when setting
                     * @method language
                     */

                    Player.prototype.language = function language(code) {
                        if (code === undefined) {
                            return this.language_;
                        }

                        this.language_ = ('' + code).toLowerCase();
                        return this;
                    };

                    /**
                     * Get the player's language dictionary
                     * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
                     * Languages specified directly in the player options have precedence
                     *
                     * @return {Array} Array of languages
                     * @method languages
                     */

                    Player.prototype.languages = function languages() {
                        return _utilsMergeOptionsJs2['default'](Player.prototype.options_.languages, this.languages_);
                    };

                    /**
                     * Converts track info to JSON
                     *
                     * @return {Object} JSON object of options
                     * @method toJSON
                     */

                    Player.prototype.toJSON = function toJSON() {
                        var options = _utilsMergeOptionsJs2['default'](this.options_);
                        var tracks = options.tracks;

                        options.tracks = [];

                        for (var i = 0; i < tracks.length; i++) {
                            var track = tracks[i];

                            // deep merge tracks and null out player so no circular references
                            track = _utilsMergeOptionsJs2['default'](track);
                            track.player = undefined;
                            options.tracks[i] = track;
                        }

                        return options;
                    };

                    /**
                     * Creates a simple modal dialog (an instance of the `ModalDialog`
                     * component) that immediately overlays the player with arbitrary
                     * content and removes itself when closed.
                     *
                     * @param {String|Function|Element|Array|Null} content
                     *        Same as `ModalDialog#content`'s param of the same name.
                     *
                     *        The most straight-forward usage is to provide a string or DOM
                     *        element.
                     *
                     * @param {Object} [options]
                     *        Extra options which will be passed on to the `ModalDialog`.
                     *
                     * @return {ModalDialog}
                     */

                    Player.prototype.createModal = function createModal(content, options) {
                        var player = this;

                        options = options || {};
                        options.content = content || '';

                        var modal = new _modalDialog2['default'](player, options);

                        player.addChild(modal);
                        modal.on('dispose', function () {
                            player.removeChild(modal);
                        });

                        return modal.open();
                    };

                    /**
                     * Gets tag settings
                     *
                     * @param {Element} tag The player tag
                     * @return {Array} An array of sources and track objects
                     * @static
                     * @method getTagSettings
                     */

                    Player.getTagSettings = function getTagSettings(tag) {
                        var baseOptions = {
                            'sources': [],
                            'tracks': []
                        };

                        var tagOptions = Dom.getElAttributes(tag);
                        var dataSetup = tagOptions['data-setup'];

                        // Check if data-setup attr exists.
                        if (dataSetup !== null) {
                            // Parse options JSON

                            var _safeParseTuple = _safeJsonParseTuple2['default'](dataSetup || '{}');

                            var err = _safeParseTuple[0];
                            var data = _safeParseTuple[1];

                            if (err) {
                                _utilsLogJs2['default'].error(err);
                            }
                            _objectAssign2['default'](tagOptions, data);
                        }

                        _objectAssign2['default'](baseOptions, tagOptions);

                        // Get tag children settings
                        if (tag.hasChildNodes()) {
                            var children = tag.childNodes;

                            for (var i = 0, j = children.length; i < j; i++) {
                                var child = children[i];
                                // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
                                var childName = child.nodeName.toLowerCase();
                                if (childName === 'source') {
                                    baseOptions.sources.push(Dom.getElAttributes(child));
                                } else if (childName === 'track') {
                                    baseOptions.tracks.push(Dom.getElAttributes(child));
                                }
                            }
                        }

                        return baseOptions;
                    };

                    return Player;
                })(_componentJs2['default']);

                Player.players = {};

                var navigator = _globalWindow2['default'].navigator;
                /*
                 * Player instance options, surfaced using options
                 * options = Player.prototype.options_
                 * Make changes in options, not here.
                 *
                 * @type {Object}
                 * @private
                 */
                Player.prototype.options_ = {
                    // Default order of fallback technology
                    techOrder: ['html5', 'flash'],
                    // techOrder: ['flash','html5'],

                    html5: {},
                    flash: {},

                    // defaultVolume: 0.85,
                    defaultVolume: 0.00, // The freakin seaguls are driving me crazy!

                    // default inactivity timeout
                    inactivityTimeout: 2000,

                    // default playback rates
                    playbackRates: [],
                    // Add playback rate selection by adding rates
                    // 'playbackRates': [0.5, 1, 1.5, 2],

                    // Included control sets
                    children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],

                    language: _globalDocument2['default'].getElementsByTagName('html')[0].getAttribute('lang') || navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language || 'en',

                    // locales and their language translations
                    languages: {},

                    // Default message to show when a video cannot be played.
                    notSupportedMessage: 'No compatible source was found for this media.'
                };

                /**
                 * Fired when the player has initial duration and dimension information
                 *
                 * @event loadedmetadata
                 */
                Player.prototype.handleLoadedMetaData_;

                /**
                 * Fired when the player has downloaded data at the current playback position
                 *
                 * @event loadeddata
                 */
                Player.prototype.handleLoadedData_;

                /**
                 * Fired when the user is active, e.g. moves the mouse over the player
                 *
                 * @event useractive
                 */
                Player.prototype.handleUserActive_;

                /**
                 * Fired when the user is inactive, e.g. a short delay after the last mouse move or control interaction
                 *
                 * @event userinactive
                 */
                Player.prototype.handleUserInactive_;

                /**
                 * Fired when the current playback position has changed *
                 * During playback this is fired every 15-250 milliseconds, depending on the
                 * playback technology in use.
                 *
                 * @event timeupdate
                 */
                Player.prototype.handleTimeUpdate_;

                /**
                 * Fired when video playback ends
                 *
                 * @event ended
                 */
                Player.prototype.handleTechEnded_;

                /**
                 * Fired when the volume changes
                 *
                 * @event volumechange
                 */
                Player.prototype.handleVolumeChange_;

                /**
                 * Fired when an error occurs
                 *
                 * @event error
                 */
                Player.prototype.handleError_;

                Player.prototype.flexNotSupported_ = function () {
                    var elem = _globalDocument2['default'].createElement('i');

                    // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more
                    // common flex features that we can rely on when checking for flex support.
                    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style || 'msFlexOrder' in elem.style) /* IE10-specific (2012 flex spec)  */;
                };

                _componentJs2['default'].registerComponent('Player', Player);
                exports['default'] = Player;
                module.exports = exports['default'];
// If empty string, make it a parsable json object.

            },{"./big-play-button.js":63,"./component.js":67,"./control-bar/control-bar.js":68,"./error-display.js":100,"./fullscreen-api.js":103,"./loading-spinner.js":104,"./media-error.js":105,"./modal-dialog":109,"./poster-image.js":114,"./tech/html5.js":119,"./tech/loader.js":120,"./tech/tech.js":121,"./tracks/text-track-display.js":125,"./tracks/text-track-list-converter.js":127,"./tracks/text-track-settings.js":129,"./utils/browser.js":131,"./utils/buffer.js":132,"./utils/dom.js":134,"./utils/events.js":135,"./utils/fn.js":136,"./utils/guid.js":138,"./utils/log.js":139,"./utils/merge-options.js":140,"./utils/stylesheet.js":141,"./utils/time-ranges.js":142,"./utils/to-title-case.js":143,"global/document":1,"global/window":2,"object.assign":45,"safe-json-parse/tuple":54}],111:[function(_dereq_,module,exports){
                /**
                 * @file plugins.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var _playerJs = _dereq_('./player.js');

                var _playerJs2 = _interopRequireDefault(_playerJs);

                /**
                 * The method for registering a video.js plugin
                 *
                 * @param  {String} name The name of the plugin
                 * @param  {Function} init The function that is run when the player inits
                 * @method plugin
                 */
                var plugin = function plugin(name, init) {
                    _playerJs2['default'].prototype[name] = init;
                };

                exports['default'] = plugin;
                module.exports = exports['default'];

            },{"./player.js":110}],112:[function(_dereq_,module,exports){
                /**
                 * @file popup-button.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _clickableComponentJs = _dereq_('../clickable-component.js');

                var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

                var _componentJs = _dereq_('../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _popupJs = _dereq_('./popup.js');

                var _popupJs2 = _interopRequireDefault(_popupJs);

                var _utilsDomJs = _dereq_('../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsFnJs = _dereq_('../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');

                var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

                /**
                 * A button class with a popup control
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends ClickableComponent
                 * @class PopupButton
                 */

                var PopupButton = (function (_ClickableComponent) {
                    _inherits(PopupButton, _ClickableComponent);

                    function PopupButton(player) {
                        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                        _classCallCheck(this, PopupButton);

                        _ClickableComponent.call(this, player, options);

                        this.update();
                    }

                    /**
                     * Update popup
                     *
                     * @method update
                     */

                    PopupButton.prototype.update = function update() {
                        var popup = this.createPopup();

                        if (this.popup) {
                            this.removeChild(this.popup);
                        }

                        this.popup = popup;
                        this.addChild(popup);

                        if (this.items && this.items.length === 0) {
                            this.hide();
                        } else if (this.items && this.items.length > 1) {
                            this.show();
                        }
                    };

                    /**
                     * Create popup - Override with specific functionality for component
                     *
                     * @return {Popup} The constructed popup
                     * @method createPopup
                     */

                    PopupButton.prototype.createPopup = function createPopup() {};

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    PopupButton.prototype.createEl = function createEl() {
                        return _ClickableComponent.prototype.createEl.call(this, 'div', {
                            className: this.buildCSSClass()
                        });
                    };

                    /**
                     * Allow sub components to stack CSS class names
                     *
                     * @return {String} The constructed class name
                     * @method buildCSSClass
                     */

                    PopupButton.prototype.buildCSSClass = function buildCSSClass() {
                        var menuButtonClass = 'vjs-menu-button';

                        // If the inline option is passed, we want to use different styles altogether.
                        if (this.options_.inline === true) {
                            menuButtonClass += '-inline';
                        } else {
                            menuButtonClass += '-popup';
                        }

                        return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);
                    };

                    return PopupButton;
                })(_clickableComponentJs2['default']);

                _componentJs2['default'].registerComponent('PopupButton', PopupButton);
                exports['default'] = PopupButton;
                module.exports = exports['default'];

            },{"../clickable-component.js":65,"../component.js":67,"../utils/dom.js":134,"../utils/fn.js":136,"../utils/to-title-case.js":143,"./popup.js":113}],113:[function(_dereq_,module,exports){
                /**
                 * @file popup.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsDomJs = _dereq_('../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsFnJs = _dereq_('../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsEventsJs = _dereq_('../utils/events.js');

                var Events = _interopRequireWildcard(_utilsEventsJs);

                /**
                 * The Popup component is used to build pop up controls.
                 *
                 * @extends Component
                 * @class Popup
                 */

                var Popup = (function (_Component) {
                    _inherits(Popup, _Component);

                    function Popup() {
                        _classCallCheck(this, Popup);

                        _Component.apply(this, arguments);
                    }

                    /**
                     * Add a popup item to the popup
                     *
                     * @param {Object|String} component Component or component type to add
                     * @method addItem
                     */

                    Popup.prototype.addItem = function addItem(component) {
                        this.addChild(component);
                        component.on('click', Fn.bind(this, function () {
                            this.unlockShowing();
                        }));
                    };

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    Popup.prototype.createEl = function createEl() {
                        var contentElType = this.options_.contentElType || 'ul';
                        this.contentEl_ = Dom.createEl(contentElType, {
                            className: 'vjs-menu-content'
                        });
                        var el = _Component.prototype.createEl.call(this, 'div', {
                            append: this.contentEl_,
                            className: 'vjs-menu'
                        });
                        el.appendChild(this.contentEl_);

                        // Prevent clicks from bubbling up. Needed for Popup Buttons,
                        // where a click on the parent is significant
                        Events.on(el, 'click', function (event) {
                            event.preventDefault();
                            event.stopImmediatePropagation();
                        });

                        return el;
                    };

                    return Popup;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('Popup', Popup);
                exports['default'] = Popup;
                module.exports = exports['default'];

            },{"../component.js":67,"../utils/dom.js":134,"../utils/events.js":135,"../utils/fn.js":136}],114:[function(_dereq_,module,exports){
                /**
                 * @file poster-image.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _clickableComponentJs = _dereq_('./clickable-component.js');

                var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);

                var _componentJs = _dereq_('./component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsFnJs = _dereq_('./utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsDomJs = _dereq_('./utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsBrowserJs = _dereq_('./utils/browser.js');

                var browser = _interopRequireWildcard(_utilsBrowserJs);

                /**
                 * The component that handles showing the poster image.
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Button
                 * @class PosterImage
                 */

                var PosterImage = (function (_ClickableComponent) {
                    _inherits(PosterImage, _ClickableComponent);

                    function PosterImage(player, options) {
                        _classCallCheck(this, PosterImage);

                        _ClickableComponent.call(this, player, options);

                        this.update();
                        player.on('posterchange', Fn.bind(this, this.update));
                    }

                    /**
                     * Clean up the poster image
                     *
                     * @method dispose
                     */

                    PosterImage.prototype.dispose = function dispose() {
                        this.player().off('posterchange', this.update);
                        _ClickableComponent.prototype.dispose.call(this);
                    };

                    /**
                     * Create the poster's image element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    PosterImage.prototype.createEl = function createEl() {
                        var el = Dom.createEl('div', {
                            className: 'vjs-poster',

                            // Don't want poster to be tabbable.
                            tabIndex: -1
                        });

                        // To ensure the poster image resizes while maintaining its original aspect
                        // ratio, use a div with `background-size` when available. For browsers that
                        // do not support `background-size` (e.g. IE8), fall back on using a regular
                        // img element.
                        if (!browser.BACKGROUND_SIZE_SUPPORTED) {
                            this.fallbackImg_ = Dom.createEl('img');
                            el.appendChild(this.fallbackImg_);
                        }

                        return el;
                    };

                    /**
                     * Event handler for updates to the player's poster source
                     *
                     * @method update
                     */

                    PosterImage.prototype.update = function update() {
                        var url = this.player().poster();

                        this.setSrc(url);

                        // If there's no poster source we should display:none on this component
                        // so it's not still clickable or right-clickable
                        if (url) {
                            this.show();
                        } else {
                            this.hide();
                        }
                    };

                    /**
                     * Set the poster source depending on the display method
                     *
                     * @param {String} url The URL to the poster source
                     * @method setSrc
                     */

                    PosterImage.prototype.setSrc = function setSrc(url) {
                        if (this.fallbackImg_) {
                            this.fallbackImg_.src = url;
                        } else {
                            var backgroundImage = '';
                            // Any falsey values should stay as an empty string, otherwise
                            // this will throw an extra error
                            if (url) {
                                backgroundImage = 'url("' + url + '")';
                            }

                            this.el_.style.backgroundImage = backgroundImage;
                        }
                    };

                    /**
                     * Event handler for clicks on the poster image
                     *
                     * @method handleClick
                     */

                    PosterImage.prototype.handleClick = function handleClick() {
                        // We don't want a click to trigger playback when controls are disabled
                        // but CSS should be hiding the poster to prevent that from happening
                        if (this.player_.paused()) {
                            this.player_.play();
                        } else {
                            this.player_.pause();
                        }
                    };

                    return PosterImage;
                })(_clickableComponentJs2['default']);

                _componentJs2['default'].registerComponent('PosterImage', PosterImage);
                exports['default'] = PosterImage;
                module.exports = exports['default'];

            },{"./clickable-component.js":65,"./component.js":67,"./utils/browser.js":131,"./utils/dom.js":134,"./utils/fn.js":136}],115:[function(_dereq_,module,exports){
                /**
                 * @file setup.js
                 *
                 * Functions for automatically setting up a player
                 * based on the data-setup attribute of the video tag
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                var _utilsEventsJs = _dereq_('./utils/events.js');

                var Events = _interopRequireWildcard(_utilsEventsJs);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _windowLoaded = false;
                var videojs = undefined;

// Automatically set up any tags that have a data-setup attribute
                var autoSetup = function autoSetup() {
                    // One day, when we stop supporting IE8, go back to this, but in the meantime...*hack hack hack*
                    // var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));
                    // var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));
                    // var mediaEls = vids.concat(audios);

                    // Because IE8 doesn't support calling slice on a node list, we need to loop through each list of elements
                    // to build up a new, combined list of elements.
                    var vids = _globalDocument2['default'].getElementsByTagName('video');
                    var audios = _globalDocument2['default'].getElementsByTagName('audio');
                    var mediaEls = [];
                    if (vids && vids.length > 0) {
                        for (var i = 0, e = vids.length; i < e; i++) {
                            mediaEls.push(vids[i]);
                        }
                    }
                    if (audios && audios.length > 0) {
                        for (var i = 0, e = audios.length; i < e; i++) {
                            mediaEls.push(audios[i]);
                        }
                    }

                    // Check if any media elements exist
                    if (mediaEls && mediaEls.length > 0) {

                        for (var i = 0, e = mediaEls.length; i < e; i++) {
                            var mediaEl = mediaEls[i];

                            // Check if element exists, has getAttribute func.
                            // IE seems to consider typeof el.getAttribute == 'object' instead of 'function' like expected, at least when loading the player immediately.
                            if (mediaEl && mediaEl.getAttribute) {

                                // Make sure this player hasn't already been set up.
                                if (mediaEl['player'] === undefined) {
                                    var options = mediaEl.getAttribute('data-setup');

                                    // Check if data-setup attr exists.
                                    // We only auto-setup if they've added the data-setup attr.
                                    if (options !== null) {
                                        // Create new video.js instance.
                                        var player = videojs(mediaEl);
                                    }
                                }

                                // If getAttribute isn't defined, we need to wait for the DOM.
                            } else {
                                autoSetupTimeout(1);
                                break;
                            }
                        }

                        // No videos were found, so keep looping unless page is finished loading.
                    } else if (!_windowLoaded) {
                        autoSetupTimeout(1);
                    }
                };

// Pause to let the DOM keep processing
                var autoSetupTimeout = function autoSetupTimeout(wait, vjs) {
                    if (vjs) {
                        videojs = vjs;
                    }

                    setTimeout(autoSetup, wait);
                };

                if (_globalDocument2['default'].readyState === 'complete') {
                    _windowLoaded = true;
                } else {
                    Events.one(_globalWindow2['default'], 'load', function () {
                        _windowLoaded = true;
                    });
                }

                var hasLoaded = function hasLoaded() {
                    return _windowLoaded;
                };

                exports.autoSetup = autoSetup;
                exports.autoSetupTimeout = autoSetupTimeout;
                exports.hasLoaded = hasLoaded;

            },{"./utils/events.js":135,"global/document":1,"global/window":2}],116:[function(_dereq_,module,exports){
                /**
                 * @file slider.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _utilsDomJs = _dereq_('../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _objectAssign = _dereq_('object.assign');

                var _objectAssign2 = _interopRequireDefault(_objectAssign);

                /**
                 * The base functionality for sliders like the volume bar and seek bar
                 *
                 * @param {Player|Object} player
                 * @param {Object=} options
                 * @extends Component
                 * @class Slider
                 */

                var Slider = (function (_Component) {
                    _inherits(Slider, _Component);

                    function Slider(player, options) {
                        _classCallCheck(this, Slider);

                        _Component.call(this, player, options);

                        // Set property names to bar to match with the child Slider class is looking for
                        this.bar = this.getChild(this.options_.barName);

                        // Set a horizontal or vertical class on the slider depending on the slider type
                        this.vertical(!!this.options_.vertical);

                        this.on('mousedown', this.handleMouseDown);
                        this.on('touchstart', this.handleMouseDown);
                        this.on('focus', this.handleFocus);
                        this.on('blur', this.handleBlur);
                        this.on('click', this.handleClick);

                        this.on(player, 'controlsvisible', this.update);
                        this.on(player, this.playerEvent, this.update);
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @param {String} type Type of element to create
                     * @param {Object=} props List of properties in Object form
                     * @return {Element}
                     * @method createEl
                     */

                    Slider.prototype.createEl = function createEl(type) {
                        var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                        var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                        // Add the slider element class to all sub classes
                        props.className = props.className + ' vjs-slider';
                        props = _objectAssign2['default']({
                            tabIndex: 0
                        }, props);

                        attributes = _objectAssign2['default']({
                            'role': 'slider',
                            'aria-valuenow': 0,
                            'aria-valuemin': 0,
                            'aria-valuemax': 100,
                            tabIndex: 0
                        }, attributes);

                        return _Component.prototype.createEl.call(this, type, props, attributes);
                    };

                    /**
                     * Handle mouse down on slider
                     *
                     * @param {Object} event Mouse down event object
                     * @method handleMouseDown
                     */

                    Slider.prototype.handleMouseDown = function handleMouseDown(event) {
                        var doc = this.bar.el_.ownerDocument;

                        event.preventDefault();
                        Dom.blockTextSelection();

                        this.addClass('vjs-sliding');
                        this.trigger('slideractive');

                        this.on(doc, 'mousemove', this.handleMouseMove);
                        this.on(doc, 'mouseup', this.handleMouseUp);
                        this.on(doc, 'touchmove', this.handleMouseMove);
                        this.on(doc, 'touchend', this.handleMouseUp);

                        this.handleMouseMove(event);
                    };

                    /**
                     * To be overridden by a subclass
                     *
                     * @method handleMouseMove
                     */

                    Slider.prototype.handleMouseMove = function handleMouseMove() {};

                    /**
                     * Handle mouse up on Slider
                     *
                     * @method handleMouseUp
                     */

                    Slider.prototype.handleMouseUp = function handleMouseUp() {
                        var doc = this.bar.el_.ownerDocument;

                        Dom.unblockTextSelection();

                        this.removeClass('vjs-sliding');
                        this.trigger('sliderinactive');

                        this.off(doc, 'mousemove', this.handleMouseMove);
                        this.off(doc, 'mouseup', this.handleMouseUp);
                        this.off(doc, 'touchmove', this.handleMouseMove);
                        this.off(doc, 'touchend', this.handleMouseUp);

                        this.update();
                    };

                    /**
                     * Update slider
                     *
                     * @method update
                     */

                    Slider.prototype.update = function update() {
                        // In VolumeBar init we have a setTimeout for update that pops and update to the end of the
                        // execution stack. The player is destroyed before then update will cause an error
                        if (!this.el_) return;

                        // If scrubbing, we could use a cached value to make the handle keep up with the user's mouse.
                        // On HTML5 browsers scrubbing is really smooth, but some flash players are slow, so we might want to utilize this later.
                        // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();
                        var progress = this.getPercent();
                        var bar = this.bar;

                        // If there's no bar...
                        if (!bar) return;

                        // Protect against no duration and other division issues
                        if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {
                            progress = 0;
                        }

                        // Convert to a percentage for setting
                        var percentage = (progress * 100).toFixed(2) + '%';

                        // Set the new bar width or height
                        if (this.vertical()) {
                            bar.el().style.height = percentage;
                        } else {
                            bar.el().style.width = percentage;
                        }
                    };

                    /**
                     * Calculate distance for slider
                     *
                     * @param {Object} event Event object
                     * @method calculateDistance
                     */

                    Slider.prototype.calculateDistance = function calculateDistance(event) {
                        var position = Dom.getPointerPosition(this.el_, event);
                        if (this.vertical()) {
                            return position.y;
                        }
                        return position.x;
                    };

                    /**
                     * Handle on focus for slider
                     *
                     * @method handleFocus
                     */

                    Slider.prototype.handleFocus = function handleFocus() {
                        this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
                    };

                    /**
                     * Handle key press for slider
                     *
                     * @param {Object} event Event object
                     * @method handleKeyPress
                     */

                    Slider.prototype.handleKeyPress = function handleKeyPress(event) {
                        if (event.which === 37 || event.which === 40) {
                            // Left and Down Arrows
                            event.preventDefault();
                            this.stepBack();
                        } else if (event.which === 38 || event.which === 39) {
                            // Up and Right Arrows
                            event.preventDefault();
                            this.stepForward();
                        }
                    };

                    /**
                     * Handle on blur for slider
                     *
                     * @method handleBlur
                     */

                    Slider.prototype.handleBlur = function handleBlur() {
                        this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
                    };

                    /**
                     * Listener for click events on slider, used to prevent clicks
                     *   from bubbling up to parent elements like button menus.
                     *
                     * @param {Object} event Event object
                     * @method handleClick
                     */

                    Slider.prototype.handleClick = function handleClick(event) {
                        event.stopImmediatePropagation();
                        event.preventDefault();
                    };

                    /**
                     * Get/set if slider is horizontal for vertical
                     *
                     * @param {Boolean} bool True if slider is vertical, false is horizontal
                     * @return {Boolean} True if slider is vertical, false is horizontal
                     * @method vertical
                     */

                    Slider.prototype.vertical = function vertical(bool) {
                        if (bool === undefined) {
                            return this.vertical_ || false;
                        }

                        this.vertical_ = !!bool;

                        if (this.vertical_) {
                            this.addClass('vjs-slider-vertical');
                        } else {
                            this.addClass('vjs-slider-horizontal');
                        }

                        return this;
                    };

                    return Slider;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('Slider', Slider);
                exports['default'] = Slider;
                module.exports = exports['default'];

            },{"../component.js":67,"../utils/dom.js":134,"object.assign":45}],117:[function(_dereq_,module,exports){
                /**
                 * @file flash-rtmp.js
                 */
                'use strict';

                exports.__esModule = true;
                function FlashRtmpDecorator(Flash) {
                    Flash.streamingFormats = {
                        'rtmp/mp4': 'MP4',
                        'rtmp/flv': 'FLV'
                    };

                    Flash.streamFromParts = function (connection, stream) {
                        return connection + '&' + stream;
                    };

                    Flash.streamToParts = function (src) {
                        var parts = {
                            connection: '',
                            stream: ''
                        };

                        if (!src) return parts;

                        // Look for the normal URL separator we expect, '&'.
                        // If found, we split the URL into two pieces around the
                        // first '&'.
                        var connEnd = src.search(/&(?!\w+=)/);
                        var streamBegin = undefined;
                        if (connEnd !== -1) {
                            streamBegin = connEnd + 1;
                        } else {
                            // If there's not a '&', we use the last '/' as the delimiter.
                            connEnd = streamBegin = src.lastIndexOf('/') + 1;
                            if (connEnd === 0) {
                                // really, there's not a '/'?
                                connEnd = streamBegin = src.length;
                            }
                        }
                        parts.connection = src.substring(0, connEnd);
                        parts.stream = src.substring(streamBegin, src.length);

                        return parts;
                    };

                    Flash.isStreamingType = function (srcType) {
                        return srcType in Flash.streamingFormats;
                    };

                    // RTMP has four variations, any string starting
                    // with one of these protocols should be valid
                    Flash.RTMP_RE = /^rtmp[set]?:\/\//i;

                    Flash.isStreamingSrc = function (src) {
                        return Flash.RTMP_RE.test(src);
                    };

                    /**
                     * A source handler for RTMP urls
                     * @type {Object}
                     */
                    Flash.rtmpSourceHandler = {};

                    /**
                     * Check if Flash can play the given videotype
                     * @param  {String} type    The mimetype to check
                     * @return {String}         'probably', 'maybe', or '' (empty string)
                     */
                    Flash.rtmpSourceHandler.canPlayType = function (type) {
                        if (Flash.isStreamingType(type)) {
                            return 'maybe';
                        }

                        return '';
                    };

                    /**
                     * Check if Flash can handle the source natively
                     * @param  {Object} source  The source object
                     * @return {String}         'probably', 'maybe', or '' (empty string)
                     */
                    Flash.rtmpSourceHandler.canHandleSource = function (source) {
                        var can = Flash.rtmpSourceHandler.canPlayType(source.type);

                        if (can) {
                            return can;
                        }

                        if (Flash.isStreamingSrc(source.src)) {
                            return 'maybe';
                        }

                        return '';
                    };

                    /**
                     * Pass the source to the flash object
                     * Adaptive source handlers will have more complicated workflows before passing
                     * video data to the video element
                     * @param  {Object} source    The source object
                     * @param  {Flash} tech   The instance of the Flash tech
                     */
                    Flash.rtmpSourceHandler.handleSource = function (source, tech) {
                        var srcParts = Flash.streamToParts(source.src);

                        tech['setRtmpConnection'](srcParts.connection);
                        tech['setRtmpStream'](srcParts.stream);
                    };

                    // Register the native source handler
                    Flash.registerSourceHandler(Flash.rtmpSourceHandler);

                    return Flash;
                }

                exports['default'] = FlashRtmpDecorator;
                module.exports = exports['default'];

            },{}],118:[function(_dereq_,module,exports){
                /**
                 * @file flash.js
                 * VideoJS-SWF - Custom Flash Player with HTML5-ish API
                 * https://github.com/zencoder/video-js-swf
                 * Not using setupTriggers. Using global onEvent func to distribute events
                 */

                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _tech = _dereq_('./tech');

                var _tech2 = _interopRequireDefault(_tech);

                var _utilsDomJs = _dereq_('../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsUrlJs = _dereq_('../utils/url.js');

                var Url = _interopRequireWildcard(_utilsUrlJs);

                var _utilsTimeRangesJs = _dereq_('../utils/time-ranges.js');

                var _flashRtmp = _dereq_('./flash-rtmp');

                var _flashRtmp2 = _interopRequireDefault(_flashRtmp);

                var _component = _dereq_('../component');

                var _component2 = _interopRequireDefault(_component);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _objectAssign = _dereq_('object.assign');

                var _objectAssign2 = _interopRequireDefault(_objectAssign);

                var navigator = _globalWindow2['default'].navigator;
                /**
                 * Flash Media Controller - Wrapper for fallback SWF API
                 *
                 * @param {Object=} options Object of option names and values
                 * @param {Function=} ready Ready callback function
                 * @extends Tech
                 * @class Flash
                 */

                var Flash = (function (_Tech) {
                    _inherits(Flash, _Tech);

                    function Flash(options, ready) {
                        _classCallCheck(this, Flash);

                        _Tech.call(this, options, ready);

                        // Set the source when ready
                        if (options.source) {
                            this.ready(function () {
                                this.setSource(options.source);
                            }, true);
                        }

                        // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers
                        // This allows resetting the playhead when we catch the reload
                        if (options.startTime) {
                            this.ready(function () {
                                this.load();
                                this.play();
                                this.currentTime(options.startTime);
                            }, true);
                        }

                        // Add global window functions that the swf expects
                        // A 4.x workflow we weren't able to solve for in 5.0
                        // because of the need to hard code these functions
                        // into the swf for security reasons
                        _globalWindow2['default'].videojs = _globalWindow2['default'].videojs || {};
                        _globalWindow2['default'].videojs.Flash = _globalWindow2['default'].videojs.Flash || {};
                        _globalWindow2['default'].videojs.Flash.onReady = Flash.onReady;
                        _globalWindow2['default'].videojs.Flash.onEvent = Flash.onEvent;
                        _globalWindow2['default'].videojs.Flash.onError = Flash.onError;

                        this.on('seeked', function () {
                            this.lastSeekTarget_ = undefined;
                        });
                    }

                    // Create setters and getters for attributes

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    Flash.prototype.createEl = function createEl() {
                        var options = this.options_;

                        // If video.js is hosted locally you should also set the location
                        // for the hosted swf, which should be relative to the page (not video.js)
                        // Otherwise this adds a CDN url.
                        // The CDN also auto-adds a swf URL for that specific version.
                        if (!options.swf) {
                            options.swf = '//vjs.zencdn.net/swf/5.0.1/video-js.swf';
                        }

                        // Generate ID for swf object
                        var objId = options.techId;

                        // Merge default flashvars with ones passed in to init
                        var flashVars = _objectAssign2['default']({

                            // SWF Callback Functions
                            'readyFunction': 'videojs.Flash.onReady',
                            'eventProxyFunction': 'videojs.Flash.onEvent',
                            'errorEventProxyFunction': 'videojs.Flash.onError',

                            // Player Settings
                            'autoplay': options.autoplay,
                            'preload': options.preload,
                            'loop': options.loop,
                            'muted': options.muted

                        }, options.flashVars);

                        // Merge default parames with ones passed in
                        var params = _objectAssign2['default']({
                            'wmode': 'opaque', // Opaque is needed to overlay controls, but can affect playback performance
                            'bgcolor': '#000000' // Using bgcolor prevents a white flash when the object is loading
                        }, options.params);

                        // Merge default attributes with ones passed in
                        var attributes = _objectAssign2['default']({
                            'id': objId,
                            'name': objId, // Both ID and Name needed or swf to identify itself
                            'class': 'vjs-tech'
                        }, options.attributes);

                        this.el_ = Flash.embed(options.swf, flashVars, params, attributes);
                        this.el_.tech = this;

                        return this.el_;
                    };

                    /**
                     * Play for flash tech
                     *
                     * @method play
                     */

                    Flash.prototype.play = function play() {
                        if (this.ended()) {
                            this.setCurrentTime(0);
                        }
                        this.el_.vjs_play();
                    };

                    /**
                     * Pause for flash tech
                     *
                     * @method pause
                     */

                    Flash.prototype.pause = function pause() {
                        this.el_.vjs_pause();
                    };

                    /**
                     * Get/set video
                     *
                     * @param {Object=} src Source object
                     * @return {Object}
                     * @method src
                     */

                    Flash.prototype.src = function src(_src) {
                        if (_src === undefined) {
                            return this.currentSrc();
                        }

                        // Setting src through `src` not `setSrc` will be deprecated
                        return this.setSrc(_src);
                    };

                    /**
                     * Set video
                     *
                     * @param {Object=} src Source object
                     * @deprecated
                     * @method setSrc
                     */

                    Flash.prototype.setSrc = function setSrc(src) {
                        // Make sure source URL is absolute.
                        src = Url.getAbsoluteURL(src);
                        this.el_.vjs_src(src);

                        // Currently the SWF doesn't autoplay if you load a source later.
                        // e.g. Load player w/ no source, wait 2s, set src.
                        if (this.autoplay()) {
                            var tech = this;
                            this.setTimeout(function () {
                                tech.play();
                            }, 0);
                        }
                    };

                    /**
                     * Returns true if the tech is currently seeking.
                     * @return {boolean} true if seeking
                     */

                    Flash.prototype.seeking = function seeking() {
                        return this.lastSeekTarget_ !== undefined;
                    };

                    /**
                     * Set current time
                     *
                     * @param {Number} time Current time of video
                     * @method setCurrentTime
                     */

                    Flash.prototype.setCurrentTime = function setCurrentTime(time) {
                        var seekable = this.seekable();
                        if (seekable.length) {
                            // clamp to the current seekable range
                            time = time > seekable.start(0) ? time : seekable.start(0);
                            time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);

                            this.lastSeekTarget_ = time;
                            this.trigger('seeking');
                            this.el_.vjs_setProperty('currentTime', time);
                            _Tech.prototype.setCurrentTime.call(this);
                        }
                    };

                    /**
                     * Get current time
                     *
                     * @param {Number=} time Current time of video
                     * @return {Number} Current time
                     * @method currentTime
                     */

                    Flash.prototype.currentTime = function currentTime(time) {
                        // when seeking make the reported time keep up with the requested time
                        // by reading the time we're seeking to
                        if (this.seeking()) {
                            return this.lastSeekTarget_ || 0;
                        }
                        return this.el_.vjs_getProperty('currentTime');
                    };

                    /**
                     * Get current source
                     *
                     * @method currentSrc
                     */

                    Flash.prototype.currentSrc = function currentSrc() {
                        if (this.currentSource_) {
                            return this.currentSource_.src;
                        } else {
                            return this.el_.vjs_getProperty('currentSrc');
                        }
                    };

                    /**
                     * Load media into player
                     *
                     * @method load
                     */

                    Flash.prototype.load = function load() {
                        this.el_.vjs_load();
                    };

                    /**
                     * Get poster
                     *
                     * @method poster
                     */

                    Flash.prototype.poster = function poster() {
                        this.el_.vjs_getProperty('poster');
                    };

                    /**
                     * Poster images are not handled by the Flash tech so make this a no-op
                     *
                     * @method setPoster
                     */

                    Flash.prototype.setPoster = function setPoster() {};

                    /**
                     * Determine if can seek in media
                     *
                     * @return {TimeRangeObject}
                     * @method seekable
                     */

                    Flash.prototype.seekable = function seekable() {
                        var duration = this.duration();
                        if (duration === 0) {
                            return _utilsTimeRangesJs.createTimeRange();
                        }
                        return _utilsTimeRangesJs.createTimeRange(0, duration);
                    };

                    /**
                     * Get buffered time range
                     *
                     * @return {TimeRangeObject}
                     * @method buffered
                     */

                    Flash.prototype.buffered = function buffered() {
                        var ranges = this.el_.vjs_getProperty('buffered');
                        if (ranges.length === 0) {
                            return _utilsTimeRangesJs.createTimeRange();
                        }
                        return _utilsTimeRangesJs.createTimeRange(ranges[0][0], ranges[0][1]);
                    };

                    /**
                     * Get fullscreen support -
                     * Flash does not allow fullscreen through javascript
                     * so always returns false
                     *
                     * @return {Boolean} false
                     * @method supportsFullScreen
                     */

                    Flash.prototype.supportsFullScreen = function supportsFullScreen() {
                        return false; // Flash does not allow fullscreen through javascript
                    };

                    /**
                     * Request to enter fullscreen
                     * Flash does not allow fullscreen through javascript
                     * so always returns false
                     *
                     * @return {Boolean} false
                     * @method enterFullScreen
                     */

                    Flash.prototype.enterFullScreen = function enterFullScreen() {
                        return false;
                    };

                    return Flash;
                })(_tech2['default']);

                var _api = Flash.prototype;
                var _readWrite = 'rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(',');
                var _readOnly = 'networkState,readyState,initialTime,duration,startOffsetTime,paused,ended,videoTracks,audioTracks,videoWidth,videoHeight'.split(',');

                function _createSetter(attr) {
                    var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);
                    _api['set' + attrUpper] = function (val) {
                        return this.el_.vjs_setProperty(attr, val);
                    };
                }
                function _createGetter(attr) {
                    _api[attr] = function () {
                        return this.el_.vjs_getProperty(attr);
                    };
                }

// Create getter and setters for all read/write attributes
                for (var i = 0; i < _readWrite.length; i++) {
                    _createGetter(_readWrite[i]);
                    _createSetter(_readWrite[i]);
                }

// Create getters for read-only attributes
                for (var i = 0; i < _readOnly.length; i++) {
                    _createGetter(_readOnly[i]);
                }

                /* Flash Support Testing -------------------------------------------------------- */

                Flash.isSupported = function () {
                    return Flash.version()[0] >= 10;
                    // return swfobject.hasFlashPlayerVersion('10');
                };

// Add Source Handler pattern functions to this tech
                _tech2['default'].withSourceHandlers(Flash);

                /*
                 * The default native source handler.
                 * This simply passes the source to the video element. Nothing fancy.
                 *
                 * @param  {Object} source   The source object
                 * @param  {Flash} tech  The instance of the Flash tech
                 */
                Flash.nativeSourceHandler = {};

                /**
                 * Check if Flash can play the given videotype
                 * @param  {String} type    The mimetype to check
                 * @return {String}         'probably', 'maybe', or '' (empty string)
                 */
                Flash.nativeSourceHandler.canPlayType = function (type) {
                    if (type in Flash.formats) {
                        return 'maybe';
                    }

                    return '';
                };

                /*
                 * Check Flash can handle the source natively
                 *
                 * @param  {Object} source  The source object
                 * @return {String}         'probably', 'maybe', or '' (empty string)
                 */
                Flash.nativeSourceHandler.canHandleSource = function (source) {
                    var type;

                    function guessMimeType(src) {
                        var ext = Url.getFileExtension(src);
                        if (ext) {
                            return 'video/' + ext;
                        }
                        return '';
                    }

                    if (!source.type) {
                        type = guessMimeType(source.src);
                    } else {
                        // Strip code information from the type because we don't get that specific
                        type = source.type.replace(/;.*/, '').toLowerCase();
                    }

                    return Flash.nativeSourceHandler.canPlayType(type);
                };

                /*
                 * Pass the source to the flash object
                 * Adaptive source handlers will have more complicated workflows before passing
                 * video data to the video element
                 *
                 * @param  {Object} source    The source object
                 * @param  {Flash} tech   The instance of the Flash tech
                 */
                Flash.nativeSourceHandler.handleSource = function (source, tech) {
                    tech.setSrc(source.src);
                };

                /*
                 * Clean up the source handler when disposing the player or switching sources..
                 * (no cleanup is needed when supporting the format natively)
                 */
                Flash.nativeSourceHandler.dispose = function () {};

// Register the native source handler
                Flash.registerSourceHandler(Flash.nativeSourceHandler);

                Flash.formats = {
                    'video/flv': 'FLV',
                    'video/x-flv': 'FLV',
                    'video/mp4': 'MP4',
                    'video/m4v': 'MP4'
                };

                Flash.onReady = function (currSwf) {
                    var el = Dom.getEl(currSwf);
                    var tech = el && el.tech;

                    // if there is no el then the tech has been disposed
                    // and the tech element was removed from the player div
                    if (tech && tech.el()) {
                        // check that the flash object is really ready
                        Flash.checkReady(tech);
                    }
                };

// The SWF isn't always ready when it says it is. Sometimes the API functions still need to be added to the object.
// If it's not ready, we set a timeout to check again shortly.
                Flash.checkReady = function (tech) {
                    // stop worrying if the tech has been disposed
                    if (!tech.el()) {
                        return;
                    }

                    // check if API property exists
                    if (tech.el().vjs_getProperty) {
                        // tell tech it's ready
                        tech.triggerReady();
                    } else {
                        // wait longer
                        this.setTimeout(function () {
                            Flash['checkReady'](tech);
                        }, 50);
                    }
                };

// Trigger events from the swf on the player
                Flash.onEvent = function (swfID, eventName) {
                    var tech = Dom.getEl(swfID).tech;
                    tech.trigger(eventName);
                };

// Log errors from the swf
                Flash.onError = function (swfID, err) {
                    var tech = Dom.getEl(swfID).tech;

                    // trigger MEDIA_ERR_SRC_NOT_SUPPORTED
                    if (err === 'srcnotfound') {
                        return tech.error(4);
                    }

                    // trigger a custom error
                    tech.error('FLASH: ' + err);
                };

// Flash Version Check
                Flash.version = function () {
                    var version = '0,0,0';

                    // IE
                    try {
                        version = new _globalWindow2['default'].ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];

                        // other browsers
                    } catch (e) {
                        try {
                            if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
                                version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
                            }
                        } catch (err) {}
                    }
                    return version.split(',');
                };

// Flash embedding method. Only used in non-iframe mode
                Flash.embed = function (swf, flashVars, params, attributes) {
                    var code = Flash.getEmbedCode(swf, flashVars, params, attributes);

                    // Get element by embedding code and retrieving created element
                    var obj = Dom.createEl('div', { innerHTML: code }).childNodes[0];

                    return obj;
                };

                Flash.getEmbedCode = function (swf, flashVars, params, attributes) {
                    var objTag = '<object type="application/x-shockwave-flash" ';
                    var flashVarsString = '';
                    var paramsString = '';
                    var attrsString = '';

                    // Convert flash vars to string
                    if (flashVars) {
                        Object.getOwnPropertyNames(flashVars).forEach(function (key) {
                            flashVarsString += key + '=' + flashVars[key] + '&amp;';
                        });
                    }

                    // Add swf, flashVars, and other default params
                    params = _objectAssign2['default']({
                        'movie': swf,
                        'flashvars': flashVarsString,
                        'allowScriptAccess': 'always', // Required to talk to swf
                        'allowNetworking': 'all' // All should be default, but having security issues.
                    }, params);

                    // Create param tags string
                    Object.getOwnPropertyNames(params).forEach(function (key) {
                        paramsString += '<param name="' + key + '" value="' + params[key] + '" />';
                    });

                    attributes = _objectAssign2['default']({
                        // Add swf to attributes (need both for IE and Others to work)
                        'data': swf,

                        // Default to 100% width/height
                        'width': '100%',
                        'height': '100%'

                    }, attributes);

                    // Create Attributes string
                    Object.getOwnPropertyNames(attributes).forEach(function (key) {
                        attrsString += key + '="' + attributes[key] + '" ';
                    });

                    return '' + objTag + attrsString + '>' + paramsString + '</object>';
                };

// Run Flash through the RTMP decorator
                _flashRtmp2['default'](Flash);

                _component2['default'].registerComponent('Flash', Flash);
                _tech2['default'].registerTech('Flash', Flash);
                exports['default'] = Flash;
                module.exports = exports['default'];

            },{"../component":67,"../utils/dom.js":134,"../utils/time-ranges.js":142,"../utils/url.js":144,"./flash-rtmp":117,"./tech":121,"global/window":2,"object.assign":45}],119:[function(_dereq_,module,exports){
                /**
                 * @file html5.js
                 * HTML5 Media Controller - Wrapper for HTML5 Media API
                 */

                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _techJs = _dereq_('./tech.js');

                var _techJs2 = _interopRequireDefault(_techJs);

                var _component = _dereq_('../component');

                var _component2 = _interopRequireDefault(_component);

                var _utilsDomJs = _dereq_('../utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsUrlJs = _dereq_('../utils/url.js');

                var Url = _interopRequireWildcard(_utilsUrlJs);

                var _utilsFnJs = _dereq_('../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsLogJs = _dereq_('../utils/log.js');

                var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

                var _utilsBrowserJs = _dereq_('../utils/browser.js');

                var browser = _interopRequireWildcard(_utilsBrowserJs);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _objectAssign = _dereq_('object.assign');

                var _objectAssign2 = _interopRequireDefault(_objectAssign);

                var _utilsMergeOptionsJs = _dereq_('../utils/merge-options.js');

                var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);

                /**
                 * HTML5 Media Controller - Wrapper for HTML5 Media API
                 *
                 * @param {Object=} options Object of option names and values
                 * @param {Function=} ready Ready callback function
                 * @extends Tech
                 * @class Html5
                 */

                var Html5 = (function (_Tech) {
                    _inherits(Html5, _Tech);

                    function Html5(options, ready) {
                        _classCallCheck(this, Html5);

                        _Tech.call(this, options, ready);

                        var source = options.source;

                        // Set the source if one is provided
                        // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
                        // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
                        // anyway so the error gets fired.
                        if (source && (this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
                            this.setSource(source);
                        } else {
                            this.handleLateInit_(this.el_);
                        }

                        if (this.el_.hasChildNodes()) {

                            var nodes = this.el_.childNodes;
                            var nodesLength = nodes.length;
                            var removeNodes = [];

                            while (nodesLength--) {
                                var node = nodes[nodesLength];
                                var nodeName = node.nodeName.toLowerCase();

                                if (nodeName === 'track') {
                                    if (!this.featuresNativeTextTracks) {
                                        // Empty video tag tracks so the built-in player doesn't use them also.
                                        // This may not be fast enough to stop HTML5 browsers from reading the tags
                                        // so we'll need to turn off any default tracks if we're manually doing
                                        // captions and subtitles. videoElement.textTracks
                                        removeNodes.push(node);
                                    } else {
                                        // store HTMLTrackElement and TextTrack to remote list
                                        this.remoteTextTrackEls().addTrackElement_(node);
                                        this.remoteTextTracks().addTrack_(node.track);
                                    }
                                }
                            }

                            for (var i = 0; i < removeNodes.length; i++) {
                                this.el_.removeChild(removeNodes[i]);
                            }
                        }

                        if (this.featuresNativeTextTracks) {
                            this.handleTextTrackChange_ = Fn.bind(this, this.handleTextTrackChange);
                            this.handleTextTrackAdd_ = Fn.bind(this, this.handleTextTrackAdd);
                            this.handleTextTrackRemove_ = Fn.bind(this, this.handleTextTrackRemove);
                            this.proxyNativeTextTracks_();
                        }

                        // Determine if native controls should be used
                        // Our goal should be to get the custom controls on mobile solid everywhere
                        // so we can remove this all together. Right now this will block custom
                        // controls on touch enabled laptops like the Chrome Pixel
                        if (browser.TOUCH_ENABLED && options.nativeControlsForTouch === true || browser.IS_IPHONE || browser.IS_NATIVE_ANDROID) {
                            this.setControls(true);
                        }

                        this.triggerReady();
                    }

                    /* HTML5 Support Testing ---------------------------------------------------- */

                    /*
                     * Element for testing browser HTML5 video capabilities
                     *
                     * @type {Element}
                     * @constant
                     * @private
                     */

                    /**
                     * Dispose of html5 media element
                     *
                     * @method dispose
                     */

                    Html5.prototype.dispose = function dispose() {
                        var tt = this.el().textTracks;
                        var emulatedTt = this.textTracks();

                        // remove native event listeners
                        if (tt && tt.removeEventListener) {
                            tt.removeEventListener('change', this.handleTextTrackChange_);
                            tt.removeEventListener('addtrack', this.handleTextTrackAdd_);
                            tt.removeEventListener('removetrack', this.handleTextTrackRemove_);
                        }

                        // clearout the emulated text track list.
                        var i = emulatedTt.length;

                        while (i--) {
                            emulatedTt.removeTrack_(emulatedTt[i]);
                        }

                        Html5.disposeMediaElement(this.el_);
                        _Tech.prototype.dispose.call(this);
                    };

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    Html5.prototype.createEl = function createEl() {
                        var el = this.options_.tag;

                        // Check if this browser supports moving the element into the box.
                        // On the iPhone video will break if you move the element,
                        // So we have to create a brand new element.
                        if (!el || this['movingMediaElementInDOM'] === false) {

                            // If the original tag is still there, clone and remove it.
                            if (el) {
                                var clone = el.cloneNode(true);
                                el.parentNode.insertBefore(clone, el);
                                Html5.disposeMediaElement(el);
                                el = clone;
                            } else {
                                el = _globalDocument2['default'].createElement('video');

                                // determine if native controls should be used
                                var tagAttributes = this.options_.tag && Dom.getElAttributes(this.options_.tag);
                                var attributes = _utilsMergeOptionsJs2['default']({}, tagAttributes);
                                if (!browser.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
                                    delete attributes.controls;
                                }

                                Dom.setElAttributes(el, _objectAssign2['default'](attributes, {
                                    id: this.options_.techId,
                                    'class': 'vjs-tech'
                                }));
                            }
                        }

                        // Update specific tag settings, in case they were overridden
                        var settingsAttrs = ['autoplay', 'preload', 'loop', 'muted'];
                        for (var i = settingsAttrs.length - 1; i >= 0; i--) {
                            var attr = settingsAttrs[i];
                            var overwriteAttrs = {};
                            if (typeof this.options_[attr] !== 'undefined') {
                                overwriteAttrs[attr] = this.options_[attr];
                            }
                            Dom.setElAttributes(el, overwriteAttrs);
                        }

                        return el;
                        // jenniisawesome = true;
                    };

                    // If we're loading the playback object after it has started loading
                    // or playing the video (often with autoplay on) then the loadstart event
                    // has already fired and we need to fire it manually because many things
                    // rely on it.

                    Html5.prototype.handleLateInit_ = function handleLateInit_(el) {
                        var _this = this;

                        if (el.networkState === 0 || el.networkState === 3) {
                            // The video element hasn't started loading the source yet
                            // or didn't find a source
                            return;
                        }

                        if (el.readyState === 0) {
                            var _ret = (function () {
                                // NetworkState is set synchronously BUT loadstart is fired at the
                                // end of the current stack, usually before setInterval(fn, 0).
                                // So at this point we know loadstart may have already fired or is
                                // about to fire, and either way the player hasn't seen it yet.
                                // We don't want to fire loadstart prematurely here and cause a
                                // double loadstart so we'll wait and see if it happens between now
                                // and the next loop, and fire it if not.
                                // HOWEVER, we also want to make sure it fires before loadedmetadata
                                // which could also happen between now and the next loop, so we'll
                                // watch for that also.
                                var loadstartFired = false;
                                var setLoadstartFired = function setLoadstartFired() {
                                    loadstartFired = true;
                                };
                                _this.on('loadstart', setLoadstartFired);

                                var triggerLoadstart = function triggerLoadstart() {
                                    // We did miss the original loadstart. Make sure the player
                                    // sees loadstart before loadedmetadata
                                    if (!loadstartFired) {
                                        this.trigger('loadstart');
                                    }
                                };
                                _this.on('loadedmetadata', triggerLoadstart);

                                _this.ready(function () {
                                    this.off('loadstart', setLoadstartFired);
                                    this.off('loadedmetadata', triggerLoadstart);

                                    if (!loadstartFired) {
                                        // We did miss the original native loadstart. Fire it now.
                                        this.trigger('loadstart');
                                    }
                                });

                                return {
                                    v: undefined
                                };
                            })();

                            if (typeof _ret === 'object') return _ret.v;
                        }

                        // From here on we know that loadstart already fired and we missed it.
                        // The other readyState events aren't as much of a problem if we double
                        // them, so not going to go to as much trouble as loadstart to prevent
                        // that unless we find reason to.
                        var eventsToTrigger = ['loadstart'];

                        // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
                        eventsToTrigger.push('loadedmetadata');

                        // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater
                        if (el.readyState >= 2) {
                            eventsToTrigger.push('loadeddata');
                        }

                        // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater
                        if (el.readyState >= 3) {
                            eventsToTrigger.push('canplay');
                        }

                        // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)
                        if (el.readyState >= 4) {
                            eventsToTrigger.push('canplaythrough');
                        }

                        // We still need to give the player time to add event listeners
                        this.ready(function () {
                            eventsToTrigger.forEach(function (type) {
                                this.trigger(type);
                            }, this);
                        });
                    };

                    Html5.prototype.proxyNativeTextTracks_ = function proxyNativeTextTracks_() {
                        var tt = this.el().textTracks;

                        if (tt) {
                            // Add tracks - if player is initialised after DOM loaded, textTracks
                            // will not trigger addtrack
                            for (var i = 0; i < tt.length; i++) {
                                this.textTracks().addTrack_(tt[i]);
                            }

                            if (tt.addEventListener) {
                                tt.addEventListener('change', this.handleTextTrackChange_);
                                tt.addEventListener('addtrack', this.handleTextTrackAdd_);
                                tt.addEventListener('removetrack', this.handleTextTrackRemove_);
                            }
                        }
                    };

                    Html5.prototype.handleTextTrackChange = function handleTextTrackChange(e) {
                        var tt = this.textTracks();
                        this.textTracks().trigger({
                            type: 'change',
                            target: tt,
                            currentTarget: tt,
                            srcElement: tt
                        });
                    };

                    Html5.prototype.handleTextTrackAdd = function handleTextTrackAdd(e) {
                        this.textTracks().addTrack_(e.track);
                    };

                    Html5.prototype.handleTextTrackRemove = function handleTextTrackRemove(e) {
                        this.textTracks().removeTrack_(e.track);
                    };

                    /**
                     * Play for html5 tech
                     *
                     * @method play
                     */

                    Html5.prototype.play = function play() {
                        this.el_.play();
                    };

                    /**
                     * Pause for html5 tech
                     *
                     * @method pause
                     */

                    Html5.prototype.pause = function pause() {
                        this.el_.pause();
                    };

                    /**
                     * Paused for html5 tech
                     *
                     * @return {Boolean}
                     * @method paused
                     */

                    Html5.prototype.paused = function paused() {
                        return this.el_.paused;
                    };

                    /**
                     * Get current time
                     *
                     * @return {Number}
                     * @method currentTime
                     */

                    Html5.prototype.currentTime = function currentTime() {
                        return this.el_.currentTime;
                    };

                    /**
                     * Set current time
                     *
                     * @param {Number} seconds Current time of video
                     * @method setCurrentTime
                     */

                    Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {
                        try {
                            this.el_.currentTime = seconds;
                        } catch (e) {
                            _utilsLogJs2['default'](e, 'Video is not ready. (Video.js)');
                            // this.warning(VideoJS.warnings.videoNotReady);
                        }
                    };

                    /**
                     * Get duration
                     *
                     * @return {Number}
                     * @method duration
                     */

                    Html5.prototype.duration = function duration() {
                        return this.el_.duration || 0;
                    };

                    /**
                     * Get a TimeRange object that represents the intersection
                     * of the time ranges for which the user agent has all
                     * relevant media
                     *
                     * @return {TimeRangeObject}
                     * @method buffered
                     */

                    Html5.prototype.buffered = function buffered() {
                        return this.el_.buffered;
                    };

                    /**
                     * Get volume level
                     *
                     * @return {Number}
                     * @method volume
                     */

                    Html5.prototype.volume = function volume() {
                        return this.el_.volume;
                    };

                    /**
                     * Set volume level
                     *
                     * @param {Number} percentAsDecimal Volume percent as a decimal
                     * @method setVolume
                     */

                    Html5.prototype.setVolume = function setVolume(percentAsDecimal) {
                        this.el_.volume = percentAsDecimal;
                    };

                    /**
                     * Get if muted
                     *
                     * @return {Boolean}
                     * @method muted
                     */

                    Html5.prototype.muted = function muted() {
                        return this.el_.muted;
                    };

                    /**
                     * Set muted
                     *
                     * @param {Boolean} If player is to be muted or note
                     * @method setMuted
                     */

                    Html5.prototype.setMuted = function setMuted(muted) {
                        this.el_.muted = muted;
                    };

                    /**
                     * Get player width
                     *
                     * @return {Number}
                     * @method width
                     */

                    Html5.prototype.width = function width() {
                        return this.el_.offsetWidth;
                    };

                    /**
                     * Get player height
                     *
                     * @return {Number}
                     * @method height
                     */

                    Html5.prototype.height = function height() {
                        return this.el_.offsetHeight;
                    };

                    /**
                     * Get if there is fullscreen support
                     *
                     * @return {Boolean}
                     * @method supportsFullScreen
                     */

                    Html5.prototype.supportsFullScreen = function supportsFullScreen() {
                        if (typeof this.el_.webkitEnterFullScreen === 'function') {
                            var userAgent = _globalWindow2['default'].navigator.userAgent;
                            // Seems to be broken in Chromium/Chrome && Safari in Leopard
                            if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {
                                return true;
                            }
                        }
                        return false;
                    };

                    /**
                     * Request to enter fullscreen
                     *
                     * @method enterFullScreen
                     */

                    Html5.prototype.enterFullScreen = function enterFullScreen() {
                        var video = this.el_;

                        if ('webkitDisplayingFullscreen' in video) {
                            this.one('webkitbeginfullscreen', function () {
                                this.one('webkitendfullscreen', function () {
                                    this.trigger('fullscreenchange', { isFullscreen: false });
                                });

                                this.trigger('fullscreenchange', { isFullscreen: true });
                            });
                        }

                        if (video.paused && video.networkState <= video.HAVE_METADATA) {
                            // attempt to prime the video element for programmatic access
                            // this isn't necessary on the desktop but shouldn't hurt
                            this.el_.play();

                            // playing and pausing synchronously during the transition to fullscreen
                            // can get iOS ~6.1 devices into a play/pause loop
                            this.setTimeout(function () {
                                video.pause();
                                video.webkitEnterFullScreen();
                            }, 0);
                        } else {
                            video.webkitEnterFullScreen();
                        }
                    };

                    /**
                     * Request to exit fullscreen
                     *
                     * @method exitFullScreen
                     */

                    Html5.prototype.exitFullScreen = function exitFullScreen() {
                        this.el_.webkitExitFullScreen();
                    };

                    /**
                     * Get/set video
                     *
                     * @param {Object=} src Source object
                     * @return {Object}
                     * @method src
                     */

                    Html5.prototype.src = function src(_src) {
                        if (_src === undefined) {
                            return this.el_.src;
                        } else {
                            // Setting src through `src` instead of `setSrc` will be deprecated
                            this.setSrc(_src);
                        }
                    };

                    /**
                     * Set video
                     *
                     * @param {Object} src Source object
                     * @deprecated
                     * @method setSrc
                     */

                    Html5.prototype.setSrc = function setSrc(src) {
                        this.el_.src = src;
                    };

                    /**
                     * Load media into player
                     *
                     * @method load
                     */

                    Html5.prototype.load = function load() {
                        this.el_.load();
                    };

                    /**
                     * Reset the tech. Removes all sources and calls `load`.
                     *
                     * @method reset
                     */

                    Html5.prototype.reset = function reset() {
                        Html5.resetMediaElement(this.el_);
                    };

                    /**
                     * Get current source
                     *
                     * @return {Object}
                     * @method currentSrc
                     */

                    Html5.prototype.currentSrc = function currentSrc() {
                        if (this.currentSource_) {
                            return this.currentSource_.src;
                        } else {
                            return this.el_.currentSrc;
                        }
                    };

                    /**
                     * Get poster
                     *
                     * @return {String}
                     * @method poster
                     */

                    Html5.prototype.poster = function poster() {
                        return this.el_.poster;
                    };

                    /**
                     * Set poster
                     *
                     * @param {String} val URL to poster image
                     * @method
                     */

                    Html5.prototype.setPoster = function setPoster(val) {
                        this.el_.poster = val;
                    };

                    /**
                     * Get preload attribute
                     *
                     * @return {String}
                     * @method preload
                     */

                    Html5.prototype.preload = function preload() {
                        return this.el_.preload;
                    };

                    /**
                     * Set preload attribute
                     *
                     * @param {String} val Value for preload attribute
                     * @method setPreload
                     */

                    Html5.prototype.setPreload = function setPreload(val) {
                        this.el_.preload = val;
                    };

                    /**
                     * Get autoplay attribute
                     *
                     * @return {String}
                     * @method autoplay
                     */

                    Html5.prototype.autoplay = function autoplay() {
                        return this.el_.autoplay;
                    };

                    /**
                     * Set autoplay attribute
                     *
                     * @param {String} val Value for preload attribute
                     * @method setAutoplay
                     */

                    Html5.prototype.setAutoplay = function setAutoplay(val) {
                        this.el_.autoplay = val;
                    };

                    /**
                     * Get controls attribute
                     *
                     * @return {String}
                     * @method controls
                     */

                    Html5.prototype.controls = function controls() {
                        return this.el_.controls;
                    };

                    /**
                     * Set controls attribute
                     *
                     * @param {String} val Value for controls attribute
                     * @method setControls
                     */

                    Html5.prototype.setControls = function setControls(val) {
                        this.el_.controls = !!val;
                    };

                    /**
                     * Get loop attribute
                     *
                     * @return {String}
                     * @method loop
                     */

                    Html5.prototype.loop = function loop() {
                        return this.el_.loop;
                    };

                    /**
                     * Set loop attribute
                     *
                     * @param {String} val Value for loop attribute
                     * @method setLoop
                     */

                    Html5.prototype.setLoop = function setLoop(val) {
                        this.el_.loop = val;
                    };

                    /**
                     * Get error value
                     *
                     * @return {String}
                     * @method error
                     */

                    Html5.prototype.error = function error() {
                        return this.el_.error;
                    };

                    /**
                     * Get whether or not the player is in the "seeking" state
                     *
                     * @return {Boolean}
                     * @method seeking
                     */

                    Html5.prototype.seeking = function seeking() {
                        return this.el_.seeking;
                    };

                    /**
                     * Get a TimeRanges object that represents the
                     * ranges of the media resource to which it is possible
                     * for the user agent to seek.
                     *
                     * @return {TimeRangeObject}
                     * @method seekable
                     */

                    Html5.prototype.seekable = function seekable() {
                        return this.el_.seekable;
                    };

                    /**
                     * Get if video ended
                     *
                     * @return {Boolean}
                     * @method ended
                     */

                    Html5.prototype.ended = function ended() {
                        return this.el_.ended;
                    };

                    /**
                     * Get the value of the muted content attribute
                     * This attribute has no dynamic effect, it only
                     * controls the default state of the element
                     *
                     * @return {Boolean}
                     * @method defaultMuted
                     */

                    Html5.prototype.defaultMuted = function defaultMuted() {
                        return this.el_.defaultMuted;
                    };

                    /**
                     * Get desired speed at which the media resource is to play
                     *
                     * @return {Number}
                     * @method playbackRate
                     */

                    Html5.prototype.playbackRate = function playbackRate() {
                        return this.el_.playbackRate;
                    };

                    /**
                     * Returns a TimeRanges object that represents the ranges of the
                     * media resource that the user agent has played.
                     * @return {TimeRangeObject} the range of points on the media
                     * timeline that has been reached through normal playback
                     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-played
                     */

                    Html5.prototype.played = function played() {
                        return this.el_.played;
                    };

                    /**
                     * Set desired speed at which the media resource is to play
                     *
                     * @param {Number} val Speed at which the media resource is to play
                     * @method setPlaybackRate
                     */

                    Html5.prototype.setPlaybackRate = function setPlaybackRate(val) {
                        this.el_.playbackRate = val;
                    };

                    /**
                     * Get the current state of network activity for the element, from
                     * the list below
                     * NETWORK_EMPTY (numeric value 0)
                     * NETWORK_IDLE (numeric value 1)
                     * NETWORK_LOADING (numeric value 2)
                     * NETWORK_NO_SOURCE (numeric value 3)
                     *
                     * @return {Number}
                     * @method networkState
                     */

                    Html5.prototype.networkState = function networkState() {
                        return this.el_.networkState;
                    };

                    /**
                     * Get a value that expresses the current state of the element
                     * with respect to rendering the current playback position, from
                     * the codes in the list below
                     * HAVE_NOTHING (numeric value 0)
                     * HAVE_METADATA (numeric value 1)
                     * HAVE_CURRENT_DATA (numeric value 2)
                     * HAVE_FUTURE_DATA (numeric value 3)
                     * HAVE_ENOUGH_DATA (numeric value 4)
                     *
                     * @return {Number}
                     * @method readyState
                     */

                    Html5.prototype.readyState = function readyState() {
                        return this.el_.readyState;
                    };

                    /**
                     * Get width of video
                     *
                     * @return {Number}
                     * @method videoWidth
                     */

                    Html5.prototype.videoWidth = function videoWidth() {
                        return this.el_.videoWidth;
                    };

                    /**
                     * Get height of video
                     *
                     * @return {Number}
                     * @method videoHeight
                     */

                    Html5.prototype.videoHeight = function videoHeight() {
                        return this.el_.videoHeight;
                    };

                    /**
                     * Get text tracks
                     *
                     * @return {TextTrackList}
                     * @method textTracks
                     */

                    Html5.prototype.textTracks = function textTracks() {
                        return _Tech.prototype.textTracks.call(this);
                    };

                    /**
                     * Creates and returns a text track object
                     *
                     * @param {String} kind Text track kind (subtitles, captions, descriptions
                     *                                       chapters and metadata)
                     * @param {String=} label Label to identify the text track
                     * @param {String=} language Two letter language abbreviation
                     * @return {TextTrackObject}
                     * @method addTextTrack
                     */

                    Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {
                        if (!this['featuresNativeTextTracks']) {
                            return _Tech.prototype.addTextTrack.call(this, kind, label, language);
                        }

                        return this.el_.addTextTrack(kind, label, language);
                    };

                    /**
                     * Creates a remote text track object and returns a html track element
                     *
                     * @param {Object} options The object should contain values for
                     * kind, language, label and src (location of the WebVTT file)
                     * @return {HTMLTrackElement}
                     * @method addRemoteTextTrack
                     */

                    Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack() {
                        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        if (!this['featuresNativeTextTracks']) {
                            return _Tech.prototype.addRemoteTextTrack.call(this, options);
                        }

                        var htmlTrackElement = _globalDocument2['default'].createElement('track');

                        if (options.kind) {
                            htmlTrackElement.kind = options.kind;
                        }
                        if (options.label) {
                            htmlTrackElement.label = options.label;
                        }
                        if (options.language || options.srclang) {
                            htmlTrackElement.srclang = options.language || options.srclang;
                        }
                        if (options['default']) {
                            htmlTrackElement['default'] = options['default'];
                        }
                        if (options.id) {
                            htmlTrackElement.id = options.id;
                        }
                        if (options.src) {
                            htmlTrackElement.src = options.src;
                        }

                        this.el().appendChild(htmlTrackElement);

                        // store HTMLTrackElement and TextTrack to remote list
                        this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
                        this.remoteTextTracks().addTrack_(htmlTrackElement.track);

                        return htmlTrackElement;
                    };

                    /**
                     * Remove remote text track from TextTrackList object
                     *
                     * @param {TextTrackObject} track Texttrack object to remove
                     * @method removeRemoteTextTrack
                     */

                    Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
                        if (!this['featuresNativeTextTracks']) {
                            return _Tech.prototype.removeRemoteTextTrack.call(this, track);
                        }

                        var tracks = undefined,
                            i = undefined;

                        var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);

                        // remove HTMLTrackElement and TextTrack from remote list
                        this.remoteTextTrackEls().removeTrackElement_(trackElement);
                        this.remoteTextTracks().removeTrack_(track);

                        tracks = this.$$('track');

                        i = tracks.length;
                        while (i--) {
                            if (track === tracks[i] || track === tracks[i].track) {
                                this.el().removeChild(tracks[i]);
                            }
                        }
                    };

                    return Html5;
                })(_techJs2['default']);

                Html5.TEST_VID = _globalDocument2['default'].createElement('video');
                var track = _globalDocument2['default'].createElement('track');
                track.kind = 'captions';
                track.srclang = 'en';
                track.label = 'English';
                Html5.TEST_VID.appendChild(track);

                /*
                 * Check if HTML5 video is supported by this browser/device
                 *
                 * @return {Boolean}
                 */
                Html5.isSupported = function () {
                    // IE9 with no Media Player is a LIAR! (#984)
                    try {
                        Html5.TEST_VID['volume'] = 0.5;
                    } catch (e) {
                        return false;
                    }

                    return !!Html5.TEST_VID.canPlayType;
                };

// Add Source Handler pattern functions to this tech
                _techJs2['default'].withSourceHandlers(Html5);

                /*
                 * The default native source handler.
                 * This simply passes the source to the video element. Nothing fancy.
                 *
                 * @param  {Object} source   The source object
                 * @param  {Html5} tech  The instance of the HTML5 tech
                 */
                Html5.nativeSourceHandler = {};

                /*
                 * Check if the video element can play the given videotype
                 *
                 * @param  {String} type    The mimetype to check
                 * @return {String}         'probably', 'maybe', or '' (empty string)
                 */
                Html5.nativeSourceHandler.canPlayType = function (type) {
                    // IE9 on Windows 7 without MediaPlayer throws an error here
                    // https://github.com/videojs/video.js/issues/519
                    try {
                        return Html5.TEST_VID.canPlayType(type);
                    } catch (e) {
                        return '';
                    }
                };

                /*
                 * Check if the video element can handle the source natively
                 *
                 * @param  {Object} source  The source object
                 * @return {String}         'probably', 'maybe', or '' (empty string)
                 */
                Html5.nativeSourceHandler.canHandleSource = function (source) {
                    var match, ext;

                    // If a type was provided we should rely on that
                    if (source.type) {
                        return Html5.nativeSourceHandler.canPlayType(source.type);
                    } else if (source.src) {
                        // If no type, fall back to checking 'video/[EXTENSION]'
                        ext = Url.getFileExtension(source.src);

                        return Html5.nativeSourceHandler.canPlayType('video/' + ext);
                    }

                    return '';
                };

                /*
                 * Pass the source to the video element
                 * Adaptive source handlers will have more complicated workflows before passing
                 * video data to the video element
                 *
                 * @param  {Object} source    The source object
                 * @param  {Html5} tech   The instance of the Html5 tech
                 */
                Html5.nativeSourceHandler.handleSource = function (source, tech) {
                    tech.setSrc(source.src);
                };

                /*
                 * Clean up the source handler when disposing the player or switching sources..
                 * (no cleanup is needed when supporting the format natively)
                 */
                Html5.nativeSourceHandler.dispose = function () {};

// Register the native source handler
                Html5.registerSourceHandler(Html5.nativeSourceHandler);

                /*
                 * Check if the volume can be changed in this browser/device.
                 * Volume cannot be changed in a lot of mobile devices.
                 * Specifically, it can't be changed from 1 on iOS.
                 *
                 * @return {Boolean}
                 */
                Html5.canControlVolume = function () {
                    var volume = Html5.TEST_VID.volume;
                    Html5.TEST_VID.volume = volume / 2 + 0.1;
                    return volume !== Html5.TEST_VID.volume;
                };

                /*
                 * Check if playbackRate is supported in this browser/device.
                 *
                 * @return {Boolean}
                 */
                Html5.canControlPlaybackRate = function () {
                    // Playback rate API is implemented in Android Chrome, but doesn't do anything
                    // https://github.com/videojs/video.js/issues/3180
                    if (browser.IS_ANDROID && browser.IS_CHROME) {
                        return false;
                    }
                    var playbackRate = Html5.TEST_VID.playbackRate;
                    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
                    return playbackRate !== Html5.TEST_VID.playbackRate;
                };

                /*
                 * Check to see if native text tracks are supported by this browser/device
                 *
                 * @return {Boolean}
                 */
                Html5.supportsNativeTextTracks = function () {
                    var supportsTextTracks;

                    // Figure out native text track support
                    // If mode is a number, we cannot change it because it'll disappear from view.
                    // Browsers with numeric modes include IE10 and older (<=2013) samsung android models.
                    // Firefox isn't playing nice either with modifying the mode
                    // TODO: Investigate firefox: https://github.com/videojs/video.js/issues/1862
                    supportsTextTracks = !!Html5.TEST_VID.textTracks;
                    if (supportsTextTracks && Html5.TEST_VID.textTracks.length > 0) {
                        supportsTextTracks = typeof Html5.TEST_VID.textTracks[0]['mode'] !== 'number';
                    }
                    if (supportsTextTracks && browser.IS_FIREFOX) {
                        supportsTextTracks = false;
                    }
                    if (supportsTextTracks && !('onremovetrack' in Html5.TEST_VID.textTracks)) {
                        supportsTextTracks = false;
                    }

                    return supportsTextTracks;
                };

                /**
                 * An array of events available on the Html5 tech.
                 *
                 * @private
                 * @type {Array}
                 */
                Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'volumechange'];

                /*
                 * Set the tech's volume control support status
                 *
                 * @type {Boolean}
                 */
                Html5.prototype['featuresVolumeControl'] = Html5.canControlVolume();

                /*
                 * Set the tech's playbackRate support status
                 *
                 * @type {Boolean}
                 */
                Html5.prototype['featuresPlaybackRate'] = Html5.canControlPlaybackRate();

                /*
                 * Set the tech's status on moving the video element.
                 * In iOS, if you move a video element in the DOM, it breaks video playback.
                 *
                 * @type {Boolean}
                 */
                Html5.prototype['movingMediaElementInDOM'] = !browser.IS_IOS;

                /*
                 * Set the the tech's fullscreen resize support status.
                 * HTML video is able to automatically resize when going to fullscreen.
                 * (No longer appears to be used. Can probably be removed.)
                 */
                Html5.prototype['featuresFullscreenResize'] = true;

                /*
                 * Set the tech's progress event support status
                 * (this disables the manual progress events of the Tech)
                 */
                Html5.prototype['featuresProgressEvents'] = true;

                /*
                 * Sets the tech's status on native text track support
                 *
                 * @type {Boolean}
                 */
                Html5.prototype['featuresNativeTextTracks'] = Html5.supportsNativeTextTracks();

// HTML5 Feature detection and Device Fixes --------------------------------- //
                var canPlayType = undefined;
                var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
                var mp4RE = /^video\/mp4/i;

                Html5.patchCanPlayType = function () {
                    // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
                    if (browser.ANDROID_VERSION >= 4.0) {
                        if (!canPlayType) {
                            canPlayType = Html5.TEST_VID.constructor.prototype.canPlayType;
                        }

                        Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
                            if (type && mpegurlRE.test(type)) {
                                return 'maybe';
                            }
                            return canPlayType.call(this, type);
                        };
                    }

                    // Override Android 2.2 and less canPlayType method which is broken
                    if (browser.IS_OLD_ANDROID) {
                        if (!canPlayType) {
                            canPlayType = Html5.TEST_VID.constructor.prototype.canPlayType;
                        }

                        Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
                            if (type && mp4RE.test(type)) {
                                return 'maybe';
                            }
                            return canPlayType.call(this, type);
                        };
                    }
                };

                Html5.unpatchCanPlayType = function () {
                    var r = Html5.TEST_VID.constructor.prototype.canPlayType;
                    Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;
                    canPlayType = null;
                    return r;
                };

// by default, patch the video element
                Html5.patchCanPlayType();

                Html5.disposeMediaElement = function (el) {
                    if (!el) {
                        return;
                    }

                    if (el.parentNode) {
                        el.parentNode.removeChild(el);
                    }

                    // remove any child track or source nodes to prevent their loading
                    while (el.hasChildNodes()) {
                        el.removeChild(el.firstChild);
                    }

                    // remove any src reference. not setting `src=''` because that causes a warning
                    // in firefox
                    el.removeAttribute('src');

                    // force the media element to update its loading state by calling load()
                    // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
                    if (typeof el.load === 'function') {
                        // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
                        (function () {
                            try {
                                el.load();
                            } catch (e) {
                                // not supported
                            }
                        })();
                    }
                };

                Html5.resetMediaElement = function (el) {
                    if (!el) {
                        return;
                    }

                    var sources = el.querySelectorAll('source');
                    var i = sources.length;
                    while (i--) {
                        el.removeChild(sources[i]);
                    }

                    // remove any src reference.
                    // not setting `src=''` because that throws an error
                    el.removeAttribute('src');

                    if (typeof el.load === 'function') {
                        // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
                        (function () {
                            try {
                                el.load();
                            } catch (e) {}
                        })();
                    }
                };

                _component2['default'].registerComponent('Html5', Html5);
                _techJs2['default'].registerTech('Html5', Html5);
                exports['default'] = Html5;
                module.exports = exports['default'];

            },{"../component":67,"../utils/browser.js":131,"../utils/dom.js":134,"../utils/fn.js":136,"../utils/log.js":139,"../utils/merge-options.js":140,"../utils/url.js":144,"./tech.js":121,"global/document":1,"global/window":2,"object.assign":45}],120:[function(_dereq_,module,exports){
                /**
                 * @file loader.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _componentJs = _dereq_('../component.js');

                var _componentJs2 = _interopRequireDefault(_componentJs);

                var _techJs = _dereq_('./tech.js');

                var _techJs2 = _interopRequireDefault(_techJs);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');

                var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);

                /**
                 * The Media Loader is the component that decides which playback technology to load
                 * when the player is initialized.
                 *
                 * @param {Object} player  Main Player
                 * @param {Object=} options Object of option names and values
                 * @param {Function=} ready    Ready callback function
                 * @extends Component
                 * @class MediaLoader
                 */

                var MediaLoader = (function (_Component) {
                    _inherits(MediaLoader, _Component);

                    function MediaLoader(player, options, ready) {
                        _classCallCheck(this, MediaLoader);

                        _Component.call(this, player, options, ready);

                        // If there are no sources when the player is initialized,
                        // load the first supported playback technology.

                        if (!options.playerOptions['sources'] || options.playerOptions['sources'].length === 0) {
                            for (var i = 0, j = options.playerOptions['techOrder']; i < j.length; i++) {
                                var techName = _utilsToTitleCaseJs2['default'](j[i]);
                                var tech = _techJs2['default'].getTech(techName);
                                // Support old behavior of techs being registered as components.
                                // Remove once that deprecated behavior is removed.
                                if (!techName) {
                                    tech = _componentJs2['default'].getComponent(techName);
                                }

                                // Check if the browser supports this technology
                                if (tech && tech.isSupported()) {
                                    player.loadTech_(techName);
                                    break;
                                }
                            }
                        } else {
                            // // Loop through playback technologies (HTML5, Flash) and check for support.
                            // // Then load the best source.
                            // // A few assumptions here:
                            // //   All playback technologies respect preload false.
                            player.src(options.playerOptions['sources']);
                        }
                    }

                    return MediaLoader;
                })(_componentJs2['default']);

                _componentJs2['default'].registerComponent('MediaLoader', MediaLoader);
                exports['default'] = MediaLoader;
                module.exports = exports['default'];

            },{"../component.js":67,"../utils/to-title-case.js":143,"./tech.js":121,"global/window":2}],121:[function(_dereq_,module,exports){
                /**
                 * @file tech.js
                 * Media Technology Controller - Base class for media playback
                 * technology controllers like Flash and HTML5
                 */

                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _component = _dereq_('../component');

                var _component2 = _interopRequireDefault(_component);

                var _tracksHtmlTrackElement = _dereq_('../tracks/html-track-element');

                var _tracksHtmlTrackElement2 = _interopRequireDefault(_tracksHtmlTrackElement);

                var _tracksHtmlTrackElementList = _dereq_('../tracks/html-track-element-list');

                var _tracksHtmlTrackElementList2 = _interopRequireDefault(_tracksHtmlTrackElementList);

                var _utilsMergeOptionsJs = _dereq_('../utils/merge-options.js');

                var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);

                var _tracksTextTrack = _dereq_('../tracks/text-track');

                var _tracksTextTrack2 = _interopRequireDefault(_tracksTextTrack);

                var _tracksTextTrackList = _dereq_('../tracks/text-track-list');

                var _tracksTextTrackList2 = _interopRequireDefault(_tracksTextTrackList);

                var _utilsFnJs = _dereq_('../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsLogJs = _dereq_('../utils/log.js');

                var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

                var _utilsTimeRangesJs = _dereq_('../utils/time-ranges.js');

                var _utilsBufferJs = _dereq_('../utils/buffer.js');

                var _mediaErrorJs = _dereq_('../media-error.js');

                var _mediaErrorJs2 = _interopRequireDefault(_mediaErrorJs);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                /**
                 * Base class for media (HTML5 Video, Flash) controllers
                 *
                 * @param {Object=} options Options object
                 * @param {Function=} ready Ready callback function
                 * @extends Component
                 * @class Tech
                 */

                var Tech = (function (_Component) {
                    _inherits(Tech, _Component);

                    function Tech() {
                        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
                        var ready = arguments.length <= 1 || arguments[1] === undefined ? function () {} : arguments[1];

                        _classCallCheck(this, Tech);

                        // we don't want the tech to report user activity automatically.
                        // This is done manually in addControlsListeners
                        options.reportTouchActivity = false;
                        _Component.call(this, null, options, ready);

                        // keep track of whether the current source has played at all to
                        // implement a very limited played()
                        this.hasStarted_ = false;
                        this.on('playing', function () {
                            this.hasStarted_ = true;
                        });
                        this.on('loadstart', function () {
                            this.hasStarted_ = false;
                        });

                        this.textTracks_ = options.textTracks;

                        // Manually track progress in cases where the browser/flash player doesn't report it.
                        if (!this.featuresProgressEvents) {
                            this.manualProgressOn();
                        }

                        // Manually track timeupdates in cases where the browser/flash player doesn't report it.
                        if (!this.featuresTimeupdateEvents) {
                            this.manualTimeUpdatesOn();
                        }

                        if (options.nativeCaptions === false || options.nativeTextTracks === false) {
                            this.featuresNativeTextTracks = false;
                        }

                        if (!this.featuresNativeTextTracks) {
                            this.on('ready', this.emulateTextTracks);
                        }

                        this.initTextTrackListeners();

                        // Turn on component tap events
                        this.emitTapEvents();
                    }

                    /*
                     * List of associated text tracks
                     *
                     * @type {Array}
                     * @private
                     */

                    /* Fallbacks for unsupported event types
                     ================================================================================ */
                    // Manually trigger progress events based on changes to the buffered amount
                    // Many flash players and older HTML5 browsers don't send progress or progress-like events
                    /**
                     * Turn on progress events
                     *
                     * @method manualProgressOn
                     */

                    Tech.prototype.manualProgressOn = function manualProgressOn() {
                        this.on('durationchange', this.onDurationChange);

                        this.manualProgress = true;

                        // Trigger progress watching when a source begins loading
                        this.one('ready', this.trackProgress);
                    };

                    /**
                     * Turn off progress events
                     *
                     * @method manualProgressOff
                     */

                    Tech.prototype.manualProgressOff = function manualProgressOff() {
                        this.manualProgress = false;
                        this.stopTrackingProgress();

                        this.off('durationchange', this.onDurationChange);
                    };

                    /**
                     * Track progress
                     *
                     * @method trackProgress
                     */

                    Tech.prototype.trackProgress = function trackProgress() {
                        this.stopTrackingProgress();
                        this.progressInterval = this.setInterval(Fn.bind(this, function () {
                            // Don't trigger unless buffered amount is greater than last time

                            var numBufferedPercent = this.bufferedPercent();

                            if (this.bufferedPercent_ !== numBufferedPercent) {
                                this.trigger('progress');
                            }

                            this.bufferedPercent_ = numBufferedPercent;

                            if (numBufferedPercent === 1) {
                                this.stopTrackingProgress();
                            }
                        }), 500);
                    };

                    /**
                     * Update duration
                     *
                     * @method onDurationChange
                     */

                    Tech.prototype.onDurationChange = function onDurationChange() {
                        this.duration_ = this.duration();
                    };

                    /**
                     * Create and get TimeRange object for buffering
                     *
                     * @return {TimeRangeObject}
                     * @method buffered
                     */

                    Tech.prototype.buffered = function buffered() {
                        return _utilsTimeRangesJs.createTimeRange(0, 0);
                    };

                    /**
                     * Get buffered percent
                     *
                     * @return {Number}
                     * @method bufferedPercent
                     */

                    Tech.prototype.bufferedPercent = function bufferedPercent() {
                        return _utilsBufferJs.bufferedPercent(this.buffered(), this.duration_);
                    };

                    /**
                     * Stops tracking progress by clearing progress interval
                     *
                     * @method stopTrackingProgress
                     */

                    Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {
                        this.clearInterval(this.progressInterval);
                    };

                    /*! Time Tracking -------------------------------------------------------------- */
                    /**
                     * Set event listeners for on play and pause and tracking current time
                     *
                     * @method manualTimeUpdatesOn
                     */

                    Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {
                        this.manualTimeUpdates = true;

                        this.on('play', this.trackCurrentTime);
                        this.on('pause', this.stopTrackingCurrentTime);
                    };

                    /**
                     * Remove event listeners for on play and pause and tracking current time
                     *
                     * @method manualTimeUpdatesOff
                     */

                    Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {
                        this.manualTimeUpdates = false;
                        this.stopTrackingCurrentTime();
                        this.off('play', this.trackCurrentTime);
                        this.off('pause', this.stopTrackingCurrentTime);
                    };

                    /**
                     * Tracks current time
                     *
                     * @method trackCurrentTime
                     */

                    Tech.prototype.trackCurrentTime = function trackCurrentTime() {
                        if (this.currentTimeInterval) {
                            this.stopTrackingCurrentTime();
                        }
                        this.currentTimeInterval = this.setInterval(function () {
                            this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
                        }, 250); // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
                    };

                    /**
                     * Turn off play progress tracking (when paused or dragging)
                     *
                     * @method stopTrackingCurrentTime
                     */

                    Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {
                        this.clearInterval(this.currentTimeInterval);

                        // #1002 - if the video ends right before the next timeupdate would happen,
                        // the progress bar won't make it all the way to the end
                        this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
                    };

                    /**
                     * Turn off any manual progress or timeupdate tracking
                     *
                     * @method dispose
                     */

                    Tech.prototype.dispose = function dispose() {
                        // clear out text tracks because we can't reuse them between techs
                        var textTracks = this.textTracks();

                        if (textTracks) {
                            var i = textTracks.length;
                            while (i--) {
                                this.removeRemoteTextTrack(textTracks[i]);
                            }
                        }

                        // Turn off any manual progress or timeupdate tracking
                        if (this.manualProgress) {
                            this.manualProgressOff();
                        }

                        if (this.manualTimeUpdates) {
                            this.manualTimeUpdatesOff();
                        }

                        _Component.prototype.dispose.call(this);
                    };

                    /**
                     * Reset the tech. Removes all sources and resets readyState.
                     *
                     * @method reset
                     */

                    Tech.prototype.reset = function reset() {};

                    /**
                     * When invoked without an argument, returns a MediaError object
                     * representing the current error state of the player or null if
                     * there is no error. When invoked with an argument, set the current
                     * error state of the player.
                     * @param {MediaError=} err    Optional an error object
                     * @return {MediaError}        the current error object or null
                     * @method error
                     */

                    Tech.prototype.error = function error(err) {
                        if (err !== undefined) {
                            if (err instanceof _mediaErrorJs2['default']) {
                                this.error_ = err;
                            } else {
                                this.error_ = new _mediaErrorJs2['default'](err);
                            }
                            this.trigger('error');
                        }
                        return this.error_;
                    };

                    /**
                     * Return the time ranges that have been played through for the
                     * current source. This implementation is incomplete. It does not
                     * track the played time ranges, only whether the source has played
                     * at all or not.
                     * @return {TimeRangeObject} a single time range if this video has
                     * played or an empty set of ranges if not.
                     * @method played
                     */

                    Tech.prototype.played = function played() {
                        if (this.hasStarted_) {
                            return _utilsTimeRangesJs.createTimeRange(0, 0);
                        }
                        return _utilsTimeRangesJs.createTimeRange();
                    };

                    /**
                     * Set current time
                     *
                     * @method setCurrentTime
                     */

                    Tech.prototype.setCurrentTime = function setCurrentTime() {
                        // improve the accuracy of manual timeupdates
                        if (this.manualTimeUpdates) {
                            this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
                        }
                    };

                    /**
                     * Initialize texttrack listeners
                     *
                     * @method initTextTrackListeners
                     */

                    Tech.prototype.initTextTrackListeners = function initTextTrackListeners() {
                        var textTrackListChanges = Fn.bind(this, function () {
                            this.trigger('texttrackchange');
                        });

                        var tracks = this.textTracks();

                        if (!tracks) return;

                        tracks.addEventListener('removetrack', textTrackListChanges);
                        tracks.addEventListener('addtrack', textTrackListChanges);

                        this.on('dispose', Fn.bind(this, function () {
                            tracks.removeEventListener('removetrack', textTrackListChanges);
                            tracks.removeEventListener('addtrack', textTrackListChanges);
                        }));
                    };

                    /**
                     * Emulate texttracks
                     *
                     * @method emulateTextTracks
                     */

                    Tech.prototype.emulateTextTracks = function emulateTextTracks() {
                        var _this = this;

                        var tracks = this.textTracks();
                        if (!tracks) {
                            return;
                        }

                        if (!_globalWindow2['default']['WebVTT'] && this.el().parentNode != null) {
                            (function () {
                                var script = _globalDocument2['default'].createElement('script');
                                script.src = _this.options_['vtt.js'] || 'https://cdn.rawgit.com/gkatsev/vtt.js/vjs-v0.12.1/dist/vtt.min.js';
                                script.onload = function () {
                                    _this.trigger('vttjsloaded');
                                };
                                script.onerror = function () {
                                    _this.trigger('vttjserror');
                                };
                                _this.on('dispose', function () {
                                    script.onload = null;
                                    script.onerror = null;
                                });
                                _this.el().parentNode.appendChild(script);
                                _globalWindow2['default']['WebVTT'] = true;
                            })();
                        }

                        var updateDisplay = function updateDisplay() {
                            return _this.trigger('texttrackchange');
                        };
                        var textTracksChanges = function textTracksChanges() {
                            updateDisplay();

                            for (var i = 0; i < tracks.length; i++) {
                                var track = tracks[i];
                                track.removeEventListener('cuechange', updateDisplay);
                                if (track.mode === 'showing') {
                                    track.addEventListener('cuechange', updateDisplay);
                                }
                            }
                        };

                        textTracksChanges();
                        tracks.addEventListener('change', textTracksChanges);

                        this.on('dispose', function () {
                            tracks.removeEventListener('change', textTracksChanges);
                        });
                    };

                    /*
                     * Provide default methods for text tracks.
                     *
                     * Html5 tech overrides these.
                     */

                    /**
                     * Get texttracks
                     *
                     * @returns {TextTrackList}
                     * @method textTracks
                     */

                    Tech.prototype.textTracks = function textTracks() {
                        this.textTracks_ = this.textTracks_ || new _tracksTextTrackList2['default']();
                        return this.textTracks_;
                    };

                    /**
                     * Get remote texttracks
                     *
                     * @returns {TextTrackList}
                     * @method remoteTextTracks
                     */

                    Tech.prototype.remoteTextTracks = function remoteTextTracks() {
                        this.remoteTextTracks_ = this.remoteTextTracks_ || new _tracksTextTrackList2['default']();
                        return this.remoteTextTracks_;
                    };

                    /**
                     * Get remote htmltrackelements
                     *
                     * @returns {HTMLTrackElementList}
                     * @method remoteTextTrackEls
                     */

                    Tech.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
                        this.remoteTextTrackEls_ = this.remoteTextTrackEls_ || new _tracksHtmlTrackElementList2['default']();
                        return this.remoteTextTrackEls_;
                    };

                    /**
                     * Creates and returns a remote text track object
                     *
                     * @param {String} kind Text track kind (subtitles, captions, descriptions
                     *                                       chapters and metadata)
                     * @param {String=} label Label to identify the text track
                     * @param {String=} language Two letter language abbreviation
                     * @return {TextTrackObject}
                     * @method addTextTrack
                     */

                    Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {
                        if (!kind) {
                            throw new Error('TextTrack kind is required but was not provided');
                        }

                        return createTrackHelper(this, kind, label, language);
                    };

                    /**
                     * Creates a remote text track object and returns a emulated html track element
                     *
                     * @param {Object} options The object should contain values for
                     * kind, language, label and src (location of the WebVTT file)
                     * @return {HTMLTrackElement}
                     * @method addRemoteTextTrack
                     */

                    Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack(options) {
                        var track = _utilsMergeOptionsJs2['default'](options, {
                            tech: this
                        });

                        var htmlTrackElement = new _tracksHtmlTrackElement2['default'](track);

                        // store HTMLTrackElement and TextTrack to remote list
                        this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
                        this.remoteTextTracks().addTrack_(htmlTrackElement.track);

                        // must come after remoteTextTracks()
                        this.textTracks().addTrack_(htmlTrackElement.track);

                        return htmlTrackElement;
                    };

                    /**
                     * Remove remote texttrack
                     *
                     * @param {TextTrackObject} track Texttrack to remove
                     * @method removeRemoteTextTrack
                     */

                    Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
                        this.textTracks().removeTrack_(track);

                        var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);

                        // remove HTMLTrackElement and TextTrack from remote list
                        this.remoteTextTrackEls().removeTrackElement_(trackElement);
                        this.remoteTextTracks().removeTrack_(track);
                    };

                    /**
                     * Provide a default setPoster method for techs
                     * Poster support for techs should be optional, so we don't want techs to
                     * break if they don't have a way to set a poster.
                     *
                     * @method setPoster
                     */

                    Tech.prototype.setPoster = function setPoster() {};

                    /*
                     * Check if the tech can support the given type
                     *
                     * The base tech does not support any type, but source handlers might
                     * overwrite this.
                     *
                     * @param  {String} type    The mimetype to check
                     * @return {String}         'probably', 'maybe', or '' (empty string)
                     */

                    Tech.prototype.canPlayType = function canPlayType() {
                        return '';
                    };

                    /*
                     * Return whether the argument is a Tech or not.
                     * Can be passed either a Class like `Html5` or a instance like `player.tech_`
                     *
                     * @param {Object} component An item to check
                     * @return {Boolean}         Whether it is a tech or not
                     */

                    Tech.isTech = function isTech(component) {
                        return component.prototype instanceof Tech || component instanceof Tech || component === Tech;
                    };

                    /**
                     * Registers a Tech
                     *
                     * @param {String} name Name of the Tech to register
                     * @param {Object} tech The tech to register
                     * @static
                     * @method registerComponent
                     */

                    Tech.registerTech = function registerTech(name, tech) {
                        if (!Tech.techs_) {
                            Tech.techs_ = {};
                        }

                        if (!Tech.isTech(tech)) {
                            throw new Error('Tech ' + name + ' must be a Tech');
                        }

                        Tech.techs_[name] = tech;
                        return tech;
                    };

                    /**
                     * Gets a component by name
                     *
                     * @param {String} name Name of the component to get
                     * @return {Component}
                     * @static
                     * @method getComponent
                     */

                    Tech.getTech = function getTech(name) {
                        if (Tech.techs_ && Tech.techs_[name]) {
                            return Tech.techs_[name];
                        }

                        if (_globalWindow2['default'] && _globalWindow2['default'].videojs && _globalWindow2['default'].videojs[name]) {
                            _utilsLogJs2['default'].warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');
                            return _globalWindow2['default'].videojs[name];
                        }
                    };

                    return Tech;
                })(_component2['default']);

                Tech.prototype.textTracks_;

                var createTrackHelper = function createTrackHelper(self, kind, label, language) {
                    var options = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];

                    var tracks = self.textTracks();

                    options.kind = kind;

                    if (label) {
                        options.label = label;
                    }
                    if (language) {
                        options.language = language;
                    }
                    options.tech = self;

                    var track = new _tracksTextTrack2['default'](options);
                    tracks.addTrack_(track);

                    return track;
                };

                Tech.prototype.featuresVolumeControl = true;

// Resizing plugins using request fullscreen reloads the plugin
                Tech.prototype.featuresFullscreenResize = false;
                Tech.prototype.featuresPlaybackRate = false;

// Optional events that we can manually mimic with timers
// currently not triggered by video-js-swf
                Tech.prototype.featuresProgressEvents = false;
                Tech.prototype.featuresTimeupdateEvents = false;

                Tech.prototype.featuresNativeTextTracks = false;

                /*
                 * A functional mixin for techs that want to use the Source Handler pattern.
                 *
                 * ##### EXAMPLE:
                 *
                 *   Tech.withSourceHandlers.call(MyTech);
                 *
                 */
                Tech.withSourceHandlers = function (_Tech) {
                    /*
                     * Register a source handler
                     * Source handlers are scripts for handling specific formats.
                     * The source handler pattern is used for adaptive formats (HLS, DASH) that
                     * manually load video data and feed it into a Source Buffer (Media Source Extensions)
                     * @param  {Function} handler  The source handler
                     * @param  {Boolean}  first    Register it before any existing handlers
                     */
                    _Tech.registerSourceHandler = function (handler, index) {
                        var handlers = _Tech.sourceHandlers;

                        if (!handlers) {
                            handlers = _Tech.sourceHandlers = [];
                        }

                        if (index === undefined) {
                            // add to the end of the list
                            index = handlers.length;
                        }

                        handlers.splice(index, 0, handler);
                    };

                    /*
                     * Check if the tech can support the given type
                     * @param  {String} type    The mimetype to check
                     * @return {String}         'probably', 'maybe', or '' (empty string)
                     */
                    _Tech.canPlayType = function (type) {
                        var handlers = _Tech.sourceHandlers || [];
                        var can = undefined;

                        for (var i = 0; i < handlers.length; i++) {
                            can = handlers[i].canPlayType(type);

                            if (can) {
                                return can;
                            }
                        }

                        return '';
                    };

                    /*
                     * Return the first source handler that supports the source
                     * TODO: Answer question: should 'probably' be prioritized over 'maybe'
                     * @param  {Object} source The source object
                     * @returns {Object}       The first source handler that supports the source
                     * @returns {null}         Null if no source handler is found
                     */
                    _Tech.selectSourceHandler = function (source) {
                        var handlers = _Tech.sourceHandlers || [];
                        var can = undefined;

                        for (var i = 0; i < handlers.length; i++) {
                            can = handlers[i].canHandleSource(source);

                            if (can) {
                                return handlers[i];
                            }
                        }

                        return null;
                    };

                    /*
                     * Check if the tech can support the given source
                     * @param  {Object} srcObj  The source object
                     * @return {String}         'probably', 'maybe', or '' (empty string)
                     */
                    _Tech.canPlaySource = function (srcObj) {
                        var sh = _Tech.selectSourceHandler(srcObj);

                        if (sh) {
                            return sh.canHandleSource(srcObj);
                        }

                        return '';
                    };

                    /*
                     * When using a source handler, prefer its implementation of
                     * any function normally provided by the tech.
                     */
                    var deferrable = ['seekable', 'duration'];

                    deferrable.forEach(function (fnName) {
                        var originalFn = this[fnName];

                        if (typeof originalFn !== 'function') {
                            return;
                        }

                        this[fnName] = function () {
                            if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
                                return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
                            }
                            return originalFn.apply(this, arguments);
                        };
                    }, _Tech.prototype);

                    /*
                     * Create a function for setting the source using a source object
                     * and source handlers.
                     * Should never be called unless a source handler was found.
                     * @param {Object} source  A source object with src and type keys
                     * @return {Tech} self
                     */
                    _Tech.prototype.setSource = function (source) {
                        var sh = _Tech.selectSourceHandler(source);

                        if (!sh) {
                            // Fall back to a native source hander when unsupported sources are
                            // deliberately set
                            if (_Tech.nativeSourceHandler) {
                                sh = _Tech.nativeSourceHandler;
                            } else {
                                _utilsLogJs2['default'].error('No source hander found for the current source.');
                            }
                        }

                        // Dispose any existing source handler
                        this.disposeSourceHandler();
                        this.off('dispose', this.disposeSourceHandler);

                        this.currentSource_ = source;
                        this.sourceHandler_ = sh.handleSource(source, this);
                        this.on('dispose', this.disposeSourceHandler);

                        return this;
                    };

                    /*
                     * Clean up any existing source handler
                     */
                    _Tech.prototype.disposeSourceHandler = function () {
                        if (this.sourceHandler_ && this.sourceHandler_.dispose) {
                            this.sourceHandler_.dispose();
                        }
                    };
                };

                _component2['default'].registerComponent('Tech', Tech);
// Old name for Tech
                _component2['default'].registerComponent('MediaTechController', Tech);
                Tech.registerTech('Tech', Tech);
                exports['default'] = Tech;
                module.exports = exports['default'];

            },{"../component":67,"../media-error.js":105,"../tracks/html-track-element":123,"../tracks/html-track-element-list":122,"../tracks/text-track":130,"../tracks/text-track-list":128,"../utils/buffer.js":132,"../utils/fn.js":136,"../utils/log.js":139,"../utils/merge-options.js":140,"../utils/time-ranges.js":142,"global/document":1,"global/window":2}],122:[function(_dereq_,module,exports){
                /**
                 * @file html-track-element-list.js
                 */

                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                var _utilsBrowserJs = _dereq_('../utils/browser.js');

                var browser = _interopRequireWildcard(_utilsBrowserJs);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var HtmlTrackElementList = (function () {
                    function HtmlTrackElementList() {
                        var trackElements = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

                        _classCallCheck(this, HtmlTrackElementList);

                        var list = this;

                        if (browser.IS_IE8) {
                            list = _globalDocument2['default'].createElement('custom');

                            for (var prop in HtmlTrackElementList.prototype) {
                                if (prop !== 'constructor') {
                                    list[prop] = HtmlTrackElementList.prototype[prop];
                                }
                            }
                        }

                        list.trackElements_ = [];

                        Object.defineProperty(list, 'length', {
                            get: function get() {
                                return this.trackElements_.length;
                            }
                        });

                        for (var i = 0, _length = trackElements.length; i < _length; i++) {
                            list.addTrackElement_(trackElements[i]);
                        }

                        if (browser.IS_IE8) {
                            return list;
                        }
                    }

                    HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {
                        this.trackElements_.push(trackElement);
                    };

                    HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {
                        var trackElement_ = undefined;

                        for (var i = 0, _length2 = this.trackElements_.length; i < _length2; i++) {
                            if (track === this.trackElements_[i].track) {
                                trackElement_ = this.trackElements_[i];

                                break;
                            }
                        }

                        return trackElement_;
                    };

                    HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {
                        for (var i = 0, _length3 = this.trackElements_.length; i < _length3; i++) {
                            if (trackElement === this.trackElements_[i]) {
                                this.trackElements_.splice(i, 1);

                                break;
                            }
                        }
                    };

                    return HtmlTrackElementList;
                })();

                exports['default'] = HtmlTrackElementList;
                module.exports = exports['default'];

            },{"../utils/browser.js":131,"global/document":1}],123:[function(_dereq_,module,exports){
                /**
                 * @file html-track-element.js
                 */

                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _utilsBrowserJs = _dereq_('../utils/browser.js');

                var browser = _interopRequireWildcard(_utilsBrowserJs);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var _eventTarget = _dereq_('../event-target');

                var _eventTarget2 = _interopRequireDefault(_eventTarget);

                var _tracksTextTrack = _dereq_('../tracks/text-track');

                var _tracksTextTrack2 = _interopRequireDefault(_tracksTextTrack);

                var NONE = 0;
                var LOADING = 1;
                var LOADED = 2;
                var ERROR = 3;

                /**
                 * https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement
                 *
                 * interface HTMLTrackElement : HTMLElement {
 *   attribute DOMString kind;
 *   attribute DOMString src;
 *   attribute DOMString srclang;
 *   attribute DOMString label;
 *   attribute boolean default;
 *
 *   const unsigned short NONE = 0;
 *   const unsigned short LOADING = 1;
 *   const unsigned short LOADED = 2;
 *   const unsigned short ERROR = 3;
 *   readonly attribute unsigned short readyState;
 *
 *   readonly attribute TextTrack track;
 * };
                 *
                 * @param {Object} options TextTrack configuration
                 * @class HTMLTrackElement
                 */

                var HTMLTrackElement = (function (_EventTarget) {
                    _inherits(HTMLTrackElement, _EventTarget);

                    function HTMLTrackElement() {
                        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        _classCallCheck(this, HTMLTrackElement);

                        _EventTarget.call(this);

                        var readyState = undefined,
                            trackElement = this;

                        if (browser.IS_IE8) {
                            trackElement = _globalDocument2['default'].createElement('custom');

                            for (var prop in HTMLTrackElement.prototype) {
                                if (prop !== 'constructor') {
                                    trackElement[prop] = HTMLTrackElement.prototype[prop];
                                }
                            }
                        }

                        var track = new _tracksTextTrack2['default'](options);

                        trackElement.kind = track.kind;
                        trackElement.src = track.src;
                        trackElement.srclang = track.language;
                        trackElement.label = track.label;
                        trackElement['default'] = track['default'];

                        Object.defineProperty(trackElement, 'readyState', {
                            get: function get() {
                                return readyState;
                            }
                        });

                        Object.defineProperty(trackElement, 'track', {
                            get: function get() {
                                return track;
                            }
                        });

                        readyState = NONE;

                        track.addEventListener('loadeddata', function () {
                            readyState = LOADED;

                            trackElement.trigger({
                                type: 'load',
                                target: trackElement
                            });
                        });

                        if (browser.IS_IE8) {
                            return trackElement;
                        }
                    }

                    return HTMLTrackElement;
                })(_eventTarget2['default']);

                HTMLTrackElement.prototype.allowedEvents_ = {
                    load: 'load'
                };

                HTMLTrackElement.NONE = NONE;
                HTMLTrackElement.LOADING = LOADING;
                HTMLTrackElement.LOADED = LOADED;
                HTMLTrackElement.ERROR = ERROR;

                exports['default'] = HTMLTrackElement;
                module.exports = exports['default'];

            },{"../event-target":101,"../tracks/text-track":130,"../utils/browser.js":131,"global/document":1}],124:[function(_dereq_,module,exports){
                /**
                 * @file text-track-cue-list.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                var _utilsBrowserJs = _dereq_('../utils/browser.js');

                var browser = _interopRequireWildcard(_utilsBrowserJs);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                /**
                 * A List of text track cues as defined in:
                 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist
                 *
                 * interface TextTrackCueList {
 *   readonly attribute unsigned long length;
 *   getter TextTrackCue (unsigned long index);
 *   TextTrackCue? getCueById(DOMString id);
 * };
                 *
                 * @param {Array} cues A list of cues to be initialized with
                 * @class TextTrackCueList
                 */

                var TextTrackCueList = (function () {
                    function TextTrackCueList(cues) {
                        _classCallCheck(this, TextTrackCueList);

                        var list = this;

                        if (browser.IS_IE8) {
                            list = _globalDocument2['default'].createElement('custom');

                            for (var prop in TextTrackCueList.prototype) {
                                if (prop !== 'constructor') {
                                    list[prop] = TextTrackCueList.prototype[prop];
                                }
                            }
                        }

                        TextTrackCueList.prototype.setCues_.call(list, cues);

                        Object.defineProperty(list, 'length', {
                            get: function get() {
                                return this.length_;
                            }
                        });

                        if (browser.IS_IE8) {
                            return list;
                        }
                    }

                    /**
                     * A setter for cues in this list
                     *
                     * @param {Array} cues an array of cues
                     * @method setCues_
                     * @private
                     */

                    TextTrackCueList.prototype.setCues_ = function setCues_(cues) {
                        var oldLength = this.length || 0;
                        var i = 0;
                        var l = cues.length;

                        this.cues_ = cues;
                        this.length_ = cues.length;

                        var defineProp = function defineProp(index) {
                            if (!('' + index in this)) {
                                Object.defineProperty(this, '' + index, {
                                    get: function get() {
                                        return this.cues_[index];
                                    }
                                });
                            }
                        };

                        if (oldLength < l) {
                            i = oldLength;

                            for (; i < l; i++) {
                                defineProp.call(this, i);
                            }
                        }
                    };

                    /**
                     * Get a cue that is currently in the Cue list by id
                     *
                     * @param {String} id
                     * @method getCueById
                     * @return {Object} a single cue
                     */

                    TextTrackCueList.prototype.getCueById = function getCueById(id) {
                        var result = null;

                        for (var i = 0, l = this.length; i < l; i++) {
                            var cue = this[i];

                            if (cue.id === id) {
                                result = cue;
                                break;
                            }
                        }

                        return result;
                    };

                    return TextTrackCueList;
                })();

                exports['default'] = TextTrackCueList;
                module.exports = exports['default'];

            },{"../utils/browser.js":131,"global/document":1}],125:[function(_dereq_,module,exports){
                /**
                 * @file text-track-display.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _component = _dereq_('../component');

                var _component2 = _interopRequireDefault(_component);

                var _menuMenuJs = _dereq_('../menu/menu.js');

                var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);

                var _menuMenuItemJs = _dereq_('../menu/menu-item.js');

                var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);

                var _menuMenuButtonJs = _dereq_('../menu/menu-button.js');

                var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);

                var _utilsFnJs = _dereq_('../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var darkGray = '#222';
                var lightGray = '#ccc';
                var fontMap = {
                    monospace: 'monospace',
                    sansSerif: 'sans-serif',
                    serif: 'serif',
                    monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
                    monospaceSerif: '"Courier New", monospace',
                    proportionalSansSerif: 'sans-serif',
                    proportionalSerif: 'serif',
                    casual: '"Comic Sans MS", Impact, fantasy',
                    script: '"Monotype Corsiva", cursive',
                    smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
                };

                /**
                 * The component for displaying text track cues
                 *
                 * @param {Object} player  Main Player
                 * @param {Object=} options Object of option names and values
                 * @param {Function=} ready    Ready callback function
                 * @extends Component
                 * @class TextTrackDisplay
                 */

                var TextTrackDisplay = (function (_Component) {
                    _inherits(TextTrackDisplay, _Component);

                    function TextTrackDisplay(player, options, ready) {
                        _classCallCheck(this, TextTrackDisplay);

                        _Component.call(this, player, options, ready);

                        player.on('loadstart', Fn.bind(this, this.toggleDisplay));
                        player.on('texttrackchange', Fn.bind(this, this.updateDisplay));

                        // This used to be called during player init, but was causing an error
                        // if a track should show by default and the display hadn't loaded yet.
                        // Should probably be moved to an external track loader when we support
                        // tracks that don't need a display.
                        player.ready(Fn.bind(this, function () {
                            if (player.tech_ && player.tech_['featuresNativeTextTracks']) {
                                this.hide();
                                return;
                            }

                            player.on('fullscreenchange', Fn.bind(this, this.updateDisplay));

                            var tracks = this.options_.playerOptions['tracks'] || [];
                            for (var i = 0; i < tracks.length; i++) {
                                var track = tracks[i];
                                this.player_.addRemoteTextTrack(track);
                            }

                            var modes = { 'captions': 1, 'subtitles': 1 };
                            var trackList = this.player_.textTracks();
                            var firstDesc = undefined;
                            var firstCaptions = undefined;

                            if (trackList) {
                                for (var i = 0; i < trackList.length; i++) {
                                    var track = trackList[i];
                                    if (track['default']) {
                                        if (track.kind === 'descriptions' && !firstDesc) {
                                            firstDesc = track;
                                        } else if (track.kind in modes && !firstCaptions) {
                                            firstCaptions = track;
                                        }
                                    }
                                }

                                // We want to show the first default track but captions and subtitles
                                // take precedence over descriptions.
                                // So, display the first default captions or subtitles track
                                // and otherwise the first default descriptions track.
                                if (firstCaptions) {
                                    firstCaptions.mode = 'showing';
                                } else if (firstDesc) {
                                    firstDesc.mode = 'showing';
                                }
                            }
                        }));
                    }

                    /**
                     * Add cue HTML to display
                     *
                     * @param {Number} color Hex number for color, like #f0e
                     * @param {Number} opacity Value for opacity,0.0 - 1.0
                     * @return {RGBAColor} In the form 'rgba(255, 0, 0, 0.3)'
                     * @method constructColor
                     */

                    /**
                     * Toggle display texttracks
                     *
                     * @method toggleDisplay
                     */

                    TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {
                        if (this.player_.tech_ && this.player_.tech_['featuresNativeTextTracks']) {
                            this.hide();
                        } else {
                            this.show();
                        }
                    };

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    TextTrackDisplay.prototype.createEl = function createEl() {
                        return _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-text-track-display'
                        }, {
                            'aria-live': 'assertive',
                            'aria-atomic': 'true'
                        });
                    };

                    /**
                     * Clear display texttracks
                     *
                     * @method clearDisplay
                     */

                    TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {
                        if (typeof _globalWindow2['default']['WebVTT'] === 'function') {
                            _globalWindow2['default']['WebVTT']['processCues'](_globalWindow2['default'], [], this.el_);
                        }
                    };

                    /**
                     * Update display texttracks
                     *
                     * @method updateDisplay
                     */

                    TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {
                        var tracks = this.player_.textTracks();

                        this.clearDisplay();

                        if (!tracks) {
                            return;
                        }

                        // Track display prioritization model: if multiple tracks are 'showing',
                        //  display the first 'subtitles' or 'captions' track which is 'showing',
                        //  otherwise display the first 'descriptions' track which is 'showing'

                        var descriptionsTrack = null;
                        var captionsSubtitlesTrack = null;

                        var i = tracks.length;
                        while (i--) {
                            var track = tracks[i];
                            if (track['mode'] === 'showing') {
                                if (track['kind'] === 'descriptions') {
                                    descriptionsTrack = track;
                                } else {
                                    captionsSubtitlesTrack = track;
                                }
                            }
                        }

                        if (captionsSubtitlesTrack) {
                            this.updateForTrack(captionsSubtitlesTrack);
                        } else if (descriptionsTrack) {
                            this.updateForTrack(descriptionsTrack);
                        }
                    };

                    /**
                     * Add texttrack to texttrack list
                     *
                     * @param {TextTrackObject} track Texttrack object to be added to list
                     * @method updateForTrack
                     */

                    TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {
                        if (typeof _globalWindow2['default']['WebVTT'] !== 'function' || !track['activeCues']) {
                            return;
                        }

                        var overrides = this.player_['textTrackSettings'].getValues();

                        var cues = [];
                        for (var _i = 0; _i < track['activeCues'].length; _i++) {
                            cues.push(track['activeCues'][_i]);
                        }

                        _globalWindow2['default']['WebVTT']['processCues'](_globalWindow2['default'], cues, this.el_);

                        var i = cues.length;
                        while (i--) {
                            var cue = cues[i];
                            if (!cue) {
                                continue;
                            }

                            var cueDiv = cue.displayState;
                            if (overrides.color) {
                                cueDiv.firstChild.style.color = overrides.color;
                            }
                            if (overrides.textOpacity) {
                                tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
                            }
                            if (overrides.backgroundColor) {
                                cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
                            }
                            if (overrides.backgroundOpacity) {
                                tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
                            }
                            if (overrides.windowColor) {
                                if (overrides.windowOpacity) {
                                    tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
                                } else {
                                    cueDiv.style.backgroundColor = overrides.windowColor;
                                }
                            }
                            if (overrides.edgeStyle) {
                                if (overrides.edgeStyle === 'dropshadow') {
                                    cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
                                } else if (overrides.edgeStyle === 'raised') {
                                    cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
                                } else if (overrides.edgeStyle === 'depressed') {
                                    cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
                                } else if (overrides.edgeStyle === 'uniform') {
                                    cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
                                }
                            }
                            if (overrides.fontPercent && overrides.fontPercent !== 1) {
                                var fontSize = _globalWindow2['default'].parseFloat(cueDiv.style.fontSize);
                                cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
                                cueDiv.style.height = 'auto';
                                cueDiv.style.top = 'auto';
                                cueDiv.style.bottom = '2px';
                            }
                            if (overrides.fontFamily && overrides.fontFamily !== 'default') {
                                if (overrides.fontFamily === 'small-caps') {
                                    cueDiv.firstChild.style.fontVariant = 'small-caps';
                                } else {
                                    cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
                                }
                            }
                        }
                    };

                    return TextTrackDisplay;
                })(_component2['default']);

                function constructColor(color, opacity) {
                    return 'rgba(' +
                            // color looks like "#f0e"
                        parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';
                }

                /**
                 * Try to update style
                 * Some style changes will throw an error, particularly in IE8. Those should be noops.
                 *
                 * @param {Element} el The element to be styles
                 * @param {CSSProperty} style The CSS property to be styled
                 * @param {CSSStyle} rule The actual style to be applied to the property
                 * @method tryUpdateStyle
                 */
                function tryUpdateStyle(el, style, rule) {
                    //
                    try {
                        el.style[style] = rule;
                    } catch (e) {}
                }

                _component2['default'].registerComponent('TextTrackDisplay', TextTrackDisplay);
                exports['default'] = TextTrackDisplay;
                module.exports = exports['default'];

            },{"../component":67,"../menu/menu-button.js":106,"../menu/menu-item.js":107,"../menu/menu.js":108,"../utils/fn.js":136,"global/document":1,"global/window":2}],126:[function(_dereq_,module,exports){
                /**
                 * @file text-track-enums.js
                 */

                /**
                 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
                 *
                 * enum TextTrackMode { "disabled",  "hidden",  "showing" };
                 */
                'use strict';

                exports.__esModule = true;
                var TextTrackMode = {
                    disabled: 'disabled',
                    hidden: 'hidden',
                    showing: 'showing'
                };

                /**
                 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackkind
                 *
                 * enum TextTrackKind {
 *   "subtitles",
 *   "captions",
 *   "descriptions",
 *   "chapters",
 *   "metadata"
 * };
                 */
                var TextTrackKind = {
                    subtitles: 'subtitles',
                    captions: 'captions',
                    descriptions: 'descriptions',
                    chapters: 'chapters',
                    metadata: 'metadata'
                };

                /* jshint ignore:start */
// we ignore jshint here because it does not see
// TextTrackMode or TextTrackKind as defined here somehow...
                exports.TextTrackMode = TextTrackMode;
                exports.TextTrackKind = TextTrackKind;

                /* jshint ignore:end */

            },{}],127:[function(_dereq_,module,exports){
                /**
                 * Utilities for capturing text track state and re-creating tracks
                 * based on a capture.
                 *
                 * @file text-track-list-converter.js
                 */

                /**
                 * Examine a single text track and return a JSON-compatible javascript
                 * object that represents the text track's state.
                 * @param track {TextTrackObject} the text track to query
                 * @return {Object} a serializable javascript representation of the
                 * @private
                 */
                'use strict';

                exports.__esModule = true;
                var trackToJson_ = function trackToJson_(track) {
                    var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {
                        if (track[prop]) {
                            acc[prop] = track[prop];
                        }

                        return acc;
                    }, {
                        cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {
                            return {
                                startTime: cue.startTime,
                                endTime: cue.endTime,
                                text: cue.text,
                                id: cue.id
                            };
                        })
                    });

                    return ret;
                };

                /**
                 * Examine a tech and return a JSON-compatible javascript array that
                 * represents the state of all text tracks currently configured. The
                 * return array is compatible with `jsonToTextTracks`.
                 * @param tech {tech} the tech object to query
                 * @return {Array} a serializable javascript representation of the
                 * @function textTracksToJson
                 */
                var textTracksToJson = function textTracksToJson(tech) {

                    var trackEls = tech.$$('track');

                    var trackObjs = Array.prototype.map.call(trackEls, function (t) {
                        return t.track;
                    });
                    var tracks = Array.prototype.map.call(trackEls, function (trackEl) {
                        var json = trackToJson_(trackEl.track);
                        if (trackEl.src) {
                            json.src = trackEl.src;
                        }
                        return json;
                    });

                    return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {
                        return trackObjs.indexOf(track) === -1;
                    }).map(trackToJson_));
                };

                /**
                 * Creates a set of remote text tracks on a tech based on an array of
                 * javascript text track representations.
                 * @param json {Array} an array of text track representation objects,
                 * like those that would be produced by `textTracksToJson`
                 * @param tech {tech} the tech to create text tracks on
                 * @function jsonToTextTracks
                 */
                var jsonToTextTracks = function jsonToTextTracks(json, tech) {
                    json.forEach(function (track) {
                        var addedTrack = tech.addRemoteTextTrack(track).track;
                        if (!track.src && track.cues) {
                            track.cues.forEach(function (cue) {
                                return addedTrack.addCue(cue);
                            });
                        }
                    });

                    return tech.textTracks();
                };

                exports['default'] = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };
                module.exports = exports['default'];

            },{}],128:[function(_dereq_,module,exports){
                /**
                 * @file text-track-list.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _eventTarget = _dereq_('../event-target');

                var _eventTarget2 = _interopRequireDefault(_eventTarget);

                var _utilsFnJs = _dereq_('../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsBrowserJs = _dereq_('../utils/browser.js');

                var browser = _interopRequireWildcard(_utilsBrowserJs);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                /**
                 * A text track list as defined in:
                 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist
                 *
                 * interface TextTrackList : EventTarget {
 *   readonly attribute unsigned long length;
 *   getter TextTrack (unsigned long index);
 *   TextTrack? getTrackById(DOMString id);
 *
 *   attribute EventHandler onchange;
 *   attribute EventHandler onaddtrack;
 *   attribute EventHandler onremovetrack;
 * };
                 *
                 * @param {Track[]} tracks A list of tracks to initialize the list with
                 * @extends EventTarget
                 * @class TextTrackList
                 */

                var TextTrackList = (function (_EventTarget) {
                    _inherits(TextTrackList, _EventTarget);

                    function TextTrackList() {
                        var tracks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

                        _classCallCheck(this, TextTrackList);

                        _EventTarget.call(this);
                        var list = this;

                        if (browser.IS_IE8) {
                            list = _globalDocument2['default'].createElement('custom');

                            for (var prop in TextTrackList.prototype) {
                                if (prop !== 'constructor') {
                                    list[prop] = TextTrackList.prototype[prop];
                                }
                            }
                        }

                        list.tracks_ = [];

                        Object.defineProperty(list, 'length', {
                            get: function get() {
                                return this.tracks_.length;
                            }
                        });

                        for (var i = 0; i < tracks.length; i++) {
                            list.addTrack_(tracks[i]);
                        }

                        if (browser.IS_IE8) {
                            return list;
                        }
                    }

                    /**
                     * change - One or more tracks in the track list have been enabled or disabled.
                     * addtrack - A track has been added to the track list.
                     * removetrack - A track has been removed from the track list.
                     */

                    /**
                     * Add TextTrack from TextTrackList
                     *
                     * @param {TextTrack} track
                     * @method addTrack_
                     * @private
                     */

                    TextTrackList.prototype.addTrack_ = function addTrack_(track) {
                        var index = this.tracks_.length;

                        if (!('' + index in this)) {
                            Object.defineProperty(this, index, {
                                get: function get() {
                                    return this.tracks_[index];
                                }
                            });
                        }

                        track.addEventListener('modechange', Fn.bind(this, function () {
                            this.trigger('change');
                        }));

                        // Do not add duplicate tracks
                        if (this.tracks_.indexOf(track) === -1) {
                            this.tracks_.push(track);
                            this.trigger({
                                track: track,
                                type: 'addtrack'
                            });
                        }
                    };

                    /**
                     * Remove TextTrack from TextTrackList
                     * NOTE: Be mindful of what is passed in as it may be a HTMLTrackElement
                     *
                     * @param {TextTrack} rtrack
                     * @method removeTrack_
                     * @private
                     */

                    TextTrackList.prototype.removeTrack_ = function removeTrack_(rtrack) {
                        var track = undefined;

                        for (var i = 0, l = this.length; i < l; i++) {
                            if (this[i] === rtrack) {
                                track = this[i];
                                if (track.off) {
                                    track.off();
                                }

                                this.tracks_.splice(i, 1);

                                break;
                            }
                        }

                        if (!track) {
                            return;
                        }

                        this.trigger({
                            track: track,
                            type: 'removetrack'
                        });
                    };

                    /**
                     * Get a TextTrack from TextTrackList by a tracks id
                     *
                     * @param {String} id - the id of the track to get
                     * @method getTrackById
                     * @return {TextTrack}
                     * @private
                     */

                    TextTrackList.prototype.getTrackById = function getTrackById(id) {
                        var result = null;

                        for (var i = 0, l = this.length; i < l; i++) {
                            var track = this[i];

                            if (track.id === id) {
                                result = track;
                                break;
                            }
                        }

                        return result;
                    };

                    return TextTrackList;
                })(_eventTarget2['default']);

                TextTrackList.prototype.allowedEvents_ = {
                    change: 'change',
                    addtrack: 'addtrack',
                    removetrack: 'removetrack'
                };

// emulate attribute EventHandler support to allow for feature detection
                for (var _event in TextTrackList.prototype.allowedEvents_) {
                    TextTrackList.prototype['on' + _event] = null;
                }

                exports['default'] = TextTrackList;
                module.exports = exports['default'];

            },{"../event-target":101,"../utils/browser.js":131,"../utils/fn.js":136,"global/document":1}],129:[function(_dereq_,module,exports){
                /**
                 * @file text-track-settings.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _component = _dereq_('../component');

                var _component2 = _interopRequireDefault(_component);

                var _utilsEventsJs = _dereq_('../utils/events.js');

                var Events = _interopRequireWildcard(_utilsEventsJs);

                var _utilsFnJs = _dereq_('../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsLogJs = _dereq_('../utils/log.js');

                var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

                var _safeJsonParseTuple = _dereq_('safe-json-parse/tuple');

                var _safeJsonParseTuple2 = _interopRequireDefault(_safeJsonParseTuple);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                /**
                 * Manipulate settings of texttracks
                 *
                 * @param {Object} player  Main Player
                 * @param {Object=} options Object of option names and values
                 * @extends Component
                 * @class TextTrackSettings
                 */

                var TextTrackSettings = (function (_Component) {
                    _inherits(TextTrackSettings, _Component);

                    function TextTrackSettings(player, options) {
                        _classCallCheck(this, TextTrackSettings);

                        _Component.call(this, player, options);
                        this.hide();

                        // Grab `persistTextTrackSettings` from the player options if not passed in child options
                        if (options.persistTextTrackSettings === undefined) {
                            this.options_.persistTextTrackSettings = this.options_.playerOptions.persistTextTrackSettings;
                        }

                        Events.on(this.$('.vjs-done-button'), 'click', Fn.bind(this, function () {
                            this.saveSettings();
                            this.hide();
                        }));

                        Events.on(this.$('.vjs-default-button'), 'click', Fn.bind(this, function () {
                            this.$('.vjs-fg-color > select').selectedIndex = 0;
                            this.$('.vjs-bg-color > select').selectedIndex = 0;
                            this.$('.window-color > select').selectedIndex = 0;
                            this.$('.vjs-text-opacity > select').selectedIndex = 0;
                            this.$('.vjs-bg-opacity > select').selectedIndex = 0;
                            this.$('.vjs-window-opacity > select').selectedIndex = 0;
                            this.$('.vjs-edge-style select').selectedIndex = 0;
                            this.$('.vjs-font-family select').selectedIndex = 0;
                            this.$('.vjs-font-percent select').selectedIndex = 2;
                            this.updateDisplay();
                        }));

                        Events.on(this.$('.vjs-fg-color > select'), 'change', Fn.bind(this, this.updateDisplay));
                        Events.on(this.$('.vjs-bg-color > select'), 'change', Fn.bind(this, this.updateDisplay));
                        Events.on(this.$('.window-color > select'), 'change', Fn.bind(this, this.updateDisplay));
                        Events.on(this.$('.vjs-text-opacity > select'), 'change', Fn.bind(this, this.updateDisplay));
                        Events.on(this.$('.vjs-bg-opacity > select'), 'change', Fn.bind(this, this.updateDisplay));
                        Events.on(this.$('.vjs-window-opacity > select'), 'change', Fn.bind(this, this.updateDisplay));
                        Events.on(this.$('.vjs-font-percent select'), 'change', Fn.bind(this, this.updateDisplay));
                        Events.on(this.$('.vjs-edge-style select'), 'change', Fn.bind(this, this.updateDisplay));
                        Events.on(this.$('.vjs-font-family select'), 'change', Fn.bind(this, this.updateDisplay));

                        if (this.options_.persistTextTrackSettings) {
                            this.restoreSettings();
                        }
                    }

                    /**
                     * Create the component's DOM element
                     *
                     * @return {Element}
                     * @method createEl
                     */

                    TextTrackSettings.prototype.createEl = function createEl() {
                        return _Component.prototype.createEl.call(this, 'div', {
                            className: 'vjs-caption-settings vjs-modal-overlay',
                            innerHTML: captionOptionsMenuTemplate()
                        });
                    };

                    /**
                     * Get texttrack settings
                     * Settings are
                     * .vjs-edge-style
                     * .vjs-font-family
                     * .vjs-fg-color
                     * .vjs-text-opacity
                     * .vjs-bg-color
                     * .vjs-bg-opacity
                     * .window-color
                     * .vjs-window-opacity
                     *
                     * @return {Object}
                     * @method getValues
                     */

                    TextTrackSettings.prototype.getValues = function getValues() {
                        var textEdge = getSelectedOptionValue(this.$('.vjs-edge-style select'));
                        var fontFamily = getSelectedOptionValue(this.$('.vjs-font-family select'));
                        var fgColor = getSelectedOptionValue(this.$('.vjs-fg-color > select'));
                        var textOpacity = getSelectedOptionValue(this.$('.vjs-text-opacity > select'));
                        var bgColor = getSelectedOptionValue(this.$('.vjs-bg-color > select'));
                        var bgOpacity = getSelectedOptionValue(this.$('.vjs-bg-opacity > select'));
                        var windowColor = getSelectedOptionValue(this.$('.window-color > select'));
                        var windowOpacity = getSelectedOptionValue(this.$('.vjs-window-opacity > select'));
                        var fontPercent = _globalWindow2['default']['parseFloat'](getSelectedOptionValue(this.$('.vjs-font-percent > select')));

                        var result = {
                            'backgroundOpacity': bgOpacity,
                            'textOpacity': textOpacity,
                            'windowOpacity': windowOpacity,
                            'edgeStyle': textEdge,
                            'fontFamily': fontFamily,
                            'color': fgColor,
                            'backgroundColor': bgColor,
                            'windowColor': windowColor,
                            'fontPercent': fontPercent
                        };
                        for (var _name in result) {
                            if (result[_name] === '' || result[_name] === 'none' || _name === 'fontPercent' && result[_name] === 1.00) {
                                delete result[_name];
                            }
                        }
                        return result;
                    };

                    /**
                     * Set texttrack settings
                     * Settings are
                     * .vjs-edge-style
                     * .vjs-font-family
                     * .vjs-fg-color
                     * .vjs-text-opacity
                     * .vjs-bg-color
                     * .vjs-bg-opacity
                     * .window-color
                     * .vjs-window-opacity
                     *
                     * @param {Object} values Object with texttrack setting values
                     * @method setValues
                     */

                    TextTrackSettings.prototype.setValues = function setValues(values) {
                        setSelectedOption(this.$('.vjs-edge-style select'), values.edgeStyle);
                        setSelectedOption(this.$('.vjs-font-family select'), values.fontFamily);
                        setSelectedOption(this.$('.vjs-fg-color > select'), values.color);
                        setSelectedOption(this.$('.vjs-text-opacity > select'), values.textOpacity);
                        setSelectedOption(this.$('.vjs-bg-color > select'), values.backgroundColor);
                        setSelectedOption(this.$('.vjs-bg-opacity > select'), values.backgroundOpacity);
                        setSelectedOption(this.$('.window-color > select'), values.windowColor);
                        setSelectedOption(this.$('.vjs-window-opacity > select'), values.windowOpacity);

                        var fontPercent = values.fontPercent;

                        if (fontPercent) {
                            fontPercent = fontPercent.toFixed(2);
                        }

                        setSelectedOption(this.$('.vjs-font-percent > select'), fontPercent);
                    };

                    /**
                     * Restore texttrack settings
                     *
                     * @method restoreSettings
                     */

                    TextTrackSettings.prototype.restoreSettings = function restoreSettings() {
                        var err = undefined,
                            values = undefined;

                        try {
                            var _safeParseTuple = _safeJsonParseTuple2['default'](_globalWindow2['default'].localStorage.getItem('vjs-text-track-settings'));

                            err = _safeParseTuple[0];
                            values = _safeParseTuple[1];

                            if (err) {
                                _utilsLogJs2['default'].error(err);
                            }
                        } catch (e) {
                            _utilsLogJs2['default'].warn(e);
                        }

                        if (values) {
                            this.setValues(values);
                        }
                    };

                    /**
                     * Save texttrack settings to local storage
                     *
                     * @method saveSettings
                     */

                    TextTrackSettings.prototype.saveSettings = function saveSettings() {
                        if (!this.options_.persistTextTrackSettings) {
                            return;
                        }

                        var values = this.getValues();
                        try {
                            if (Object.getOwnPropertyNames(values).length > 0) {
                                _globalWindow2['default'].localStorage.setItem('vjs-text-track-settings', JSON.stringify(values));
                            } else {
                                _globalWindow2['default'].localStorage.removeItem('vjs-text-track-settings');
                            }
                        } catch (e) {
                            _utilsLogJs2['default'].warn(e);
                        }
                    };

                    /**
                     * Update display of texttrack settings
                     *
                     * @method updateDisplay
                     */

                    TextTrackSettings.prototype.updateDisplay = function updateDisplay() {
                        var ttDisplay = this.player_.getChild('textTrackDisplay');
                        if (ttDisplay) {
                            ttDisplay.updateDisplay();
                        }
                    };

                    return TextTrackSettings;
                })(_component2['default']);

                _component2['default'].registerComponent('TextTrackSettings', TextTrackSettings);

                function getSelectedOptionValue(target) {
                    var selectedOption = undefined;
                    // not all browsers support selectedOptions, so, fallback to options
                    if (target.selectedOptions) {
                        selectedOption = target.selectedOptions[0];
                    } else if (target.options) {
                        selectedOption = target.options[target.options.selectedIndex];
                    }

                    return selectedOption.value;
                }

                function setSelectedOption(target, value) {
                    if (!value) {
                        return;
                    }

                    var i = undefined;
                    for (i = 0; i < target.options.length; i++) {
                        var option = target.options[i];
                        if (option.value === value) {
                            break;
                        }
                    }

                    target.selectedIndex = i;
                }

                function captionOptionsMenuTemplate() {
                    var template = '<div class="vjs-tracksettings">\n      <div class="vjs-tracksettings-colors">\n        <div class="vjs-fg-color vjs-tracksetting">\n            <label class="vjs-label">Foreground</label>\n            <select>\n              <option value="">---</option>\n              <option value="#FFF">White</option>\n              <option value="#000">Black</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-text-opacity vjs-opacity">\n              <select>\n                <option value="">---</option>\n                <option value="1">Opaque</option>\n                <option value="0.5">Semi-Opaque</option>\n              </select>\n            </span>\n        </div> <!-- vjs-fg-color -->\n        <div class="vjs-bg-color vjs-tracksetting">\n            <label class="vjs-label">Background</label>\n            <select>\n              <option value="">---</option>\n              <option value="#FFF">White</option>\n              <option value="#000">Black</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-bg-opacity vjs-opacity">\n                <select>\n                  <option value="">---</option>\n                  <option value="1">Opaque</option>\n                  <option value="0.5">Semi-Transparent</option>\n                  <option value="0">Transparent</option>\n                </select>\n            </span>\n        </div> <!-- vjs-bg-color -->\n        <div class="window-color vjs-tracksetting">\n            <label class="vjs-label">Window</label>\n            <select>\n              <option value="">---</option>\n              <option value="#FFF">White</option>\n              <option value="#000">Black</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-window-opacity vjs-opacity">\n                <select>\n                  <option value="">---</option>\n                  <option value="1">Opaque</option>\n                  <option value="0.5">Semi-Transparent</option>\n                  <option value="0">Transparent</option>\n                </select>\n            </span>\n        </div> <!-- vjs-window-color -->\n      </div> <!-- vjs-tracksettings -->\n      <div class="vjs-tracksettings-font">\n        <div class="vjs-font-percent vjs-tracksetting">\n          <label class="vjs-label">Font Size</label>\n          <select>\n            <option value="0.50">50%</option>\n            <option value="0.75">75%</option>\n            <option value="1.00" selected>100%</option>\n            <option value="1.25">125%</option>\n            <option value="1.50">150%</option>\n            <option value="1.75">175%</option>\n            <option value="2.00">200%</option>\n            <option value="3.00">300%</option>\n            <option value="4.00">400%</option>\n          </select>\n        </div> <!-- vjs-font-percent -->\n        <div class="vjs-edge-style vjs-tracksetting">\n          <label class="vjs-label">Text Edge Style</label>\n          <select>\n            <option value="none">None</option>\n            <option value="raised">Raised</option>\n            <option value="depressed">Depressed</option>\n            <option value="uniform">Uniform</option>\n            <option value="dropshadow">Dropshadow</option>\n          </select>\n        </div> <!-- vjs-edge-style -->\n        <div class="vjs-font-family vjs-tracksetting">\n          <label class="vjs-label">Font Family</label>\n          <select>\n            <option value="">Default</option>\n            <option value="monospaceSerif">Monospace Serif</option>\n            <option value="proportionalSerif">Proportional Serif</option>\n            <option value="monospaceSansSerif">Monospace Sans-Serif</option>\n            <option value="proportionalSansSerif">Proportional Sans-Serif</option>\n            <option value="casual">Casual</option>\n            <option value="script">Script</option>\n            <option value="small-caps">Small Caps</option>\n          </select>\n        </div> <!-- vjs-font-family -->\n      </div>\n    </div>\n    <div class="vjs-tracksettings-controls">\n      <button class="vjs-default-button">Defaults</button>\n      <button class="vjs-done-button">Done</button>\n    </div>';

                    return template;
                }

                exports['default'] = TextTrackSettings;
                module.exports = exports['default'];

            },{"../component":67,"../utils/events.js":135,"../utils/fn.js":136,"../utils/log.js":139,"global/window":2,"safe-json-parse/tuple":54}],130:[function(_dereq_,module,exports){
                /**
                 * @file text-track.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

                function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

                var _textTrackCueList = _dereq_('./text-track-cue-list');

                var _textTrackCueList2 = _interopRequireDefault(_textTrackCueList);

                var _utilsFnJs = _dereq_('../utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _utilsGuidJs = _dereq_('../utils/guid.js');

                var Guid = _interopRequireWildcard(_utilsGuidJs);

                var _utilsBrowserJs = _dereq_('../utils/browser.js');

                var browser = _interopRequireWildcard(_utilsBrowserJs);

                var _textTrackEnums = _dereq_('./text-track-enums');

                var TextTrackEnum = _interopRequireWildcard(_textTrackEnums);

                var _utilsLogJs = _dereq_('../utils/log.js');

                var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

                var _eventTarget = _dereq_('../event-target');

                var _eventTarget2 = _interopRequireDefault(_eventTarget);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _utilsUrlJs = _dereq_('../utils/url.js');

                var _xhr = _dereq_('xhr');

                var _xhr2 = _interopRequireDefault(_xhr);

                /**
                 * takes a webvtt file contents and parses it into cues
                 *
                 * @param {String} srcContent webVTT file contents
                 * @param {Track} track track to addcues to
                 */
                var parseCues = function parseCues(srcContent, track) {
                    var parser = new _globalWindow2['default'].WebVTT.Parser(_globalWindow2['default'], _globalWindow2['default'].vttjs, _globalWindow2['default'].WebVTT.StringDecoder());
                    var errors = [];

                    parser.oncue = function (cue) {
                        track.addCue(cue);
                    };

                    parser.onparsingerror = function (error) {
                        errors.push(error);
                    };

                    parser.onflush = function () {
                        track.trigger({
                            type: 'loadeddata',
                            target: track
                        });
                    };

                    parser.parse(srcContent);
                    if (errors.length > 0) {
                        if (console.groupCollapsed) {
                            console.groupCollapsed('Text Track parsing errors for ' + track.src);
                        }
                        errors.forEach(function (error) {
                            return _utilsLogJs2['default'].error(error);
                        });
                        if (console.groupEnd) {
                            console.groupEnd();
                        }
                    }

                    parser.flush();
                };

                /**
                 * load a track from a  specifed url
                 *
                 * @param {String} src url to load track from
                 * @param {Track} track track to addcues to
                 */
                var loadTrack = function loadTrack(src, track) {
                    var opts = {
                        uri: src
                    };
                    var crossOrigin = _utilsUrlJs.isCrossOrigin(src);

                    if (crossOrigin) {
                        opts.cors = crossOrigin;
                    }

                    _xhr2['default'](opts, Fn.bind(this, function (err, response, responseBody) {
                        if (err) {
                            return _utilsLogJs2['default'].error(err, response);
                        }

                        track.loaded_ = true;

                        // Make sure that vttjs has loaded, otherwise, wait till it finished loading
                        // NOTE: this is only used for the alt/video.novtt.js build
                        if (typeof _globalWindow2['default'].WebVTT !== 'function') {
                            if (track.tech_) {
                                (function () {
                                    var loadHandler = function loadHandler() {
                                        return parseCues(responseBody, track);
                                    };
                                    track.tech_.on('vttjsloaded', loadHandler);
                                    track.tech_.on('vttjserror', function () {
                                        _utilsLogJs2['default'].error('vttjs failed to load, stopping trying to process ' + track.src);
                                        track.tech_.off('vttjsloaded', loadHandler);
                                    });
                                })();
                            }
                        } else {
                            parseCues(responseBody, track);
                        }
                    }));
                };

                /**
                 * A single text track as defined in:
                 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack
                 *
                 * interface TextTrack : EventTarget {
 *   readonly attribute TextTrackKind kind;
 *   readonly attribute DOMString label;
 *   readonly attribute DOMString language;
 *
 *   readonly attribute DOMString id;
 *   readonly attribute DOMString inBandMetadataTrackDispatchType;
 *
 *   attribute TextTrackMode mode;
 *
 *   readonly attribute TextTrackCueList? cues;
 *   readonly attribute TextTrackCueList? activeCues;
 *
 *   void addCue(TextTrackCue cue);
 *   void removeCue(TextTrackCue cue);
 *
 *   attribute EventHandler oncuechange;
 * };
                 *
                 * @param {Object=} options Object of option names and values
                 * @extends EventTarget
                 * @class TextTrack
                 */

                var TextTrack = (function (_EventTarget) {
                    _inherits(TextTrack, _EventTarget);

                    function TextTrack() {
                        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        _classCallCheck(this, TextTrack);

                        _EventTarget.call(this);
                        if (!options.tech) {
                            throw new Error('A tech was not provided.');
                        }

                        var tt = this;

                        if (browser.IS_IE8) {
                            tt = _globalDocument2['default'].createElement('custom');

                            for (var prop in TextTrack.prototype) {
                                if (prop !== 'constructor') {
                                    tt[prop] = TextTrack.prototype[prop];
                                }
                            }
                        }

                        tt.tech_ = options.tech;

                        var mode = TextTrackEnum.TextTrackMode[options.mode] || 'disabled';
                        var kind = TextTrackEnum.TextTrackKind[options.kind] || 'subtitles';
                        var default_ = options['default'];
                        var label = options.label || '';
                        var language = options.language || options.srclang || '';
                        var id = options.id || 'vjs_text_track_' + Guid.newGUID();

                        if (kind === 'metadata' || kind === 'chapters') {
                            mode = 'hidden';
                        }

                        tt.cues_ = [];
                        tt.activeCues_ = [];

                        var cues = new _textTrackCueList2['default'](tt.cues_);
                        var activeCues = new _textTrackCueList2['default'](tt.activeCues_);
                        var changed = false;
                        var timeupdateHandler = Fn.bind(tt, function () {
                            this.activeCues;
                            if (changed) {
                                this.trigger('cuechange');
                                changed = false;
                            }
                        });

                        if (mode !== 'disabled') {
                            tt.tech_.on('timeupdate', timeupdateHandler);
                        }

                        Object.defineProperty(tt, 'kind', {
                            get: function get() {
                                return kind;
                            },
                            set: function set() {}
                        });

                        Object.defineProperty(tt, 'label', {
                            get: function get() {
                                return label;
                            },
                            set: function set() {}
                        });

                        Object.defineProperty(tt, 'language', {
                            get: function get() {
                                return language;
                            },
                            set: function set() {}
                        });

                        Object.defineProperty(tt, 'id', {
                            get: function get() {
                                return id;
                            },
                            set: function set() {}
                        });

                        Object.defineProperty(tt, 'default', {
                            get: function get() {
                                return default_;
                            },
                            set: function set() {}
                        });

                        Object.defineProperty(tt, 'mode', {
                            get: function get() {
                                return mode;
                            },
                            set: function set(newMode) {
                                if (!TextTrackEnum.TextTrackMode[newMode]) {
                                    return;
                                }
                                mode = newMode;
                                if (mode === 'showing') {
                                    this.tech_.on('timeupdate', timeupdateHandler);
                                }
                                this.trigger('modechange');
                            }
                        });

                        Object.defineProperty(tt, 'cues', {
                            get: function get() {
                                if (!this.loaded_) {
                                    return null;
                                }

                                return cues;
                            },
                            set: function set() {}
                        });

                        Object.defineProperty(tt, 'activeCues', {
                            get: function get() {
                                if (!this.loaded_) {
                                    return null;
                                }

                                // nothing to do
                                if (this.cues.length === 0) {
                                    return activeCues;
                                }

                                var ct = this.tech_.currentTime();
                                var active = [];

                                for (var i = 0, l = this.cues.length; i < l; i++) {
                                    var cue = this.cues[i];

                                    if (cue.startTime <= ct && cue.endTime >= ct) {
                                        active.push(cue);
                                    } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {
                                        active.push(cue);
                                    }
                                }

                                changed = false;

                                if (active.length !== this.activeCues_.length) {
                                    changed = true;
                                } else {
                                    for (var i = 0; i < active.length; i++) {
                                        if (this.activeCues_.indexOf(active[i]) === -1) {
                                            changed = true;
                                        }
                                    }
                                }

                                this.activeCues_ = active;
                                activeCues.setCues_(this.activeCues_);

                                return activeCues;
                            },
                            set: function set() {}
                        });

                        if (options.src) {
                            tt.src = options.src;
                            loadTrack(options.src, tt);
                        } else {
                            tt.loaded_ = true;
                        }

                        if (browser.IS_IE8) {
                            return tt;
                        }
                    }

                    /**
                     * cuechange - One or more cues in the track have become active or stopped being active.
                     */

                    /**
                     * add a cue to the internal list of cues
                     *
                     * @param {Object} cue the cue to add to our internal list
                     * @method addCue
                     */

                    TextTrack.prototype.addCue = function addCue(cue) {
                        var tracks = this.tech_.textTracks();

                        if (tracks) {
                            for (var i = 0; i < tracks.length; i++) {
                                if (tracks[i] !== this) {
                                    tracks[i].removeCue(cue);
                                }
                            }
                        }

                        this.cues_.push(cue);
                        this.cues.setCues_(this.cues_);
                    };

                    /**
                     * remvoe a cue from our internal list
                     *
                     * @param {Object} removeCue the cue to remove from our internal list
                     * @method removeCue
                     */

                    TextTrack.prototype.removeCue = function removeCue(_removeCue) {
                        var removed = false;

                        for (var i = 0, l = this.cues_.length; i < l; i++) {
                            var cue = this.cues_[i];

                            if (cue === _removeCue) {
                                this.cues_.splice(i, 1);
                                removed = true;
                            }
                        }

                        if (removed) {
                            this.cues.setCues_(this.cues_);
                        }
                    };

                    return TextTrack;
                })(_eventTarget2['default']);

                TextTrack.prototype.allowedEvents_ = {
                    cuechange: 'cuechange'
                };

                exports['default'] = TextTrack;
                module.exports = exports['default'];

            },{"../event-target":101,"../utils/browser.js":131,"../utils/fn.js":136,"../utils/guid.js":138,"../utils/log.js":139,"../utils/url.js":144,"./text-track-cue-list":124,"./text-track-enums":126,"global/document":1,"global/window":2,"xhr":56}],131:[function(_dereq_,module,exports){
                /**
                 * @file browser.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var USER_AGENT = _globalWindow2['default'].navigator.userAgent;
                var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
                var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;

                /*
                 * Device is an iPhone
                 *
                 * @type {Boolean}
                 * @constant
                 * @private
                 */
                var IS_IPAD = /iPad/i.test(USER_AGENT);

                exports.IS_IPAD = IS_IPAD;
// The Facebook app's UIWebView identifies as both an iPhone and iPad, so
// to identify iPhones, we need to exclude iPads.
// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
                var IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
                exports.IS_IPHONE = IS_IPHONE;
                var IS_IPOD = /iPod/i.test(USER_AGENT);
                exports.IS_IPOD = IS_IPOD;
                var IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;

                exports.IS_IOS = IS_IOS;
                var IOS_VERSION = (function () {
                    var match = USER_AGENT.match(/OS (\d+)_/i);
                    if (match && match[1]) {
                        return match[1];
                    }
                })();

                exports.IOS_VERSION = IOS_VERSION;
                var IS_ANDROID = /Android/i.test(USER_AGENT);
                exports.IS_ANDROID = IS_ANDROID;
                var ANDROID_VERSION = (function () {
                    // This matches Android Major.Minor.Patch versions
                    // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
                    var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i),
                        major,
                        minor;

                    if (!match) {
                        return null;
                    }

                    major = match[1] && parseFloat(match[1]);
                    minor = match[2] && parseFloat(match[2]);

                    if (major && minor) {
                        return parseFloat(match[1] + '.' + match[2]);
                    } else if (major) {
                        return major;
                    } else {
                        return null;
                    }
                })();
                exports.ANDROID_VERSION = ANDROID_VERSION;
// Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
                var IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;
                exports.IS_OLD_ANDROID = IS_OLD_ANDROID;
                var IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;

                exports.IS_NATIVE_ANDROID = IS_NATIVE_ANDROID;
                var IS_FIREFOX = /Firefox/i.test(USER_AGENT);
                exports.IS_FIREFOX = IS_FIREFOX;
                var IS_EDGE = /Edge/i.test(USER_AGENT);
                exports.IS_EDGE = IS_EDGE;
                var IS_CHROME = !IS_EDGE && /Chrome/i.test(USER_AGENT);
                exports.IS_CHROME = IS_CHROME;
                var IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);

                exports.IS_IE8 = IS_IE8;
                var TOUCH_ENABLED = !!('ontouchstart' in _globalWindow2['default'] || _globalWindow2['default'].DocumentTouch && _globalDocument2['default'] instanceof _globalWindow2['default'].DocumentTouch);
                exports.TOUCH_ENABLED = TOUCH_ENABLED;
                var BACKGROUND_SIZE_SUPPORTED = ('backgroundSize' in _globalDocument2['default'].createElement('video').style);
                exports.BACKGROUND_SIZE_SUPPORTED = BACKGROUND_SIZE_SUPPORTED;

            },{"global/document":1,"global/window":2}],132:[function(_dereq_,module,exports){
                /**
                 * @file buffer.js
                 */
                'use strict';

                exports.__esModule = true;
                exports.bufferedPercent = bufferedPercent;

                var _timeRangesJs = _dereq_('./time-ranges.js');

                /**
                 * Compute how much your video has been buffered
                 *
                 * @param  {Object} Buffered object
                 * @param  {Number} Total duration
                 * @return {Number} Percent buffered of the total duration
                 * @private
                 * @function bufferedPercent
                 */

                function bufferedPercent(buffered, duration) {
                    var bufferedDuration = 0,
                        start,
                        end;

                    if (!duration) {
                        return 0;
                    }

                    if (!buffered || !buffered.length) {
                        buffered = _timeRangesJs.createTimeRange(0, 0);
                    }

                    for (var i = 0; i < buffered.length; i++) {
                        start = buffered.start(i);
                        end = buffered.end(i);

                        // buffered end can be bigger than duration by a very small fraction
                        if (end > duration) {
                            end = duration;
                        }

                        bufferedDuration += end - start;
                    }

                    return bufferedDuration / duration;
                }

            },{"./time-ranges.js":142}],133:[function(_dereq_,module,exports){
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var _logJs = _dereq_('./log.js');

                var _logJs2 = _interopRequireDefault(_logJs);

                /**
                 * Object containing the default behaviors for available handler methods.
                 *
                 * @private
                 * @type {Object}
                 */
                var defaultBehaviors = {
                    get: function get(obj, key) {
                        return obj[key];
                    },
                    set: function set(obj, key, value) {
                        obj[key] = value;
                        return true;
                    }
                };

                /**
                 * Expose private objects publicly using a Proxy to log deprecation warnings.
                 *
                 * Browsers that do not support Proxy objects will simply return the `target`
                 * object, so it can be directly exposed.
                 *
                 * @param {Object} target The target object.
                 * @param {Object} messages Messages to display from a Proxy. Only operations
                 *                          with an associated message will be proxied.
                 * @param {String} [messages.get]
                 * @param {String} [messages.set]
                 * @return {Object} A Proxy if supported or the `target` argument.
                 */

                exports['default'] = function (target) {
                    var messages = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                    if (typeof Proxy === 'function') {
                        var _ret = (function () {
                            var handler = {};

                            // Build a handler object based on those keys that have both messages
                            // and default behaviors.
                            Object.keys(messages).forEach(function (key) {
                                if (defaultBehaviors.hasOwnProperty(key)) {
                                    handler[key] = function () {
                                        _logJs2['default'].warn(messages[key]);
                                        return defaultBehaviors[key].apply(this, arguments);
                                    };
                                }
                            });

                            return {
                                v: new Proxy(target, handler)
                            };
                        })();

                        if (typeof _ret === 'object') return _ret.v;
                    }
                    return target;
                };

                module.exports = exports['default'];

            },{"./log.js":139}],134:[function(_dereq_,module,exports){
                /**
                 * @file dom.js
                 */
                'use strict';

                exports.__esModule = true;
                exports.getEl = getEl;
                exports.createEl = createEl;
                exports.textContent = textContent;
                exports.insertElFirst = insertElFirst;
                exports.getElData = getElData;
                exports.hasElData = hasElData;
                exports.removeElData = removeElData;
                exports.hasElClass = hasElClass;
                exports.addElClass = addElClass;
                exports.removeElClass = removeElClass;
                exports.toggleElClass = toggleElClass;
                exports.setElAttributes = setElAttributes;
                exports.getElAttributes = getElAttributes;
                exports.blockTextSelection = blockTextSelection;
                exports.unblockTextSelection = unblockTextSelection;
                exports.findElPosition = findElPosition;
                exports.getPointerPosition = getPointerPosition;
                exports.isEl = isEl;
                exports.isTextNode = isTextNode;
                exports.emptyEl = emptyEl;
                exports.normalizeContent = normalizeContent;
                exports.appendContent = appendContent;
                exports.insertContent = insertContent;

                var _templateObject = _taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _guidJs = _dereq_('./guid.js');

                var Guid = _interopRequireWildcard(_guidJs);

                var _logJs = _dereq_('./log.js');

                var _logJs2 = _interopRequireDefault(_logJs);

                var _tsml = _dereq_('tsml');

                var _tsml2 = _interopRequireDefault(_tsml);

                /**
                 * Detect if a value is a string with any non-whitespace characters.
                 *
                 * @param  {String} str
                 * @return {Boolean}
                 */
                function isNonBlankString(str) {
                    return typeof str === 'string' && /\S/.test(str);
                }

                /**
                 * Throws an error if the passed string has whitespace. This is used by
                 * class methods to be relatively consistent with the classList API.
                 *
                 * @param  {String} str
                 * @return {Boolean}
                 */
                function throwIfWhitespace(str) {
                    if (/\s/.test(str)) {
                        throw new Error('class has illegal whitespace characters');
                    }
                }

                /**
                 * Produce a regular expression for matching a class name.
                 *
                 * @param  {String} className
                 * @return {RegExp}
                 */
                function classRegExp(className) {
                    return new RegExp('(^|\\s)' + className + '($|\\s)');
                }

                /**
                 * Creates functions to query the DOM using a given method.
                 *
                 * @function createQuerier
                 * @private
                 * @param  {String} method
                 * @return {Function}
                 */
                function createQuerier(method) {
                    return function (selector, context) {
                        if (!isNonBlankString(selector)) {
                            return _globalDocument2['default'][method](null);
                        }
                        if (isNonBlankString(context)) {
                            context = _globalDocument2['default'].querySelector(context);
                        }
                        return (isEl(context) ? context : _globalDocument2['default'])[method](selector);
                    };
                }

                /**
                 * Shorthand for document.getElementById()
                 * Also allows for CSS (jQuery) ID syntax. But nothing other than IDs.
                 *
                 * @param  {String} id  Element ID
                 * @return {Element}    Element with supplied ID
                 * @function getEl
                 */

                function getEl(id) {
                    if (id.indexOf('#') === 0) {
                        id = id.slice(1);
                    }

                    return _globalDocument2['default'].getElementById(id);
                }

                /**
                 * Creates an element and applies properties.
                 *
                 * @param  {String} [tagName='div'] Name of tag to be created.
                 * @param  {Object} [properties={}] Element properties to be applied.
                 * @param  {Object} [attributes={}] Element attributes to be applied.
                 * @return {Element}
                 * @function createEl
                 */

                function createEl() {
                    var tagName = arguments.length <= 0 || arguments[0] === undefined ? 'div' : arguments[0];
                    var properties = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                    var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                    var el = _globalDocument2['default'].createElement(tagName);

                    Object.getOwnPropertyNames(properties).forEach(function (propName) {
                        var val = properties[propName];

                        // See #2176
                        // We originally were accepting both properties and attributes in the
                        // same object, but that doesn't work so well.
                        if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {
                            _logJs2['default'].warn(_tsml2['default'](_templateObject, propName, val));
                            el.setAttribute(propName, val);
                        } else {
                            el[propName] = val;
                        }
                    });

                    Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
                        var val = attributes[attrName];
                        el.setAttribute(attrName, attributes[attrName]);
                    });

                    return el;
                }

                /**
                 * Injects text into an element, replacing any existing contents entirely.
                 *
                 * @param  {Element} el
                 * @param  {String} text
                 * @return {Element}
                 * @function textContent
                 */

                function textContent(el, text) {
                    if (typeof el.textContent === 'undefined') {
                        el.innerText = text;
                    } else {
                        el.textContent = text;
                    }
                }

                /**
                 * Insert an element as the first child node of another
                 *
                 * @param  {Element} child   Element to insert
                 * @param  {Element} parent Element to insert child into
                 * @private
                 * @function insertElFirst
                 */

                function insertElFirst(child, parent) {
                    if (parent.firstChild) {
                        parent.insertBefore(child, parent.firstChild);
                    } else {
                        parent.appendChild(child);
                    }
                }

                /**
                 * Element Data Store. Allows for binding data to an element without putting it directly on the element.
                 * Ex. Event listeners are stored here.
                 * (also from jsninja.com, slightly modified and updated for closure compiler)
                 *
                 * @type {Object}
                 * @private
                 */
                var elData = {};

                /*
                 * Unique attribute name to store an element's guid in
                 *
                 * @type {String}
                 * @constant
                 * @private
                 */
                var elIdAttr = 'vdata' + new Date().getTime();

                /**
                 * Returns the cache object where data for an element is stored
                 *
                 * @param  {Element} el Element to store data for.
                 * @return {Object}
                 * @function getElData
                 */

                function getElData(el) {
                    var id = el[elIdAttr];

                    if (!id) {
                        id = el[elIdAttr] = Guid.newGUID();
                    }

                    if (!elData[id]) {
                        elData[id] = {};
                    }

                    return elData[id];
                }

                /**
                 * Returns whether or not an element has cached data
                 *
                 * @param  {Element} el A dom element
                 * @return {Boolean}
                 * @private
                 * @function hasElData
                 */

                function hasElData(el) {
                    var id = el[elIdAttr];

                    if (!id) {
                        return false;
                    }

                    return !!Object.getOwnPropertyNames(elData[id]).length;
                }

                /**
                 * Delete data for the element from the cache and the guid attr from getElementById
                 *
                 * @param  {Element} el Remove data for an element
                 * @private
                 * @function removeElData
                 */

                function removeElData(el) {
                    var id = el[elIdAttr];

                    if (!id) {
                        return;
                    }

                    // Remove all stored data
                    delete elData[id];

                    // Remove the elIdAttr property from the DOM node
                    try {
                        delete el[elIdAttr];
                    } catch (e) {
                        if (el.removeAttribute) {
                            el.removeAttribute(elIdAttr);
                        } else {
                            // IE doesn't appear to support removeAttribute on the document element
                            el[elIdAttr] = null;
                        }
                    }
                }

                /**
                 * Check if an element has a CSS class
                 *
                 * @function hasElClass
                 * @param {Element} element Element to check
                 * @param {String} classToCheck Classname to check
                 */

                function hasElClass(element, classToCheck) {
                    if (element.classList) {
                        return element.classList.contains(classToCheck);
                    } else {
                        throwIfWhitespace(classToCheck);
                        return classRegExp(classToCheck).test(element.className);
                    }
                }

                /**
                 * Add a CSS class name to an element
                 *
                 * @function addElClass
                 * @param {Element} element    Element to add class name to
                 * @param {String} classToAdd Classname to add
                 */

                function addElClass(element, classToAdd) {
                    if (element.classList) {
                        element.classList.add(classToAdd);

                        // Don't need to `throwIfWhitespace` here because `hasElClass` will do it
                        // in the case of classList not being supported.
                    } else if (!hasElClass(element, classToAdd)) {
                        element.className = (element.className + ' ' + classToAdd).trim();
                    }

                    return element;
                }

                /**
                 * Remove a CSS class name from an element
                 *
                 * @function removeElClass
                 * @param {Element} element    Element to remove from class name
                 * @param {String} classToRemove Classname to remove
                 */

                function removeElClass(element, classToRemove) {
                    if (element.classList) {
                        element.classList.remove(classToRemove);
                    } else {
                        throwIfWhitespace(classToRemove);
                        element.className = element.className.split(/\s+/).filter(function (c) {
                            return c !== classToRemove;
                        }).join(' ');
                    }

                    return element;
                }

                /**
                 * Adds or removes a CSS class name on an element depending on an optional
                 * condition or the presence/absence of the class name.
                 *
                 * @function toggleElClass
                 * @param    {Element} element
                 * @param    {String} classToToggle
                 * @param    {Boolean|Function} [predicate]
                 *           Can be a function that returns a Boolean. If `true`, the class
                 *           will be added; if `false`, the class will be removed. If not
                 *           given, the class will be added if not present and vice versa.
                 */

                function toggleElClass(element, classToToggle, predicate) {

                    // This CANNOT use `classList` internally because IE does not support the
                    // second parameter to the `classList.toggle()` method! Which is fine because
                    // `classList` will be used by the add/remove functions.
                    var has = hasElClass(element, classToToggle);

                    if (typeof predicate === 'function') {
                        predicate = predicate(element, classToToggle);
                    }

                    if (typeof predicate !== 'boolean') {
                        predicate = !has;
                    }

                    // If the necessary class operation matches the current state of the
                    // element, no action is required.
                    if (predicate === has) {
                        return;
                    }

                    if (predicate) {
                        addElClass(element, classToToggle);
                    } else {
                        removeElClass(element, classToToggle);
                    }

                    return element;
                }

                /**
                 * Apply attributes to an HTML element.
                 *
                 * @param  {Element} el         Target element.
                 * @param  {Object=} attributes Element attributes to be applied.
                 * @private
                 * @function setElAttributes
                 */

                function setElAttributes(el, attributes) {
                    Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
                        var attrValue = attributes[attrName];

                        if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
                            el.removeAttribute(attrName);
                        } else {
                            el.setAttribute(attrName, attrValue === true ? '' : attrValue);
                        }
                    });
                }

                /**
                 * Get an element's attribute values, as defined on the HTML tag
                 * Attributes are not the same as properties. They're defined on the tag
                 * or with setAttribute (which shouldn't be used with HTML)
                 * This will return true or false for boolean attributes.
                 *
                 * @param  {Element} tag Element from which to get tag attributes
                 * @return {Object}
                 * @private
                 * @function getElAttributes
                 */

                function getElAttributes(tag) {
                    var obj, knownBooleans, attrs, attrName, attrVal;

                    obj = {};

                    // known boolean attributes
                    // we can check for matching boolean properties, but older browsers
                    // won't know about HTML5 boolean attributes that we still read from
                    knownBooleans = ',' + 'autoplay,controls,loop,muted,default' + ',';

                    if (tag && tag.attributes && tag.attributes.length > 0) {
                        attrs = tag.attributes;

                        for (var i = attrs.length - 1; i >= 0; i--) {
                            attrName = attrs[i].name;
                            attrVal = attrs[i].value;

                            // check for known booleans
                            // the matching element property will return a value for typeof
                            if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
                                // the value of an included boolean attribute is typically an empty
                                // string ('') which would equal false if we just check for a false value.
                                // we also don't want support bad code like autoplay='false'
                                attrVal = attrVal !== null ? true : false;
                            }

                            obj[attrName] = attrVal;
                        }
                    }

                    return obj;
                }

                /**
                 * Attempt to block the ability to select text while dragging controls
                 *
                 * @return {Boolean}
                 * @function blockTextSelection
                 */

                function blockTextSelection() {
                    _globalDocument2['default'].body.focus();
                    _globalDocument2['default'].onselectstart = function () {
                        return false;
                    };
                }

                /**
                 * Turn off text selection blocking
                 *
                 * @return {Boolean}
                 * @function unblockTextSelection
                 */

                function unblockTextSelection() {
                    _globalDocument2['default'].onselectstart = function () {
                        return true;
                    };
                }

                /**
                 * Offset Left
                 * getBoundingClientRect technique from
                 * John Resig http://ejohn.org/blog/getboundingclientrect-is-awesome/
                 *
                 * @function findElPosition
                 * @param {Element} el Element from which to get offset
                 * @return {Object}
                 */

                function findElPosition(el) {
                    var box = undefined;

                    if (el.getBoundingClientRect && el.parentNode) {
                        box = el.getBoundingClientRect();
                    }

                    if (!box) {
                        return {
                            left: 0,
                            top: 0
                        };
                    }

                    var docEl = _globalDocument2['default'].documentElement;
                    var body = _globalDocument2['default'].body;

                    var clientLeft = docEl.clientLeft || body.clientLeft || 0;
                    var scrollLeft = _globalWindow2['default'].pageXOffset || body.scrollLeft;
                    var left = box.left + scrollLeft - clientLeft;

                    var clientTop = docEl.clientTop || body.clientTop || 0;
                    var scrollTop = _globalWindow2['default'].pageYOffset || body.scrollTop;
                    var top = box.top + scrollTop - clientTop;

                    // Android sometimes returns slightly off decimal values, so need to round
                    return {
                        left: Math.round(left),
                        top: Math.round(top)
                    };
                }

                /**
                 * Get pointer position in element
                 * Returns an object with x and y coordinates.
                 * The base on the coordinates are the bottom left of the element.
                 *
                 * @function getPointerPosition
                 * @param {Element} el Element on which to get the pointer position on
                 * @param {Event} event Event object
                 * @return {Object} This object will have x and y coordinates corresponding to the mouse position
                 */

                function getPointerPosition(el, event) {
                    var position = {};
                    var box = findElPosition(el);
                    var boxW = el.offsetWidth;
                    var boxH = el.offsetHeight;

                    var boxY = box.top;
                    var boxX = box.left;
                    var pageY = event.pageY;
                    var pageX = event.pageX;

                    if (event.changedTouches) {
                        pageX = event.changedTouches[0].pageX;
                        pageY = event.changedTouches[0].pageY;
                    }

                    position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
                    position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));

                    return position;
                }

                /**
                 * Determines, via duck typing, whether or not a value is a DOM element.
                 *
                 * @function isEl
                 * @param    {Mixed} value
                 * @return   {Boolean}
                 */

                function isEl(value) {
                    return !!value && typeof value === 'object' && value.nodeType === 1;
                }

                /**
                 * Determines, via duck typing, whether or not a value is a text node.
                 *
                 * @param  {Mixed} value
                 * @return {Boolean}
                 */

                function isTextNode(value) {
                    return !!value && typeof value === 'object' && value.nodeType === 3;
                }

                /**
                 * Empties the contents of an element.
                 *
                 * @function emptyEl
                 * @param    {Element} el
                 * @return   {Element}
                 */

                function emptyEl(el) {
                    while (el.firstChild) {
                        el.removeChild(el.firstChild);
                    }
                    return el;
                }

                /**
                 * Normalizes content for eventual insertion into the DOM.
                 *
                 * This allows a wide range of content definition methods, but protects
                 * from falling into the trap of simply writing to `innerHTML`, which is
                 * an XSS concern.
                 *
                 * The content for an element can be passed in multiple types and
                 * combinations, whose behavior is as follows:
                 *
                 * - String
                 *   Normalized into a text node.
                 *
                 * - Element, TextNode
                 *   Passed through.
                 *
                 * - Array
                 *   A one-dimensional array of strings, elements, nodes, or functions (which
                 *   return single strings, elements, or nodes).
                 *
                 * - Function
                 *   If the sole argument, is expected to produce a string, element,
                 *   node, or array.
                 *
                 * @function normalizeContent
                 * @param    {String|Element|TextNode|Array|Function} content
                 * @return   {Array}
                 */

                function normalizeContent(content) {

                    // First, invoke content if it is a function. If it produces an array,
                    // that needs to happen before normalization.
                    if (typeof content === 'function') {
                        content = content();
                    }

                    // Next up, normalize to an array, so one or many items can be normalized,
                    // filtered, and returned.
                    return (Array.isArray(content) ? content : [content]).map(function (value) {

                        // First, invoke value if it is a function to produce a new value,
                        // which will be subsequently normalized to a Node of some kind.
                        if (typeof value === 'function') {
                            value = value();
                        }

                        if (isEl(value) || isTextNode(value)) {
                            return value;
                        }

                        if (typeof value === 'string' && /\S/.test(value)) {
                            return _globalDocument2['default'].createTextNode(value);
                        }
                    }).filter(function (value) {
                        return value;
                    });
                }

                /**
                 * Normalizes and appends content to an element.
                 *
                 * @function appendContent
                 * @param    {Element} el
                 * @param    {String|Element|TextNode|Array|Function} content
                 *           See: `normalizeContent`
                 * @return   {Element}
                 */

                function appendContent(el, content) {
                    normalizeContent(content).forEach(function (node) {
                        return el.appendChild(node);
                    });
                    return el;
                }

                /**
                 * Normalizes and inserts content into an element; this is identical to
                 * `appendContent()`, except it empties the element first.
                 *
                 * @function insertContent
                 * @param    {Element} el
                 * @param    {String|Element|TextNode|Array|Function} content
                 *           See: `normalizeContent`
                 * @return   {Element}
                 */

                function insertContent(el, content) {
                    return appendContent(emptyEl(el), content);
                }

                /**
                 * Finds a single DOM element matching `selector` within the optional
                 * `context` of another DOM element (defaulting to `document`).
                 *
                 * @function $
                 * @param    {String} selector
                 *           A valid CSS selector, which will be passed to `querySelector`.
                 *
                 * @param    {Element|String} [context=document]
                 *           A DOM element within which to query. Can also be a selector
                 *           string in which case the first matching element will be used
                 *           as context. If missing (or no element matches selector), falls
                 *           back to `document`.
                 *
                 * @return   {Element|null}
                 */
                var $ = createQuerier('querySelector');

                exports.$ = $;
                /**
                 * Finds a all DOM elements matching `selector` within the optional
                 * `context` of another DOM element (defaulting to `document`).
                 *
                 * @function $$
                 * @param    {String} selector
                 *           A valid CSS selector, which will be passed to `querySelectorAll`.
                 *
                 * @param    {Element|String} [context=document]
                 *           A DOM element within which to query. Can also be a selector
                 *           string in which case the first matching element will be used
                 *           as context. If missing (or no element matches selector), falls
                 *           back to `document`.
                 *
                 * @return   {NodeList}
                 */
                var $$ = createQuerier('querySelectorAll');
                exports.$$ = $$;

            },{"./guid.js":138,"./log.js":139,"global/document":1,"global/window":2,"tsml":55}],135:[function(_dereq_,module,exports){
                /**
                 * @file events.js
                 *
                 * Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
                 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
                 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
                 * robust as jquery's, so there's probably some differences.
                 */

                'use strict';

                exports.__esModule = true;
                exports.on = on;
                exports.off = off;
                exports.trigger = trigger;
                exports.one = one;
                exports.fixEvent = fixEvent;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                var _domJs = _dereq_('./dom.js');

                var Dom = _interopRequireWildcard(_domJs);

                var _guidJs = _dereq_('./guid.js');

                var Guid = _interopRequireWildcard(_guidJs);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                /**
                 * Add an event listener to element
                 * It stores the handler function in a separate cache object
                 * and adds a generic handler to the element's event,
                 * along with a unique id (guid) to the element.
                 *
                 * @param  {Element|Object}   elem Element or object to bind listeners to
                 * @param  {String|Array}   type Type of event to bind to.
                 * @param  {Function} fn   Event listener.
                 * @method on
                 */

                function on(elem, type, fn) {
                    if (Array.isArray(type)) {
                        return _handleMultipleEvents(on, elem, type, fn);
                    }

                    var data = Dom.getElData(elem);

                    // We need a place to store all our handler data
                    if (!data.handlers) data.handlers = {};

                    if (!data.handlers[type]) data.handlers[type] = [];

                    if (!fn.guid) fn.guid = Guid.newGUID();

                    data.handlers[type].push(fn);

                    if (!data.dispatcher) {
                        data.disabled = false;

                        data.dispatcher = function (event, hash) {

                            if (data.disabled) return;
                            event = fixEvent(event);

                            var handlers = data.handlers[event.type];

                            if (handlers) {
                                // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
                                var handlersCopy = handlers.slice(0);

                                for (var m = 0, n = handlersCopy.length; m < n; m++) {
                                    if (event.isImmediatePropagationStopped()) {
                                        break;
                                    } else {
                                        handlersCopy[m].call(elem, event, hash);
                                    }
                                }
                            }
                        };
                    }

                    if (data.handlers[type].length === 1) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, data.dispatcher, false);
                        } else if (elem.attachEvent) {
                            elem.attachEvent('on' + type, data.dispatcher);
                        }
                    }
                }

                /**
                 * Removes event listeners from an element
                 *
                 * @param  {Element|Object}   elem Object to remove listeners from
                 * @param  {String|Array=}   type Type of listener to remove. Don't include to remove all events from element.
                 * @param  {Function} fn   Specific listener to remove. Don't include to remove listeners for an event type.
                 * @method off
                 */

                function off(elem, type, fn) {
                    // Don't want to add a cache object through getElData if not needed
                    if (!Dom.hasElData(elem)) return;

                    var data = Dom.getElData(elem);

                    // If no events exist, nothing to unbind
                    if (!data.handlers) {
                        return;
                    }

                    if (Array.isArray(type)) {
                        return _handleMultipleEvents(off, elem, type, fn);
                    }

                    // Utility function
                    var removeType = function removeType(t) {
                        data.handlers[t] = [];
                        _cleanUpEvents(elem, t);
                    };

                    // Are we removing all bound events?
                    if (!type) {
                        for (var t in data.handlers) {
                            removeType(t);
                        }return;
                    }

                    var handlers = data.handlers[type];

                    // If no handlers exist, nothing to unbind
                    if (!handlers) return;

                    // If no listener was provided, remove all listeners for type
                    if (!fn) {
                        removeType(type);
                        return;
                    }

                    // We're only removing a single handler
                    if (fn.guid) {
                        for (var n = 0; n < handlers.length; n++) {
                            if (handlers[n].guid === fn.guid) {
                                handlers.splice(n--, 1);
                            }
                        }
                    }

                    _cleanUpEvents(elem, type);
                }

                /**
                 * Trigger an event for an element
                 *
                 * @param  {Element|Object}      elem  Element to trigger an event on
                 * @param  {Event|Object|String} event A string (the type) or an event object with a type attribute
                 * @param  {Object} [hash] data hash to pass along with the event
                 * @return {Boolean=} Returned only if default was prevented
                 * @method trigger
                 */

                function trigger(elem, event, hash) {
                    // Fetches element data and a reference to the parent (for bubbling).
                    // Don't want to add a data object to cache for every parent,
                    // so checking hasElData first.
                    var elemData = Dom.hasElData(elem) ? Dom.getElData(elem) : {};
                    var parent = elem.parentNode || elem.ownerDocument;
                    // type = event.type || event,
                    // handler;

                    // If an event name was passed as a string, creates an event out of it
                    if (typeof event === 'string') {
                        event = { type: event, target: elem };
                    }
                    // Normalizes the event properties.
                    event = fixEvent(event);

                    // If the passed element has a dispatcher, executes the established handlers.
                    if (elemData.dispatcher) {
                        elemData.dispatcher.call(elem, event, hash);
                    }

                    // Unless explicitly stopped or the event does not bubble (e.g. media events)
                    // recursively calls this function to bubble the event up the DOM.
                    if (parent && !event.isPropagationStopped() && event.bubbles === true) {
                        trigger.call(null, parent, event, hash);

                        // If at the top of the DOM, triggers the default action unless disabled.
                    } else if (!parent && !event.defaultPrevented) {
                        var targetData = Dom.getElData(event.target);

                        // Checks if the target has a default action for this event.
                        if (event.target[event.type]) {
                            // Temporarily disables event dispatching on the target as we have already executed the handler.
                            targetData.disabled = true;
                            // Executes the default action.
                            if (typeof event.target[event.type] === 'function') {
                                event.target[event.type]();
                            }
                            // Re-enables event dispatching.
                            targetData.disabled = false;
                        }
                    }

                    // Inform the triggerer if the default was prevented by returning false
                    return !event.defaultPrevented;
                }

                /**
                 * Trigger a listener only once for an event
                 *
                 * @param  {Element|Object}   elem Element or object to
                 * @param  {String|Array}   type Name/type of event
                 * @param  {Function} fn Event handler function
                 * @method one
                 */

                function one(elem, type, fn) {
                    if (Array.isArray(type)) {
                        return _handleMultipleEvents(one, elem, type, fn);
                    }
                    var func = function func() {
                        off(elem, type, func);
                        fn.apply(this, arguments);
                    };
                    // copy the guid to the new function so it can removed using the original function's ID
                    func.guid = fn.guid = fn.guid || Guid.newGUID();
                    on(elem, type, func);
                }

                /**
                 * Fix a native event to have standard property values
                 *
                 * @param  {Object} event Event object to fix
                 * @return {Object}
                 * @private
                 * @method fixEvent
                 */

                function fixEvent(event) {

                    function returnTrue() {
                        return true;
                    }
                    function returnFalse() {
                        return false;
                    }

                    // Test if fixing up is needed
                    // Used to check if !event.stopPropagation instead of isPropagationStopped
                    // But native events return true for stopPropagation, but don't have
                    // other expected methods like isPropagationStopped. Seems to be a problem
                    // with the Javascript Ninja code. So we're just overriding all events now.
                    if (!event || !event.isPropagationStopped) {
                        var old = event || _globalWindow2['default'].event;

                        event = {};
                        // Clone the old object so that we can modify the values event = {};
                        // IE8 Doesn't like when you mess with native event properties
                        // Firefox returns false for event.hasOwnProperty('type') and other props
                        //  which makes copying more difficult.
                        // TODO: Probably best to create a whitelist of event props
                        for (var key in old) {
                            // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
                            // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
                            // and webkitMovementX/Y
                            if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {
                                // Chrome 32+ warns if you try to copy deprecated returnValue, but
                                // we still want to if preventDefault isn't supported (IE8).
                                if (!(key === 'returnValue' && old.preventDefault)) {
                                    event[key] = old[key];
                                }
                            }
                        }

                        // The event occurred on this element
                        if (!event.target) {
                            event.target = event.srcElement || _globalDocument2['default'];
                        }

                        // Handle which other element the event is related to
                        if (!event.relatedTarget) {
                            event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
                        }

                        // Stop the default browser action
                        event.preventDefault = function () {
                            if (old.preventDefault) {
                                old.preventDefault();
                            }
                            event.returnValue = false;
                            old.returnValue = false;
                            event.defaultPrevented = true;
                        };

                        event.defaultPrevented = false;

                        // Stop the event from bubbling
                        event.stopPropagation = function () {
                            if (old.stopPropagation) {
                                old.stopPropagation();
                            }
                            event.cancelBubble = true;
                            old.cancelBubble = true;
                            event.isPropagationStopped = returnTrue;
                        };

                        event.isPropagationStopped = returnFalse;

                        // Stop the event from bubbling and executing other handlers
                        event.stopImmediatePropagation = function () {
                            if (old.stopImmediatePropagation) {
                                old.stopImmediatePropagation();
                            }
                            event.isImmediatePropagationStopped = returnTrue;
                            event.stopPropagation();
                        };

                        event.isImmediatePropagationStopped = returnFalse;

                        // Handle mouse position
                        if (event.clientX != null) {
                            var doc = _globalDocument2['default'].documentElement,
                                body = _globalDocument2['default'].body;

                            event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                            event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                        }

                        // Handle key presses
                        event.which = event.charCode || event.keyCode;

                        // Fix button for mouse clicks:
                        // 0 == left; 1 == middle; 2 == right
                        if (event.button != null) {
                            event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
                        }
                    }

                    // Returns fixed-up instance
                    return event;
                }

                /**
                 * Clean up the listener cache and dispatchers
                 *
                 * @param  {Element|Object} elem Element to clean up
                 * @param  {String} type Type of event to clean up
                 * @private
                 * @method _cleanUpEvents
                 */
                function _cleanUpEvents(elem, type) {
                    var data = Dom.getElData(elem);

                    // Remove the events of a particular type if there are none left
                    if (data.handlers[type].length === 0) {
                        delete data.handlers[type];
                        // data.handlers[type] = null;
                        // Setting to null was causing an error with data.handlers

                        // Remove the meta-handler from the element
                        if (elem.removeEventListener) {
                            elem.removeEventListener(type, data.dispatcher, false);
                        } else if (elem.detachEvent) {
                            elem.detachEvent('on' + type, data.dispatcher);
                        }
                    }

                    // Remove the events object if there are no types left
                    if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
                        delete data.handlers;
                        delete data.dispatcher;
                        delete data.disabled;
                    }

                    // Finally remove the element data if there is no data left
                    if (Object.getOwnPropertyNames(data).length === 0) {
                        Dom.removeElData(elem);
                    }
                }

                /**
                 * Loops through an array of event types and calls the requested method for each type.
                 *
                 * @param  {Function} fn   The event method we want to use.
                 * @param  {Element|Object} elem Element or object to bind listeners to
                 * @param  {String}   type Type of event to bind to.
                 * @param  {Function} callback   Event listener.
                 * @private
                 * @function _handleMultipleEvents
                 */
                function _handleMultipleEvents(fn, elem, types, callback) {
                    types.forEach(function (type) {
                        //Call the event method for each one of the types
                        fn(elem, type, callback);
                    });
                }

            },{"./dom.js":134,"./guid.js":138,"global/document":1,"global/window":2}],136:[function(_dereq_,module,exports){
                /**
                 * @file fn.js
                 */
                'use strict';

                exports.__esModule = true;

                var _guidJs = _dereq_('./guid.js');

                /**
                 * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
                 * It also stores a unique id on the function so it can be easily removed from events
                 *
                 * @param  {*}   context The object to bind as scope
                 * @param  {Function} fn      The function to be bound to a scope
                 * @param  {Number=}   uid     An optional unique ID for the function to be set
                 * @return {Function}
                 * @private
                 * @method bind
                 */
                var bind = function bind(context, fn, uid) {
                    // Make sure the function has a unique ID
                    if (!fn.guid) {
                        fn.guid = _guidJs.newGUID();
                    }

                    // Create the new function that changes the context
                    var ret = function ret() {
                        return fn.apply(context, arguments);
                    };

                    // Allow for the ability to individualize this function
                    // Needed in the case where multiple objects might share the same prototype
                    // IF both items add an event listener with the same function, then you try to remove just one
                    // it will remove both because they both have the same guid.
                    // when using this, you need to use the bind method when you remove the listener as well.
                    // currently used in text tracks
                    ret.guid = uid ? uid + '_' + fn.guid : fn.guid;

                    return ret;
                };
                exports.bind = bind;

            },{"./guid.js":138}],137:[function(_dereq_,module,exports){
                /**
                 * @file format-time.js
                 *
                 * Format seconds as a time string, H:MM:SS or M:SS
                 * Supplying a guide (in seconds) will force a number of leading zeros
                 * to cover the length of the guide
                 *
                 * @param  {Number} seconds Number of seconds to be turned into a string
                 * @param  {Number} guide   Number (in seconds) to model the string after
                 * @return {String}         Time formatted as H:MM:SS or M:SS
                 * @private
                 * @function formatTime
                 */
                'use strict';

                exports.__esModule = true;
                function formatTime(seconds) {
                    var guide = arguments.length <= 1 || arguments[1] === undefined ? seconds : arguments[1];
                    return (function () {
                        seconds = seconds < 0 ? 0 : seconds;
                        var s = Math.floor(seconds % 60);
                        var m = Math.floor(seconds / 60 % 60);
                        var h = Math.floor(seconds / 3600);
                        var gm = Math.floor(guide / 60 % 60);
                        var gh = Math.floor(guide / 3600);

                        // handle invalid times
                        if (isNaN(seconds) || seconds === Infinity) {
                            // '-' is false for all relational operators (e.g. <, >=) so this setting
                            // will add the minimum number of fields specified by the guide
                            h = m = s = '-';
                        }

                        // Check if we need to show hours
                        h = h > 0 || gh > 0 ? h + ':' : '';

                        // If hours are showing, we may need to add a leading zero.
                        // Always show at least one digit of minutes.
                        m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';

                        // Check if leading zero is need for seconds
                        s = s < 10 ? '0' + s : s;

                        return h + m + s;
                    })();
                }

                exports['default'] = formatTime;
                module.exports = exports['default'];

            },{}],138:[function(_dereq_,module,exports){
                /**
                 * @file guid.js
                 *
                 * Unique ID for an element or function
                 * @type {Number}
                 * @private
                 */
                "use strict";

                exports.__esModule = true;
                exports.newGUID = newGUID;
                var _guid = 1;

                /**
                 * Get the next unique ID
                 *
                 * @return {String}
                 * @function newGUID
                 */

                function newGUID() {
                    return _guid++;
                }

            },{}],139:[function(_dereq_,module,exports){
                /**
                 * @file log.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                /**
                 * Log plain debug messages
                 */
                var log = function log() {
                    _logType(null, arguments);
                };

                /**
                 * Keep a history of log messages
                 * @type {Array}
                 */
                log.history = [];

                /**
                 * Log error messages
                 */
                log.error = function () {
                    _logType('error', arguments);
                };

                /**
                 * Log warning messages
                 */
                log.warn = function () {
                    _logType('warn', arguments);
                };

                /**
                 * Log messages to the console and history based on the type of message
                 *
                 * @param  {String} type The type of message, or `null` for `log`
                 * @param  {Object} args The args to be passed to the log
                 * @private
                 * @method _logType
                 */
                function _logType(type, args) {
                    // convert args to an array to get array functions
                    var argsArray = Array.prototype.slice.call(args);
                    // if there's no console then don't try to output messages
                    // they will still be stored in log.history
                    // Was setting these once outside of this function, but containing them
                    // in the function makes it easier to test cases where console doesn't exist
                    var noop = function noop() {};

                    var console = _globalWindow2['default']['console'] || {
                            'log': noop,
                            'warn': noop,
                            'error': noop
                        };

                    if (type) {
                        // add the type to the front of the message
                        argsArray.unshift(type.toUpperCase() + ':');
                    } else {
                        // default to log with no prefix
                        type = 'log';
                    }

                    // add to history
                    log.history.push(argsArray);

                    // add console prefix after adding to history
                    argsArray.unshift('VIDEOJS:');

                    // call appropriate log function
                    if (console[type].apply) {
                        console[type].apply(console, argsArray);
                    } else {
                        // ie8 doesn't allow error.apply, but it will just join() the array anyway
                        console[type](argsArray.join(' '));
                    }
                }

                exports['default'] = log;
                module.exports = exports['default'];

            },{"global/window":2}],140:[function(_dereq_,module,exports){
                /**
                 * @file merge-options.js
                 */
                'use strict';

                exports.__esModule = true;
                exports['default'] = mergeOptions;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var _lodashCompatObjectMerge = _dereq_('lodash-compat/object/merge');

                var _lodashCompatObjectMerge2 = _interopRequireDefault(_lodashCompatObjectMerge);

                function isPlain(obj) {
                    return !!obj && typeof obj === 'object' && obj.toString() === '[object Object]' && obj.constructor === Object;
                }

                /**
                 * Merge customizer. video.js simply overwrites non-simple objects
                 * (like arrays) instead of attempting to overlay them.
                 * @see https://lodash.com/docs#merge
                 */
                var customizer = function customizer(destination, source) {
                    // If we're not working with a plain object, copy the value as is
                    // If source is an array, for instance, it will replace destination
                    if (!isPlain(source)) {
                        return source;
                    }

                    // If the new value is a plain object but the first object value is not
                    // we need to create a new object for the first object to merge with.
                    // This makes it consistent with how merge() works by default
                    // and also protects from later changes the to first object affecting
                    // the second object's values.
                    if (!isPlain(destination)) {
                        return mergeOptions(source);
                    }
                };

                /**
                 * Merge one or more options objects, recursively merging **only**
                 * plain object properties.  Previously `deepMerge`.
                 *
                 * @param  {...Object} source One or more objects to merge
                 * @returns {Object}          a new object that is the union of all
                 * provided objects
                 * @function mergeOptions
                 */

                function mergeOptions() {
                    // contruct the call dynamically to handle the variable number of
                    // objects to merge
                    var args = Array.prototype.slice.call(arguments);

                    // unshift an empty object into the front of the call as the target
                    // of the merge
                    args.unshift({});

                    // customize conflict resolution to match our historical merge behavior
                    args.push(customizer);

                    _lodashCompatObjectMerge2['default'].apply(null, args);

                    // return the mutated result object
                    return args[0];
                }

                module.exports = exports['default'];

            },{"lodash-compat/object/merge":40}],141:[function(_dereq_,module,exports){
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var createStyleElement = function createStyleElement(className) {
                    var style = _globalDocument2['default'].createElement('style');
                    style.className = className;

                    return style;
                };

                exports.createStyleElement = createStyleElement;
                var setTextContent = function setTextContent(el, content) {
                    if (el.styleSheet) {
                        el.styleSheet.cssText = content;
                    } else {
                        el.textContent = content;
                    }
                };
                exports.setTextContent = setTextContent;

            },{"global/document":1}],142:[function(_dereq_,module,exports){
                'use strict';

                exports.__esModule = true;
                exports.createTimeRanges = createTimeRanges;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var _logJs = _dereq_('./log.js');

                var _logJs2 = _interopRequireDefault(_logJs);

                /**
                 * @file time-ranges.js
                 *
                 * Should create a fake TimeRange object
                 * Mimics an HTML5 time range instance, which has functions that
                 * return the start and end times for a range
                 * TimeRanges are returned by the buffered() method
                 *
                 * @param  {(Number|Array)} Start of a single range or an array of ranges
                 * @param  {Number} End of a single range
                 * @private
                 * @method createTimeRanges
                 */

                function createTimeRanges(start, end) {
                    if (Array.isArray(start)) {
                        return createTimeRangesObj(start);
                    } else if (start === undefined || end === undefined) {
                        return createTimeRangesObj();
                    }
                    return createTimeRangesObj([[start, end]]);
                }

                exports.createTimeRange = createTimeRanges;

                function createTimeRangesObj(ranges) {
                    if (ranges === undefined || ranges.length === 0) {
                        return {
                            length: 0,
                            start: function start() {
                                throw new Error('This TimeRanges object is empty');
                            },
                            end: function end() {
                                throw new Error('This TimeRanges object is empty');
                            }
                        };
                    }
                    return {
                        length: ranges.length,
                        start: getRange.bind(null, 'start', 0, ranges),
                        end: getRange.bind(null, 'end', 1, ranges)
                    };
                }

                function getRange(fnName, valueIndex, ranges, rangeIndex) {
                    if (rangeIndex === undefined) {
                        _logJs2['default'].warn('DEPRECATED: Function \'' + fnName + '\' on \'TimeRanges\' called without an index argument.');
                        rangeIndex = 0;
                    }
                    rangeCheck(fnName, rangeIndex, ranges.length - 1);
                    return ranges[rangeIndex][valueIndex];
                }

                function rangeCheck(fnName, index, maxIndex) {
                    if (index < 0 || index > maxIndex) {
                        throw new Error('Failed to execute \'' + fnName + '\' on \'TimeRanges\': The index provided (' + index + ') is greater than or equal to the maximum bound (' + maxIndex + ').');
                    }
                }

            },{"./log.js":139}],143:[function(_dereq_,module,exports){
                /**
                 * @file to-title-case.js
                 *
                 * Uppercase the first letter of a string
                 *
                 * @param  {String} string String to be uppercased
                 * @return {String}
                 * @private
                 * @method toTitleCase
                 */
                "use strict";

                exports.__esModule = true;
                function toTitleCase(string) {
                    return string.charAt(0).toUpperCase() + string.slice(1);
                }

                exports["default"] = toTitleCase;
                module.exports = exports["default"];

            },{}],144:[function(_dereq_,module,exports){
                /**
                 * @file url.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                /**
                 * Resolve and parse the elements of a URL
                 *
                 * @param  {String} url The url to parse
                 * @return {Object}     An object of url details
                 * @method parseUrl
                 */
                var parseUrl = function parseUrl(url) {
                    var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];

                    // add the url to an anchor and let the browser parse the URL
                    var a = _globalDocument2['default'].createElement('a');
                    a.href = url;

                    // IE8 (and 9?) Fix
                    // ie8 doesn't parse the URL correctly until the anchor is actually
                    // added to the body, and an innerHTML is needed to trigger the parsing
                    var addToBody = a.host === '' && a.protocol !== 'file:';
                    var div = undefined;
                    if (addToBody) {
                        div = _globalDocument2['default'].createElement('div');
                        div.innerHTML = '<a href="' + url + '"></a>';
                        a = div.firstChild;
                        // prevent the div from affecting layout
                        div.setAttribute('style', 'display:none; position:absolute;');
                        _globalDocument2['default'].body.appendChild(div);
                    }

                    // Copy the specific URL properties to a new object
                    // This is also needed for IE8 because the anchor loses its
                    // properties when it's removed from the dom
                    var details = {};
                    for (var i = 0; i < props.length; i++) {
                        details[props[i]] = a[props[i]];
                    }

                    // IE9 adds the port to the host property unlike everyone else. If
                    // a port identifier is added for standard ports, strip it.
                    if (details.protocol === 'http:') {
                        details.host = details.host.replace(/:80$/, '');
                    }
                    if (details.protocol === 'https:') {
                        details.host = details.host.replace(/:443$/, '');
                    }

                    if (addToBody) {
                        _globalDocument2['default'].body.removeChild(div);
                    }

                    return details;
                };

                exports.parseUrl = parseUrl;
                /**
                 * Get absolute version of relative URL. Used to tell flash correct URL.
                 * http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
                 *
                 * @param  {String} url URL to make absolute
                 * @return {String}     Absolute URL
                 * @private
                 * @method getAbsoluteURL
                 */
                var getAbsoluteURL = function getAbsoluteURL(url) {
                    // Check if absolute URL
                    if (!url.match(/^https?:\/\//)) {
                        // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
                        var div = _globalDocument2['default'].createElement('div');
                        div.innerHTML = '<a href="' + url + '">x</a>';
                        url = div.firstChild.href;
                    }

                    return url;
                };

                exports.getAbsoluteURL = getAbsoluteURL;
                /**
                 * Returns the extension of the passed file name. It will return an empty string if you pass an invalid path
                 *
                 * @param {String}    path    The fileName path like '/path/to/file.mp4'
                 * @returns {String}          The extension in lower case or an empty string if no extension could be found.
                 * @method getFileExtension
                 */
                var getFileExtension = function getFileExtension(path) {
                    if (typeof path === 'string') {
                        var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
                        var pathParts = splitPathRe.exec(path);

                        if (pathParts) {
                            return pathParts.pop().toLowerCase();
                        }
                    }

                    return '';
                };

                exports.getFileExtension = getFileExtension;
                /**
                 * Returns whether the url passed is a cross domain request or not.
                 *
                 * @param {String} url The url to check
                 * @return {Boolean}   Whether it is a cross domain request or not
                 * @method isCrossOrigin
                 */
                var isCrossOrigin = function isCrossOrigin(url) {
                    var winLoc = _globalWindow2['default'].location;
                    var urlInfo = parseUrl(url);

                    // IE8 protocol relative urls will return ':' for protocol
                    var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;

                    // Check if url is for another domain/origin
                    // IE8 doesn't know location.origin, so we won't rely on it here
                    var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;

                    return crossOrigin;
                };
                exports.isCrossOrigin = isCrossOrigin;

            },{"global/document":1,"global/window":2}],145:[function(_dereq_,module,exports){
                /**
                 * @file video.js
                 */
                'use strict';

                exports.__esModule = true;

                function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var _globalWindow = _dereq_('global/window');

                var _globalWindow2 = _interopRequireDefault(_globalWindow);

                var _globalDocument = _dereq_('global/document');

                var _globalDocument2 = _interopRequireDefault(_globalDocument);

                var _setup = _dereq_('./setup');

                var setup = _interopRequireWildcard(_setup);

                var _utilsStylesheetJs = _dereq_('./utils/stylesheet.js');

                var stylesheet = _interopRequireWildcard(_utilsStylesheetJs);

                var _component = _dereq_('./component');

                var _component2 = _interopRequireDefault(_component);

                var _eventTarget = _dereq_('./event-target');

                var _eventTarget2 = _interopRequireDefault(_eventTarget);

                var _utilsEventsJs = _dereq_('./utils/events.js');

                var Events = _interopRequireWildcard(_utilsEventsJs);

                var _player = _dereq_('./player');

                var _player2 = _interopRequireDefault(_player);

                var _pluginsJs = _dereq_('./plugins.js');

                var _pluginsJs2 = _interopRequireDefault(_pluginsJs);

                var _srcJsUtilsMergeOptionsJs = _dereq_('../../src/js/utils/merge-options.js');

                var _srcJsUtilsMergeOptionsJs2 = _interopRequireDefault(_srcJsUtilsMergeOptionsJs);

                var _utilsFnJs = _dereq_('./utils/fn.js');

                var Fn = _interopRequireWildcard(_utilsFnJs);

                var _tracksTextTrackJs = _dereq_('./tracks/text-track.js');

                var _tracksTextTrackJs2 = _interopRequireDefault(_tracksTextTrackJs);

                var _objectAssign = _dereq_('object.assign');

                var _objectAssign2 = _interopRequireDefault(_objectAssign);

                var _utilsTimeRangesJs = _dereq_('./utils/time-ranges.js');

                var _utilsFormatTimeJs = _dereq_('./utils/format-time.js');

                var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);

                var _utilsLogJs = _dereq_('./utils/log.js');

                var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);

                var _utilsDomJs = _dereq_('./utils/dom.js');

                var Dom = _interopRequireWildcard(_utilsDomJs);

                var _utilsBrowserJs = _dereq_('./utils/browser.js');

                var browser = _interopRequireWildcard(_utilsBrowserJs);

                var _utilsUrlJs = _dereq_('./utils/url.js');

                var Url = _interopRequireWildcard(_utilsUrlJs);

                var _extendJs = _dereq_('./extend.js');

                var _extendJs2 = _interopRequireDefault(_extendJs);

                var _lodashCompatObjectMerge = _dereq_('lodash-compat/object/merge');

                var _lodashCompatObjectMerge2 = _interopRequireDefault(_lodashCompatObjectMerge);

                var _utilsCreateDeprecationProxyJs = _dereq_('./utils/create-deprecation-proxy.js');

                var _utilsCreateDeprecationProxyJs2 = _interopRequireDefault(_utilsCreateDeprecationProxyJs);

                var _xhr = _dereq_('xhr');

                var _xhr2 = _interopRequireDefault(_xhr);

// Include the built-in techs

                var _techTechJs = _dereq_('./tech/tech.js');

                var _techTechJs2 = _interopRequireDefault(_techTechJs);

                var _techHtml5Js = _dereq_('./tech/html5.js');

                var _techHtml5Js2 = _interopRequireDefault(_techHtml5Js);

                var _techFlashJs = _dereq_('./tech/flash.js');

                var _techFlashJs2 = _interopRequireDefault(_techFlashJs);

// HTML5 Element Shim for IE8
                if (typeof HTMLVideoElement === 'undefined') {
                    _globalDocument2['default'].createElement('video');
                    _globalDocument2['default'].createElement('audio');
                    _globalDocument2['default'].createElement('track');
                }

                /**
                 * Doubles as the main function for users to create a player instance and also
                 * the main library object.
                 * The `videojs` function can be used to initialize or retrieve a player.
                 * ```js
                 *     var myPlayer = videojs('my_video_id');
                 * ```
                 *
                 * @param  {String|Element} id      Video element or video element ID
                 * @param  {Object=} options        Optional options object for config/settings
                 * @param  {Function=} ready        Optional ready callback
                 * @return {Player}                 A player instance
                 * @mixes videojs
                 * @method videojs
                 */
                var videojs = function videojs(id, options, ready) {
                    var tag = undefined; // Element of ID

                    // Allow for element or ID to be passed in
                    // String ID
                    if (typeof id === 'string') {

                        // Adjust for jQuery ID syntax
                        if (id.indexOf('#') === 0) {
                            id = id.slice(1);
                        }

                        // If a player instance has already been created for this ID return it.
                        if (videojs.getPlayers()[id]) {

                            // If options or ready funtion are passed, warn
                            if (options) {
                                _utilsLogJs2['default'].warn('Player "' + id + '" is already initialised. Options will not be applied.');
                            }

                            if (ready) {
                                videojs.getPlayers()[id].ready(ready);
                            }

                            return videojs.getPlayers()[id];

                            // Otherwise get element for ID
                        } else {
                            tag = Dom.getEl(id);
                        }

                        // ID is a media element
                    } else {
                        tag = id;
                    }

                    // Check for a useable element
                    if (!tag || !tag.nodeName) {
                        // re: nodeName, could be a box div also
                        throw new TypeError('The element or ID supplied is not valid. (videojs)'); // Returns
                    }

                    // Element may have a player attr referring to an already created player instance.
                    // If not, set up a new player and return the instance.
                    return tag['player'] || _player2['default'].players[tag.playerId] || new _player2['default'](tag, options, ready);
                };

// Add default styles
                if (_globalWindow2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {
                    var style = Dom.$('.vjs-styles-defaults');

                    if (!style) {
                        style = stylesheet.createStyleElement('vjs-styles-defaults');
                        var head = Dom.$('head');
                        head.insertBefore(style, head.firstChild);
                        stylesheet.setTextContent(style, '\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ');
                    }
                }

// Run Auto-load players
// You have to wait at least once in case this script is loaded after your video in the DOM (weird behavior only with minified version)
                setup.autoSetupTimeout(1, videojs);

                /*
                 * Current software version (semver)
                 *
                 * @type {String}
                 */
                videojs.VERSION = '5.9.2';

                /**
                 * The global options object. These are the settings that take effect
                 * if no overrides are specified when the player is created.
                 *
                 * ```js
                 *     videojs.options.autoplay = true
                 *     // -> all players will autoplay by default
                 * ```
                 *
                 * @type {Object}
                 */
                videojs.options = _player2['default'].prototype.options_;

                /**
                 * Get an object with the currently created players, keyed by player ID
                 *
                 * @return {Object} The created players
                 * @mixes videojs
                 * @method getPlayers
                 */
                videojs.getPlayers = function () {
                    return _player2['default'].players;
                };

                /**
                 * For backward compatibility, expose players object.
                 *
                 * @deprecated
                 * @memberOf videojs
                 * @property {Object|Proxy} players
                 */
                videojs.players = _utilsCreateDeprecationProxyJs2['default'](_player2['default'].players, {
                    get: 'Access to videojs.players is deprecated; use videojs.getPlayers instead',
                    set: 'Modification of videojs.players is deprecated'
                });

                /**
                 * Get a component class object by name
                 * ```js
                 *     var VjsButton = videojs.getComponent('Button');
                 *     // Create a new instance of the component
                 *     var myButton = new VjsButton(myPlayer);
                 * ```
                 *
                 * @return {Component} Component identified by name
                 * @mixes videojs
                 * @method getComponent
                 */
                videojs.getComponent = _component2['default'].getComponent;

                /**
                 * Register a component so it can referred to by name
                 * Used when adding to other
                 * components, either through addChild
                 * `component.addChild('myComponent')`
                 * or through default children options
                 * `{ children: ['myComponent'] }`.
                 * ```js
                 *     // Get a component to subclass
                 *     var VjsButton = videojs.getComponent('Button');
                 *     // Subclass the component (see 'extend' doc for more info)
                 *     var MySpecialButton = videojs.extend(VjsButton, {});
                 *     // Register the new component
                 *     VjsButton.registerComponent('MySepcialButton', MySepcialButton);
                 *     // (optionally) add the new component as a default player child
                 *     myPlayer.addChild('MySepcialButton');
                 * ```
                 * NOTE: You could also just initialize the component before adding.
                 * `component.addChild(new MyComponent());`
                 *
                 * @param {String} The class name of the component
                 * @param {Component} The component class
                 * @return {Component} The newly registered component
                 * @mixes videojs
                 * @method registerComponent
                 */
                videojs.registerComponent = function (name, comp) {
                    if (_techTechJs2['default'].isTech(comp)) {
                        _utilsLogJs2['default'].warn('The ' + name + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');
                    }

                    _component2['default'].registerComponent.call(_component2['default'], name, comp);
                };

                /**
                 * Get a Tech class object by name
                 * ```js
                 *     var Html5 = videojs.getTech('Html5');
                 *     // Create a new instance of the component
                 *     var html5 = new Html5(options);
                 * ```
                 *
                 * @return {Tech} Tech identified by name
                 * @mixes videojs
                 * @method getComponent
                 */
                videojs.getTech = _techTechJs2['default'].getTech;

                /**
                 * Register a Tech so it can referred to by name.
                 * This is used in the tech order for the player.
                 *
                 * ```js
                 *     // get the Html5 Tech
                 *     var Html5 = videojs.getTech('Html5');
                 *     var MyTech = videojs.extend(Html5, {});
                 *     // Register the new Tech
                 *     VjsButton.registerTech('Tech', MyTech);
                 *     var player = videojs('myplayer', {
 *       techOrder: ['myTech', 'html5']
 *     });
                 * ```
                 *
                 * @param {String} The class name of the tech
                 * @param {Tech} The tech class
                 * @return {Tech} The newly registered Tech
                 * @mixes videojs
                 * @method registerTech
                 */
                videojs.registerTech = _techTechJs2['default'].registerTech;

                /**
                 * A suite of browser and device tests
                 *
                 * @type {Object}
                 * @private
                 */
                videojs.browser = browser;

                /**
                 * Whether or not the browser supports touch events. Included for backward
                 * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`
                 * instead going forward.
                 *
                 * @deprecated
                 * @type {Boolean}
                 */
                videojs.TOUCH_ENABLED = browser.TOUCH_ENABLED;

                /**
                 * Subclass an existing class
                 * Mimics ES6 subclassing with the `extend` keyword
                 * ```js
                 *     // Create a basic javascript 'class'
                 *     function MyClass(name){
 *       // Set a property at initialization
 *       this.myName = name;
 *     }
                 *     // Create an instance method
                 *     MyClass.prototype.sayMyName = function(){
 *       alert(this.myName);
 *     };
                 *     // Subclass the exisitng class and change the name
                 *     // when initializing
                 *     var MySubClass = videojs.extend(MyClass, {
 *       constructor: function(name) {
 *         // Call the super class constructor for the subclass
 *         MyClass.call(this, name)
 *       }
 *     });
                 *     // Create an instance of the new sub class
                 *     var myInstance = new MySubClass('John');
                 *     myInstance.sayMyName(); // -> should alert "John"
                 * ```
                 *
                 * @param {Function} The Class to subclass
                 * @param {Object} An object including instace methods for the new class
                 *                   Optionally including a `constructor` function
                 * @return {Function} The newly created subclass
                 * @mixes videojs
                 * @method extend
                 */
                videojs.extend = _extendJs2['default'];

                /**
                 * Merge two options objects recursively
                 * Performs a deep merge like lodash.merge but **only merges plain objects**
                 * (not arrays, elements, anything else)
                 * Other values will be copied directly from the second object.
                 * ```js
                 *     var defaultOptions = {
 *       foo: true,
 *       bar: {
 *         a: true,
 *         b: [1,2,3]
 *       }
 *     };
                 *     var newOptions = {
 *       foo: false,
 *       bar: {
 *         b: [4,5,6]
 *       }
 *     };
                 *     var result = videojs.mergeOptions(defaultOptions, newOptions);
                 *     // result.foo = false;
                 *     // result.bar.a = true;
                 *     // result.bar.b = [4,5,6];
                 * ```
                 *
                 * @param {Object} defaults  The options object whose values will be overriden
                 * @param {Object} overrides The options object with values to override the first
                 * @param {Object} etc       Any number of additional options objects
                 *
                 * @return {Object} a new object with the merged values
                 * @mixes videojs
                 * @method mergeOptions
                 */
                videojs.mergeOptions = _srcJsUtilsMergeOptionsJs2['default'];

                /**
                 * Change the context (this) of a function
                 *
                 *     videojs.bind(newContext, function(){
 *       this === newContext
 *     });
                 *
                 * NOTE: as of v5.0 we require an ES5 shim, so you should use the native
                 * `function(){}.bind(newContext);` instead of this.
                 *
                 * @param  {*}        context The object to bind as scope
                 * @param  {Function} fn      The function to be bound to a scope
                 * @param  {Number=}  uid     An optional unique ID for the function to be set
                 * @return {Function}
                 */
                videojs.bind = Fn.bind;

                /**
                 * Create a Video.js player plugin
                 * Plugins are only initialized when options for the plugin are included
                 * in the player options, or the plugin function on the player instance is
                 * called.
                 * **See the plugin guide in the docs for a more detailed example**
                 * ```js
                 *     // Make a plugin that alerts when the player plays
                 *     videojs.plugin('myPlugin', function(myPluginOptions) {
 *       myPluginOptions = myPluginOptions || {};
 *
 *       var player = this;
 *       var alertText = myPluginOptions.text || 'Player is playing!'
 *
 *       player.on('play', function(){
 *         alert(alertText);
 *       });
 *     });
                 *     // USAGE EXAMPLES
                 *     // EXAMPLE 1: New player with plugin options, call plugin immediately
                 *     var player1 = videojs('idOne', {
 *       myPlugin: {
 *         text: 'Custom text!'
 *       }
 *     });
                 *     // Click play
                 *     // --> Should alert 'Custom text!'
                 *     // EXAMPLE 3: New player, initialize plugin later
                 *     var player3 = videojs('idThree');
                 *     // Click play
                 *     // --> NO ALERT
                 *     // Click pause
                 *     // Initialize plugin using the plugin function on the player instance
                 *     player3.myPlugin({
 *       text: 'Plugin added later!'
 *     });
                 *     // Click play
                 *     // --> Should alert 'Plugin added later!'
                 * ```
                 *
                 * @param {String} name The plugin name
                 * @param {Function} fn The plugin function that will be called with options
                 * @mixes videojs
                 * @method plugin
                 */
                videojs.plugin = _pluginsJs2['default'];

                /**
                 * Adding languages so that they're available to all players.
                 * ```js
                 *     videojs.addLanguage('es', { 'Hello': 'Hola' });
                 * ```
                 *
                 * @param  {String} code The language code or dictionary property
                 * @param  {Object} data The data values to be translated
                 * @return {Object} The resulting language dictionary object
                 * @mixes videojs
                 * @method addLanguage
                 */
                videojs.addLanguage = function (code, data) {
                    var _merge;

                    code = ('' + code).toLowerCase();
                    return _lodashCompatObjectMerge2['default'](videojs.options.languages, (_merge = {}, _merge[code] = data, _merge))[code];
                };

                /**
                 * Log debug messages.
                 *
                 * @param {...Object} messages One or more messages to log
                 */
                videojs.log = _utilsLogJs2['default'];

                /**
                 * Creates an emulated TimeRange object.
                 *
                 * @param  {Number|Array} start Start time in seconds or an array of ranges
                 * @param  {Number} end   End time in seconds
                 * @return {Object}       Fake TimeRange object
                 * @method createTimeRange
                 */
                videojs.createTimeRange = videojs.createTimeRanges = _utilsTimeRangesJs.createTimeRanges;

                /**
                 * Format seconds as a time string, H:MM:SS or M:SS
                 * Supplying a guide (in seconds) will force a number of leading zeros
                 * to cover the length of the guide
                 *
                 * @param  {Number} seconds Number of seconds to be turned into a string
                 * @param  {Number} guide   Number (in seconds) to model the string after
                 * @return {String}         Time formatted as H:MM:SS or M:SS
                 * @method formatTime
                 */
                videojs.formatTime = _utilsFormatTimeJs2['default'];

                /**
                 * Resolve and parse the elements of a URL
                 *
                 * @param  {String} url The url to parse
                 * @return {Object}     An object of url details
                 * @method parseUrl
                 */
                videojs.parseUrl = Url.parseUrl;

                /**
                 * Returns whether the url passed is a cross domain request or not.
                 *
                 * @param {String} url The url to check
                 * @return {Boolean}   Whether it is a cross domain request or not
                 * @method isCrossOrigin
                 */
                videojs.isCrossOrigin = Url.isCrossOrigin;

                /**
                 * Event target class.
                 *
                 * @type {Function}
                 */
                videojs.EventTarget = _eventTarget2['default'];

                /**
                 * Add an event listener to element
                 * It stores the handler function in a separate cache object
                 * and adds a generic handler to the element's event,
                 * along with a unique id (guid) to the element.
                 *
                 * @param  {Element|Object}   elem Element or object to bind listeners to
                 * @param  {String|Array}   type Type of event to bind to.
                 * @param  {Function} fn   Event listener.
                 * @method on
                 */
                videojs.on = Events.on;

                /**
                 * Trigger a listener only once for an event
                 *
                 * @param  {Element|Object}   elem Element or object to
                 * @param  {String|Array}   type Name/type of event
                 * @param  {Function} fn Event handler function
                 * @method one
                 */
                videojs.one = Events.one;

                /**
                 * Removes event listeners from an element
                 *
                 * @param  {Element|Object}   elem Object to remove listeners from
                 * @param  {String|Array=}   type Type of listener to remove. Don't include to remove all events from element.
                 * @param  {Function} fn   Specific listener to remove. Don't include to remove listeners for an event type.
                 * @method off
                 */
                videojs.off = Events.off;

                /**
                 * Trigger an event for an element
                 *
                 * @param  {Element|Object}      elem  Element to trigger an event on
                 * @param  {Event|Object|String} event A string (the type) or an event object with a type attribute
                 * @param  {Object} [hash] data hash to pass along with the event
                 * @return {Boolean=} Returned only if default was prevented
                 * @method trigger
                 */
                videojs.trigger = Events.trigger;

                /**
                 * A cross-browser XMLHttpRequest wrapper. Here's a simple example:
                 *
                 *     videojs.xhr({
 *       body: someJSONString,
 *       uri: "/foo",
 *       headers: {
 *         "Content-Type": "application/json"
 *       }
 *     }, function (err, resp, body) {
 *       // check resp.statusCode
 *     });
                 *
                 * Check out the [full
                 * documentation](https://github.com/Raynos/xhr/blob/v2.1.0/README.md)
                 * for more options.
                 *
                 * @param {Object} options settings for the request.
                 * @return {XMLHttpRequest|XDomainRequest} the request object.
                 * @see https://github.com/Raynos/xhr
                 */
                videojs.xhr = _xhr2['default'];

                /**
                 * TextTrack class
                 *
                 * @type {Function}
                 */
                videojs.TextTrack = _tracksTextTrackJs2['default'];

                /**
                 * Determines, via duck typing, whether or not a value is a DOM element.
                 *
                 * @method isEl
                 * @param  {Mixed} value
                 * @return {Boolean}
                 */
                videojs.isEl = Dom.isEl;

                /**
                 * Determines, via duck typing, whether or not a value is a text node.
                 *
                 * @method isTextNode
                 * @param  {Mixed} value
                 * @return {Boolean}
                 */
                videojs.isTextNode = Dom.isTextNode;

                /**
                 * Creates an element and applies properties.
                 *
                 * @method createEl
                 * @param  {String} [tagName='div'] Name of tag to be created.
                 * @param  {Object} [properties={}] Element properties to be applied.
                 * @param  {Object} [attributes={}] Element attributes to be applied.
                 * @return {Element}
                 */
                videojs.createEl = Dom.createEl;

                /**
                 * Check if an element has a CSS class
                 *
                 * @method hasClass
                 * @param {Element} element Element to check
                 * @param {String} classToCheck Classname to check
                 */
                videojs.hasClass = Dom.hasElClass;

                /**
                 * Add a CSS class name to an element
                 *
                 * @method addClass
                 * @param {Element} element    Element to add class name to
                 * @param {String} classToAdd Classname to add
                 */
                videojs.addClass = Dom.addElClass;

                /**
                 * Remove a CSS class name from an element
                 *
                 * @method removeClass
                 * @param {Element} element    Element to remove from class name
                 * @param {String} classToRemove Classname to remove
                 */
                videojs.removeClass = Dom.removeElClass;

                /**
                 * Adds or removes a CSS class name on an element depending on an optional
                 * condition or the presence/absence of the class name.
                 *
                 * @method toggleElClass
                 * @param  {Element} element
                 * @param  {String} classToToggle
                 * @param  {Boolean|Function} [predicate]
                 *         Can be a function that returns a Boolean. If `true`, the class
                 *         will be added; if `false`, the class will be removed. If not
                 *         given, the class will be added if not present and vice versa.
                 */
                videojs.toggleClass = Dom.toggleElClass;

                /**
                 * Apply attributes to an HTML element.
                 *
                 * @method setAttributes
                 * @param  {Element} el         Target element.
                 * @param  {Object=} attributes Element attributes to be applied.
                 */
                videojs.setAttributes = Dom.setElAttributes;

                /**
                 * Get an element's attribute values, as defined on the HTML tag
                 * Attributes are not the same as properties. They're defined on the tag
                 * or with setAttribute (which shouldn't be used with HTML)
                 * This will return true or false for boolean attributes.
                 *
                 * @method getAttributes
                 * @param  {Element} tag Element from which to get tag attributes
                 * @return {Object}
                 */
                videojs.getAttributes = Dom.getElAttributes;

                /**
                 * Empties the contents of an element.
                 *
                 * @method emptyEl
                 * @param  {Element} el
                 * @return {Element}
                 */
                videojs.emptyEl = Dom.emptyEl;

                /**
                 * Normalizes and appends content to an element.
                 *
                 * The content for an element can be passed in multiple types and
                 * combinations, whose behavior is as follows:
                 *
                 * - String
                 *   Normalized into a text node.
                 *
                 * - Element, TextNode
                 *   Passed through.
                 *
                 * - Array
                 *   A one-dimensional array of strings, elements, nodes, or functions (which
                 *   return single strings, elements, or nodes).
                 *
                 * - Function
                 *   If the sole argument, is expected to produce a string, element,
                 *   node, or array.
                 *
                 * @method appendContent
                 * @param  {Element} el
                 * @param  {String|Element|TextNode|Array|Function} content
                 * @return {Element}
                 */
                videojs.appendContent = Dom.appendContent;

                /**
                 * Normalizes and inserts content into an element; this is identical to
                 * `appendContent()`, except it empties the element first.
                 *
                 * The content for an element can be passed in multiple types and
                 * combinations, whose behavior is as follows:
                 *
                 * - String
                 *   Normalized into a text node.
                 *
                 * - Element, TextNode
                 *   Passed through.
                 *
                 * - Array
                 *   A one-dimensional array of strings, elements, nodes, or functions (which
                 *   return single strings, elements, or nodes).
                 *
                 * - Function
                 *   If the sole argument, is expected to produce a string, element,
                 *   node, or array.
                 *
                 * @method insertContent
                 * @param  {Element} el
                 * @param  {String|Element|TextNode|Array|Function} content
                 * @return {Element}
                 */
                videojs.insertContent = Dom.insertContent;

                /*
                 * Custom Universal Module Definition (UMD)
                 *
                 * Video.js will never be a non-browser lib so we can simplify UMD a bunch and
                 * still support requirejs and browserify. This also needs to be closure
                 * compiler compatible, so string keys are used.
                 */
                if (typeof define === 'function' && define['amd']) {
                    define('videojs', [], function () {
                        return videojs;
                    });

                    // checking that module is an object too because of umdjs/umd#35
                } else if (typeof exports === 'object' && typeof module === 'object') {
                    module['exports'] = videojs;
                }

                exports['default'] = videojs;
                module.exports = exports['default'];

            },{"../../src/js/utils/merge-options.js":140,"./component":67,"./event-target":101,"./extend.js":102,"./player":110,"./plugins.js":111,"./setup":115,"./tech/flash.js":118,"./tech/html5.js":119,"./tech/tech.js":121,"./tracks/text-track.js":130,"./utils/browser.js":131,"./utils/create-deprecation-proxy.js":133,"./utils/dom.js":134,"./utils/events.js":135,"./utils/fn.js":136,"./utils/format-time.js":137,"./utils/log.js":139,"./utils/stylesheet.js":141,"./utils/time-ranges.js":142,"./utils/url.js":144,"global/document":1,"global/window":2,"lodash-compat/object/merge":40,"object.assign":45,"xhr":56}]},{},[145])(145)
            });



            /* vtt.js - v0.12.1 (https://github.com/mozilla/vtt.js) built on 08-07-2015 */

            (function(root) {
                var vttjs = root.vttjs = {};
                var cueShim = vttjs.VTTCue;
                var regionShim = vttjs.VTTRegion;
                var oldVTTCue = root.VTTCue;
                var oldVTTRegion = root.VTTRegion;

                vttjs.shim = function() {
                    vttjs.VTTCue = cueShim;
                    vttjs.VTTRegion = regionShim;
                };

                vttjs.restore = function() {
                    vttjs.VTTCue = oldVTTCue;
                    vttjs.VTTRegion = oldVTTRegion;
                };
            }(this));

            /**
             * Copyright 2013 vtt.js Contributors
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */

            (function(root, vttjs) {

                var autoKeyword = "auto";
                var directionSetting = {
                    "": true,
                    "lr": true,
                    "rl": true
                };
                var alignSetting = {
                    "start": true,
                    "middle": true,
                    "end": true,
                    "left": true,
                    "right": true
                };

                function findDirectionSetting(value) {
                    if (typeof value !== "string") {
                        return false;
                    }
                    var dir = directionSetting[value.toLowerCase()];
                    return dir ? value.toLowerCase() : false;
                }

                function findAlignSetting(value) {
                    if (typeof value !== "string") {
                        return false;
                    }
                    var align = alignSetting[value.toLowerCase()];
                    return align ? value.toLowerCase() : false;
                }

                function extend(obj) {
                    var i = 1;
                    for (; i < arguments.length; i++) {
                        var cobj = arguments[i];
                        for (var p in cobj) {
                            obj[p] = cobj[p];
                        }
                    }

                    return obj;
                }

                function VTTCue(startTime, endTime, text) {
                    var cue = this;
                    var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
                    var baseObj = {};

                    if (isIE8) {
                        cue = document.createElement('custom');
                    } else {
                        baseObj.enumerable = true;
                    }

                    /**
                     * Shim implementation specific properties. These properties are not in
                     * the spec.
                     */

                        // Lets us know when the VTTCue's data has changed in such a way that we need
                        // to recompute its display state. This lets us compute its display state
                        // lazily.
                    cue.hasBeenReset = false;

                    /**
                     * VTTCue and TextTrackCue properties
                     * http://dev.w3.org/html5/webvtt/#vttcue-interface
                     */

                    var _id = "";
                    var _pauseOnExit = false;
                    var _startTime = startTime;
                    var _endTime = endTime;
                    var _text = text;
                    var _region = null;
                    var _vertical = "";
                    var _snapToLines = true;
                    var _line = "auto";
                    var _lineAlign = "start";
                    var _position = 50;
                    var _positionAlign = "middle";
                    var _size = 50;
                    var _align = "middle";

                    Object.defineProperty(cue,
                        "id", extend({}, baseObj, {
                            get: function() {
                                return _id;
                            },
                            set: function(value) {
                                _id = "" + value;
                            }
                        }));

                    Object.defineProperty(cue,
                        "pauseOnExit", extend({}, baseObj, {
                            get: function() {
                                return _pauseOnExit;
                            },
                            set: function(value) {
                                _pauseOnExit = !!value;
                            }
                        }));

                    Object.defineProperty(cue,
                        "startTime", extend({}, baseObj, {
                            get: function() {
                                return _startTime;
                            },
                            set: function(value) {
                                if (typeof value !== "number") {
                                    throw new TypeError("Start time must be set to a number.");
                                }
                                _startTime = value;
                                this.hasBeenReset = true;
                            }
                        }));

                    Object.defineProperty(cue,
                        "endTime", extend({}, baseObj, {
                            get: function() {
                                return _endTime;
                            },
                            set: function(value) {
                                if (typeof value !== "number") {
                                    throw new TypeError("End time must be set to a number.");
                                }
                                _endTime = value;
                                this.hasBeenReset = true;
                            }
                        }));

                    Object.defineProperty(cue,
                        "text", extend({}, baseObj, {
                            get: function() {
                                return _text;
                            },
                            set: function(value) {
                                _text = "" + value;
                                this.hasBeenReset = true;
                            }
                        }));

                    Object.defineProperty(cue,
                        "region", extend({}, baseObj, {
                            get: function() {
                                return _region;
                            },
                            set: function(value) {
                                _region = value;
                                this.hasBeenReset = true;
                            }
                        }));

                    Object.defineProperty(cue,
                        "vertical", extend({}, baseObj, {
                            get: function() {
                                return _vertical;
                            },
                            set: function(value) {
                                var setting = findDirectionSetting(value);
                                // Have to check for false because the setting an be an empty string.
                                if (setting === false) {
                                    throw new SyntaxError("An invalid or illegal string was specified.");
                                }
                                _vertical = setting;
                                this.hasBeenReset = true;
                            }
                        }));

                    Object.defineProperty(cue,
                        "snapToLines", extend({}, baseObj, {
                            get: function() {
                                return _snapToLines;
                            },
                            set: function(value) {
                                _snapToLines = !!value;
                                this.hasBeenReset = true;
                            }
                        }));

                    Object.defineProperty(cue,
                        "line", extend({}, baseObj, {
                            get: function() {
                                return _line;
                            },
                            set: function(value) {
                                if (typeof value !== "number" && value !== autoKeyword) {
                                    throw new SyntaxError("An invalid number or illegal string was specified.");
                                }
                                _line = value;
                                this.hasBeenReset = true;
                            }
                        }));

                    Object.defineProperty(cue,
                        "lineAlign", extend({}, baseObj, {
                            get: function() {
                                return _lineAlign;
                            },
                            set: function(value) {
                                var setting = findAlignSetting(value);
                                if (!setting) {
                                    throw new SyntaxError("An invalid or illegal string was specified.");
                                }
                                _lineAlign = setting;
                                this.hasBeenReset = true;
                            }
                        }));

                    Object.defineProperty(cue,
                        "position", extend({}, baseObj, {
                            get: function() {
                                return _position;
                            },
                            set: function(value) {
                                if (value < 0 || value > 100) {
                                    throw new Error("Position must be between 0 and 100.");
                                }
                                _position = value;
                                this.hasBeenReset = true;
                            }
                        }));

                    Object.defineProperty(cue,
                        "positionAlign", extend({}, baseObj, {
                            get: function() {
                                return _positionAlign;
                            },
                            set: function(value) {
                                var setting = findAlignSetting(value);
                                if (!setting) {
                                    throw new SyntaxError("An invalid or illegal string was specified.");
                                }
                                _positionAlign = setting;
                                this.hasBeenReset = true;
                            }
                        }));

                    Object.defineProperty(cue,
                        "size", extend({}, baseObj, {
                            get: function() {
                                return _size;
                            },
                            set: function(value) {
                                if (value < 0 || value > 100) {
                                    throw new Error("Size must be between 0 and 100.");
                                }
                                _size = value;
                                this.hasBeenReset = true;
                            }
                        }));

                    Object.defineProperty(cue,
                        "align", extend({}, baseObj, {
                            get: function() {
                                return _align;
                            },
                            set: function(value) {
                                var setting = findAlignSetting(value);
                                if (!setting) {
                                    throw new SyntaxError("An invalid or illegal string was specified.");
                                }
                                _align = setting;
                                this.hasBeenReset = true;
                            }
                        }));

                    /**
                     * Other <track> spec defined properties
                     */

                        // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
                    cue.displayState = undefined;

                    if (isIE8) {
                        return cue;
                    }
                }

                /**
                 * VTTCue methods
                 */

                VTTCue.prototype.getCueAsHTML = function() {
                    // Assume WebVTT.convertCueToDOMTree is on the global.
                    return WebVTT.convertCueToDOMTree(window, this.text);
                };

                root.VTTCue = root.VTTCue || VTTCue;
                vttjs.VTTCue = VTTCue;
            }(this, (this.vttjs || {})));

            /**
             * Copyright 2013 vtt.js Contributors
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */

            (function(root, vttjs) {

                var scrollSetting = {
                    "": true,
                    "up": true
                };

                function findScrollSetting(value) {
                    if (typeof value !== "string") {
                        return false;
                    }
                    var scroll = scrollSetting[value.toLowerCase()];
                    return scroll ? value.toLowerCase() : false;
                }

                function isValidPercentValue(value) {
                    return typeof value === "number" && (value >= 0 && value <= 100);
                }

                // VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface
                function VTTRegion() {
                    var _width = 100;
                    var _lines = 3;
                    var _regionAnchorX = 0;
                    var _regionAnchorY = 100;
                    var _viewportAnchorX = 0;
                    var _viewportAnchorY = 100;
                    var _scroll = "";

                    Object.defineProperties(this, {
                        "width": {
                            enumerable: true,
                            get: function() {
                                return _width;
                            },
                            set: function(value) {
                                if (!isValidPercentValue(value)) {
                                    throw new Error("Width must be between 0 and 100.");
                                }
                                _width = value;
                            }
                        },
                        "lines": {
                            enumerable: true,
                            get: function() {
                                return _lines;
                            },
                            set: function(value) {
                                if (typeof value !== "number") {
                                    throw new TypeError("Lines must be set to a number.");
                                }
                                _lines = value;
                            }
                        },
                        "regionAnchorY": {
                            enumerable: true,
                            get: function() {
                                return _regionAnchorY;
                            },
                            set: function(value) {
                                if (!isValidPercentValue(value)) {
                                    throw new Error("RegionAnchorX must be between 0 and 100.");
                                }
                                _regionAnchorY = value;
                            }
                        },
                        "regionAnchorX": {
                            enumerable: true,
                            get: function() {
                                return _regionAnchorX;
                            },
                            set: function(value) {
                                if(!isValidPercentValue(value)) {
                                    throw new Error("RegionAnchorY must be between 0 and 100.");
                                }
                                _regionAnchorX = value;
                            }
                        },
                        "viewportAnchorY": {
                            enumerable: true,
                            get: function() {
                                return _viewportAnchorY;
                            },
                            set: function(value) {
                                if (!isValidPercentValue(value)) {
                                    throw new Error("ViewportAnchorY must be between 0 and 100.");
                                }
                                _viewportAnchorY = value;
                            }
                        },
                        "viewportAnchorX": {
                            enumerable: true,
                            get: function() {
                                return _viewportAnchorX;
                            },
                            set: function(value) {
                                if (!isValidPercentValue(value)) {
                                    throw new Error("ViewportAnchorX must be between 0 and 100.");
                                }
                                _viewportAnchorX = value;
                            }
                        },
                        "scroll": {
                            enumerable: true,
                            get: function() {
                                return _scroll;
                            },
                            set: function(value) {
                                var setting = findScrollSetting(value);
                                // Have to check for false as an empty string is a legal value.
                                if (setting === false) {
                                    throw new SyntaxError("An invalid or illegal string was specified.");
                                }
                                _scroll = setting;
                            }
                        }
                    });
                }

                root.VTTRegion = root.VTTRegion || VTTRegion;
                vttjs.VTTRegion = VTTRegion;
            }(this, (this.vttjs || {})));

            /**
             * Copyright 2013 vtt.js Contributors
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */

            /* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
            /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */

            (function(global) {

                var _objCreate = Object.create || (function() {
                        function F() {}
                        return function(o) {
                            if (arguments.length !== 1) {
                                throw new Error('Object.create shim only accepts one parameter.');
                            }
                            F.prototype = o;
                            return new F();
                        };
                    })();

                // Creates a new ParserError object from an errorData object. The errorData
                // object should have default code and message properties. The default message
                // property can be overriden by passing in a message parameter.
                // See ParsingError.Errors below for acceptable errors.
                function ParsingError(errorData, message) {
                    this.name = "ParsingError";
                    this.code = errorData.code;
                    this.message = message || errorData.message;
                }
                ParsingError.prototype = _objCreate(Error.prototype);
                ParsingError.prototype.constructor = ParsingError;

                // ParsingError metadata for acceptable ParsingErrors.
                ParsingError.Errors = {
                    BadSignature: {
                        code: 0,
                        message: "Malformed WebVTT signature."
                    },
                    BadTimeStamp: {
                        code: 1,
                        message: "Malformed time stamp."
                    }
                };

                // Try to parse input as a time stamp.
                function parseTimeStamp(input) {

                    function computeSeconds(h, m, s, f) {
                        return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
                    }

                    var m = input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
                    if (!m) {
                        return null;
                    }

                    if (m[3]) {
                        // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
                        return computeSeconds(m[1], m[2], m[3].replace(":", ""), m[4]);
                    } else if (m[1] > 59) {
                        // Timestamp takes the form of [hours]:[minutes].[milliseconds]
                        // First position is hours as it's over 59.
                        return computeSeconds(m[1], m[2], 0,  m[4]);
                    } else {
                        // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
                        return computeSeconds(0, m[1], m[2], m[4]);
                    }
                }

                // A settings object holds key/value pairs and will ignore anything but the first
                // assignment to a specific key.
                function Settings() {
                    this.values = _objCreate(null);
                }

                Settings.prototype = {
                    // Only accept the first assignment to any key.
                    set: function(k, v) {
                        if (!this.get(k) && v !== "") {
                            this.values[k] = v;
                        }
                    },
                    // Return the value for a key, or a default value.
                    // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
                    // a number of possible default values as properties where 'defaultKey' is
                    // the key of the property that will be chosen; otherwise it's assumed to be
                    // a single value.
                    get: function(k, dflt, defaultKey) {
                        if (defaultKey) {
                            return this.has(k) ? this.values[k] : dflt[defaultKey];
                        }
                        return this.has(k) ? this.values[k] : dflt;
                    },
                    // Check whether we have a value for a key.
                    has: function(k) {
                        return k in this.values;
                    },
                    // Accept a setting if its one of the given alternatives.
                    alt: function(k, v, a) {
                        for (var n = 0; n < a.length; ++n) {
                            if (v === a[n]) {
                                this.set(k, v);
                                break;
                            }
                        }
                    },
                    // Accept a setting if its a valid (signed) integer.
                    integer: function(k, v) {
                        if (/^-?\d+$/.test(v)) { // integer
                            this.set(k, parseInt(v, 10));
                        }
                    },
                    // Accept a setting if its a valid percentage.
                    percent: function(k, v) {
                        var m;
                        if ((m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/))) {
                            v = parseFloat(v);
                            if (v >= 0 && v <= 100) {
                                this.set(k, v);
                                return true;
                            }
                        }
                        return false;
                    }
                };

                // Helper function to parse input into groups separated by 'groupDelim', and
                // interprete each group as a key/value pair separated by 'keyValueDelim'.
                function parseOptions(input, callback, keyValueDelim, groupDelim) {
                    var groups = groupDelim ? input.split(groupDelim) : [input];
                    for (var i in groups) {
                        if (typeof groups[i] !== "string") {
                            continue;
                        }
                        var kv = groups[i].split(keyValueDelim);
                        if (kv.length !== 2) {
                            continue;
                        }
                        var k = kv[0];
                        var v = kv[1];
                        callback(k, v);
                    }
                }

                function parseCue(input, cue, regionList) {
                    // Remember the original input if we need to throw an error.
                    var oInput = input;
                    // 4.1 WebVTT timestamp
                    function consumeTimeStamp() {
                        var ts = parseTimeStamp(input);
                        if (ts === null) {
                            throw new ParsingError(ParsingError.Errors.BadTimeStamp,
                                "Malformed timestamp: " + oInput);
                        }
                        // Remove time stamp from input.
                        input = input.replace(/^[^\sa-zA-Z-]+/, "");
                        return ts;
                    }

                    // 4.4.2 WebVTT cue settings
                    function consumeCueSettings(input, cue) {
                        var settings = new Settings();

                        parseOptions(input, function (k, v) {
                            switch (k) {
                                case "region":
                                    // Find the last region we parsed with the same region id.
                                    for (var i = regionList.length - 1; i >= 0; i--) {
                                        if (regionList[i].id === v) {
                                            settings.set(k, regionList[i].region);
                                            break;
                                        }
                                    }
                                    break;
                                case "vertical":
                                    settings.alt(k, v, ["rl", "lr"]);
                                    break;
                                case "line":
                                    var vals = v.split(","),
                                        vals0 = vals[0];
                                    settings.integer(k, vals0);
                                    settings.percent(k, vals0) ? settings.set("snapToLines", false) : null;
                                    settings.alt(k, vals0, ["auto"]);
                                    if (vals.length === 2) {
                                        settings.alt("lineAlign", vals[1], ["start", "middle", "end"]);
                                    }
                                    break;
                                case "position":
                                    vals = v.split(",");
                                    settings.percent(k, vals[0]);
                                    if (vals.length === 2) {
                                        settings.alt("positionAlign", vals[1], ["start", "middle", "end"]);
                                    }
                                    break;
                                case "size":
                                    settings.percent(k, v);
                                    break;
                                case "align":
                                    settings.alt(k, v, ["start", "middle", "end", "left", "right"]);
                                    break;
                            }
                        }, /:/, /\s/);

                        // Apply default values for any missing fields.
                        cue.region = settings.get("region", null);
                        cue.vertical = settings.get("vertical", "");
                        cue.line = settings.get("line", "auto");
                        cue.lineAlign = settings.get("lineAlign", "start");
                        cue.snapToLines = settings.get("snapToLines", true);
                        cue.size = settings.get("size", 100);
                        cue.align = settings.get("align", "middle");
                        cue.position = settings.get("position", {
                            start: 0,
                            left: 0,
                            middle: 50,
                            end: 100,
                            right: 100
                        }, cue.align);
                        cue.positionAlign = settings.get("positionAlign", {
                            start: "start",
                            left: "start",
                            middle: "middle",
                            end: "end",
                            right: "end"
                        }, cue.align);
                    }

                    function skipWhitespace() {
                        input = input.replace(/^\s+/, "");
                    }

                    // 4.1 WebVTT cue timings.
                    skipWhitespace();
                    cue.startTime = consumeTimeStamp();   // (1) collect cue start time
                    skipWhitespace();
                    if (input.substr(0, 3) !== "-->") {     // (3) next characters must match "-->"
                        throw new ParsingError(ParsingError.Errors.BadTimeStamp,
                            "Malformed time stamp (time stamps must be separated by '-->'): " +
                            oInput);
                    }
                    input = input.substr(3);
                    skipWhitespace();
                    cue.endTime = consumeTimeStamp();     // (5) collect cue end time

                    // 4.1 WebVTT cue settings list.
                    skipWhitespace();
                    consumeCueSettings(input, cue);
                }

                var ESCAPE = {
                    "&amp;": "&",
                    "&lt;": "<",
                    "&gt;": ">",
                    "&lrm;": "\u200e",
                    "&rlm;": "\u200f",
                    "&nbsp;": "\u00a0"
                };

                var TAG_NAME = {
                    c: "span",
                    i: "i",
                    b: "b",
                    u: "u",
                    ruby: "ruby",
                    rt: "rt",
                    v: "span",
                    lang: "span"
                };

                var TAG_ANNOTATION = {
                    v: "title",
                    lang: "lang"
                };

                var NEEDS_PARENT = {
                    rt: "ruby"
                };

                // Parse content into a document fragment.
                function parseContent(window, input) {
                    function nextToken() {
                        // Check for end-of-string.
                        if (!input) {
                            return null;
                        }

                        // Consume 'n' characters from the input.
                        function consume(result) {
                            input = input.substr(result.length);
                            return result;
                        }

                        var m = input.match(/^([^<]*)(<[^>]+>?)?/);
                        // If there is some text before the next tag, return it, otherwise return
                        // the tag.
                        return consume(m[1] ? m[1] : m[2]);
                    }

                    // Unescape a string 's'.
                    function unescape1(e) {
                        return ESCAPE[e];
                    }
                    function unescape(s) {
                        while ((m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/))) {
                            s = s.replace(m[0], unescape1);
                        }
                        return s;
                    }

                    function shouldAdd(current, element) {
                        return !NEEDS_PARENT[element.localName] ||
                            NEEDS_PARENT[element.localName] === current.localName;
                    }

                    // Create an element for this tag.
                    function createElement(type, annotation) {
                        var tagName = TAG_NAME[type];
                        if (!tagName) {
                            return null;
                        }
                        var element = window.document.createElement(tagName);
                        element.localName = tagName;
                        var name = TAG_ANNOTATION[type];
                        if (name && annotation) {
                            element[name] = annotation.trim();
                        }
                        return element;
                    }

                    var rootDiv = window.document.createElement("div"),
                        current = rootDiv,
                        t,
                        tagStack = [];

                    while ((t = nextToken()) !== null) {
                        if (t[0] === '<') {
                            if (t[1] === "/") {
                                // If the closing tag matches, move back up to the parent node.
                                if (tagStack.length &&
                                    tagStack[tagStack.length - 1] === t.substr(2).replace(">", "")) {
                                    tagStack.pop();
                                    current = current.parentNode;
                                }
                                // Otherwise just ignore the end tag.
                                continue;
                            }
                            var ts = parseTimeStamp(t.substr(1, t.length - 2));
                            var node;
                            if (ts) {
                                // Timestamps are lead nodes as well.
                                node = window.document.createProcessingInstruction("timestamp", ts);
                                current.appendChild(node);
                                continue;
                            }
                            var m = t.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
                            // If we can't parse the tag, skip to the next tag.
                            if (!m) {
                                continue;
                            }
                            // Try to construct an element, and ignore the tag if we couldn't.
                            node = createElement(m[1], m[3]);
                            if (!node) {
                                continue;
                            }
                            // Determine if the tag should be added based on the context of where it
                            // is placed in the cuetext.
                            if (!shouldAdd(current, node)) {
                                continue;
                            }
                            // Set the class list (as a list of classes, separated by space).
                            if (m[2]) {
                                node.className = m[2].substr(1).replace('.', ' ');
                            }
                            // Append the node to the current node, and enter the scope of the new
                            // node.
                            tagStack.push(m[1]);
                            current.appendChild(node);
                            current = node;
                            continue;
                        }

                        // Text nodes are leaf nodes.
                        current.appendChild(window.document.createTextNode(unescape(t)));
                    }

                    return rootDiv;
                }

                // This is a list of all the Unicode characters that have a strong
                // right-to-left category. What this means is that these characters are
                // written right-to-left for sure. It was generated by pulling all the strong
                // right-to-left characters out of the Unicode data table. That table can
                // found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt
                var strongRTLChars = [0x05BE, 0x05C0, 0x05C3, 0x05C6, 0x05D0, 0x05D1,
                    0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7, 0x05D8, 0x05D9, 0x05DA,
                    0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF, 0x05E0, 0x05E1, 0x05E2, 0x05E3,
                    0x05E4, 0x05E5, 0x05E6, 0x05E7, 0x05E8, 0x05E9, 0x05EA, 0x05F0, 0x05F1,
                    0x05F2, 0x05F3, 0x05F4, 0x0608, 0x060B, 0x060D, 0x061B, 0x061E, 0x061F,
                    0x0620, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627, 0x0628,
                    0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F, 0x0630, 0x0631,
                    0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637, 0x0638, 0x0639, 0x063A,
                    0x063B, 0x063C, 0x063D, 0x063E, 0x063F, 0x0640, 0x0641, 0x0642, 0x0643,
                    0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x0649, 0x064A, 0x066D, 0x066E,
                    0x066F, 0x0671, 0x0672, 0x0673, 0x0674, 0x0675, 0x0676, 0x0677, 0x0678,
                    0x0679, 0x067A, 0x067B, 0x067C, 0x067D, 0x067E, 0x067F, 0x0680, 0x0681,
                    0x0682, 0x0683, 0x0684, 0x0685, 0x0686, 0x0687, 0x0688, 0x0689, 0x068A,
                    0x068B, 0x068C, 0x068D, 0x068E, 0x068F, 0x0690, 0x0691, 0x0692, 0x0693,
                    0x0694, 0x0695, 0x0696, 0x0697, 0x0698, 0x0699, 0x069A, 0x069B, 0x069C,
                    0x069D, 0x069E, 0x069F, 0x06A0, 0x06A1, 0x06A2, 0x06A3, 0x06A4, 0x06A5,
                    0x06A6, 0x06A7, 0x06A8, 0x06A9, 0x06AA, 0x06AB, 0x06AC, 0x06AD, 0x06AE,
                    0x06AF, 0x06B0, 0x06B1, 0x06B2, 0x06B3, 0x06B4, 0x06B5, 0x06B6, 0x06B7,
                    0x06B8, 0x06B9, 0x06BA, 0x06BB, 0x06BC, 0x06BD, 0x06BE, 0x06BF, 0x06C0,
                    0x06C1, 0x06C2, 0x06C3, 0x06C4, 0x06C5, 0x06C6, 0x06C7, 0x06C8, 0x06C9,
                    0x06CA, 0x06CB, 0x06CC, 0x06CD, 0x06CE, 0x06CF, 0x06D0, 0x06D1, 0x06D2,
                    0x06D3, 0x06D4, 0x06D5, 0x06E5, 0x06E6, 0x06EE, 0x06EF, 0x06FA, 0x06FB,
                    0x06FC, 0x06FD, 0x06FE, 0x06FF, 0x0700, 0x0701, 0x0702, 0x0703, 0x0704,
                    0x0705, 0x0706, 0x0707, 0x0708, 0x0709, 0x070A, 0x070B, 0x070C, 0x070D,
                    0x070F, 0x0710, 0x0712, 0x0713, 0x0714, 0x0715, 0x0716, 0x0717, 0x0718,
                    0x0719, 0x071A, 0x071B, 0x071C, 0x071D, 0x071E, 0x071F, 0x0720, 0x0721,
                    0x0722, 0x0723, 0x0724, 0x0725, 0x0726, 0x0727, 0x0728, 0x0729, 0x072A,
                    0x072B, 0x072C, 0x072D, 0x072E, 0x072F, 0x074D, 0x074E, 0x074F, 0x0750,
                    0x0751, 0x0752, 0x0753, 0x0754, 0x0755, 0x0756, 0x0757, 0x0758, 0x0759,
                    0x075A, 0x075B, 0x075C, 0x075D, 0x075E, 0x075F, 0x0760, 0x0761, 0x0762,
                    0x0763, 0x0764, 0x0765, 0x0766, 0x0767, 0x0768, 0x0769, 0x076A, 0x076B,
                    0x076C, 0x076D, 0x076E, 0x076F, 0x0770, 0x0771, 0x0772, 0x0773, 0x0774,
                    0x0775, 0x0776, 0x0777, 0x0778, 0x0779, 0x077A, 0x077B, 0x077C, 0x077D,
                    0x077E, 0x077F, 0x0780, 0x0781, 0x0782, 0x0783, 0x0784, 0x0785, 0x0786,
                    0x0787, 0x0788, 0x0789, 0x078A, 0x078B, 0x078C, 0x078D, 0x078E, 0x078F,
                    0x0790, 0x0791, 0x0792, 0x0793, 0x0794, 0x0795, 0x0796, 0x0797, 0x0798,
                    0x0799, 0x079A, 0x079B, 0x079C, 0x079D, 0x079E, 0x079F, 0x07A0, 0x07A1,
                    0x07A2, 0x07A3, 0x07A4, 0x07A5, 0x07B1, 0x07C0, 0x07C1, 0x07C2, 0x07C3,
                    0x07C4, 0x07C5, 0x07C6, 0x07C7, 0x07C8, 0x07C9, 0x07CA, 0x07CB, 0x07CC,
                    0x07CD, 0x07CE, 0x07CF, 0x07D0, 0x07D1, 0x07D2, 0x07D3, 0x07D4, 0x07D5,
                    0x07D6, 0x07D7, 0x07D8, 0x07D9, 0x07DA, 0x07DB, 0x07DC, 0x07DD, 0x07DE,
                    0x07DF, 0x07E0, 0x07E1, 0x07E2, 0x07E3, 0x07E4, 0x07E5, 0x07E6, 0x07E7,
                    0x07E8, 0x07E9, 0x07EA, 0x07F4, 0x07F5, 0x07FA, 0x0800, 0x0801, 0x0802,
                    0x0803, 0x0804, 0x0805, 0x0806, 0x0807, 0x0808, 0x0809, 0x080A, 0x080B,
                    0x080C, 0x080D, 0x080E, 0x080F, 0x0810, 0x0811, 0x0812, 0x0813, 0x0814,
                    0x0815, 0x081A, 0x0824, 0x0828, 0x0830, 0x0831, 0x0832, 0x0833, 0x0834,
                    0x0835, 0x0836, 0x0837, 0x0838, 0x0839, 0x083A, 0x083B, 0x083C, 0x083D,
                    0x083E, 0x0840, 0x0841, 0x0842, 0x0843, 0x0844, 0x0845, 0x0846, 0x0847,
                    0x0848, 0x0849, 0x084A, 0x084B, 0x084C, 0x084D, 0x084E, 0x084F, 0x0850,
                    0x0851, 0x0852, 0x0853, 0x0854, 0x0855, 0x0856, 0x0857, 0x0858, 0x085E,
                    0x08A0, 0x08A2, 0x08A3, 0x08A4, 0x08A5, 0x08A6, 0x08A7, 0x08A8, 0x08A9,
                    0x08AA, 0x08AB, 0x08AC, 0x200F, 0xFB1D, 0xFB1F, 0xFB20, 0xFB21, 0xFB22,
                    0xFB23, 0xFB24, 0xFB25, 0xFB26, 0xFB27, 0xFB28, 0xFB2A, 0xFB2B, 0xFB2C,
                    0xFB2D, 0xFB2E, 0xFB2F, 0xFB30, 0xFB31, 0xFB32, 0xFB33, 0xFB34, 0xFB35,
                    0xFB36, 0xFB38, 0xFB39, 0xFB3A, 0xFB3B, 0xFB3C, 0xFB3E, 0xFB40, 0xFB41,
                    0xFB43, 0xFB44, 0xFB46, 0xFB47, 0xFB48, 0xFB49, 0xFB4A, 0xFB4B, 0xFB4C,
                    0xFB4D, 0xFB4E, 0xFB4F, 0xFB50, 0xFB51, 0xFB52, 0xFB53, 0xFB54, 0xFB55,
                    0xFB56, 0xFB57, 0xFB58, 0xFB59, 0xFB5A, 0xFB5B, 0xFB5C, 0xFB5D, 0xFB5E,
                    0xFB5F, 0xFB60, 0xFB61, 0xFB62, 0xFB63, 0xFB64, 0xFB65, 0xFB66, 0xFB67,
                    0xFB68, 0xFB69, 0xFB6A, 0xFB6B, 0xFB6C, 0xFB6D, 0xFB6E, 0xFB6F, 0xFB70,
                    0xFB71, 0xFB72, 0xFB73, 0xFB74, 0xFB75, 0xFB76, 0xFB77, 0xFB78, 0xFB79,
                    0xFB7A, 0xFB7B, 0xFB7C, 0xFB7D, 0xFB7E, 0xFB7F, 0xFB80, 0xFB81, 0xFB82,
                    0xFB83, 0xFB84, 0xFB85, 0xFB86, 0xFB87, 0xFB88, 0xFB89, 0xFB8A, 0xFB8B,
                    0xFB8C, 0xFB8D, 0xFB8E, 0xFB8F, 0xFB90, 0xFB91, 0xFB92, 0xFB93, 0xFB94,
                    0xFB95, 0xFB96, 0xFB97, 0xFB98, 0xFB99, 0xFB9A, 0xFB9B, 0xFB9C, 0xFB9D,
                    0xFB9E, 0xFB9F, 0xFBA0, 0xFBA1, 0xFBA2, 0xFBA3, 0xFBA4, 0xFBA5, 0xFBA6,
                    0xFBA7, 0xFBA8, 0xFBA9, 0xFBAA, 0xFBAB, 0xFBAC, 0xFBAD, 0xFBAE, 0xFBAF,
                    0xFBB0, 0xFBB1, 0xFBB2, 0xFBB3, 0xFBB4, 0xFBB5, 0xFBB6, 0xFBB7, 0xFBB8,
                    0xFBB9, 0xFBBA, 0xFBBB, 0xFBBC, 0xFBBD, 0xFBBE, 0xFBBF, 0xFBC0, 0xFBC1,
                    0xFBD3, 0xFBD4, 0xFBD5, 0xFBD6, 0xFBD7, 0xFBD8, 0xFBD9, 0xFBDA, 0xFBDB,
                    0xFBDC, 0xFBDD, 0xFBDE, 0xFBDF, 0xFBE0, 0xFBE1, 0xFBE2, 0xFBE3, 0xFBE4,
                    0xFBE5, 0xFBE6, 0xFBE7, 0xFBE8, 0xFBE9, 0xFBEA, 0xFBEB, 0xFBEC, 0xFBED,
                    0xFBEE, 0xFBEF, 0xFBF0, 0xFBF1, 0xFBF2, 0xFBF3, 0xFBF4, 0xFBF5, 0xFBF6,
                    0xFBF7, 0xFBF8, 0xFBF9, 0xFBFA, 0xFBFB, 0xFBFC, 0xFBFD, 0xFBFE, 0xFBFF,
                    0xFC00, 0xFC01, 0xFC02, 0xFC03, 0xFC04, 0xFC05, 0xFC06, 0xFC07, 0xFC08,
                    0xFC09, 0xFC0A, 0xFC0B, 0xFC0C, 0xFC0D, 0xFC0E, 0xFC0F, 0xFC10, 0xFC11,
                    0xFC12, 0xFC13, 0xFC14, 0xFC15, 0xFC16, 0xFC17, 0xFC18, 0xFC19, 0xFC1A,
                    0xFC1B, 0xFC1C, 0xFC1D, 0xFC1E, 0xFC1F, 0xFC20, 0xFC21, 0xFC22, 0xFC23,
                    0xFC24, 0xFC25, 0xFC26, 0xFC27, 0xFC28, 0xFC29, 0xFC2A, 0xFC2B, 0xFC2C,
                    0xFC2D, 0xFC2E, 0xFC2F, 0xFC30, 0xFC31, 0xFC32, 0xFC33, 0xFC34, 0xFC35,
                    0xFC36, 0xFC37, 0xFC38, 0xFC39, 0xFC3A, 0xFC3B, 0xFC3C, 0xFC3D, 0xFC3E,
                    0xFC3F, 0xFC40, 0xFC41, 0xFC42, 0xFC43, 0xFC44, 0xFC45, 0xFC46, 0xFC47,
                    0xFC48, 0xFC49, 0xFC4A, 0xFC4B, 0xFC4C, 0xFC4D, 0xFC4E, 0xFC4F, 0xFC50,
                    0xFC51, 0xFC52, 0xFC53, 0xFC54, 0xFC55, 0xFC56, 0xFC57, 0xFC58, 0xFC59,
                    0xFC5A, 0xFC5B, 0xFC5C, 0xFC5D, 0xFC5E, 0xFC5F, 0xFC60, 0xFC61, 0xFC62,
                    0xFC63, 0xFC64, 0xFC65, 0xFC66, 0xFC67, 0xFC68, 0xFC69, 0xFC6A, 0xFC6B,
                    0xFC6C, 0xFC6D, 0xFC6E, 0xFC6F, 0xFC70, 0xFC71, 0xFC72, 0xFC73, 0xFC74,
                    0xFC75, 0xFC76, 0xFC77, 0xFC78, 0xFC79, 0xFC7A, 0xFC7B, 0xFC7C, 0xFC7D,
                    0xFC7E, 0xFC7F, 0xFC80, 0xFC81, 0xFC82, 0xFC83, 0xFC84, 0xFC85, 0xFC86,
                    0xFC87, 0xFC88, 0xFC89, 0xFC8A, 0xFC8B, 0xFC8C, 0xFC8D, 0xFC8E, 0xFC8F,
                    0xFC90, 0xFC91, 0xFC92, 0xFC93, 0xFC94, 0xFC95, 0xFC96, 0xFC97, 0xFC98,
                    0xFC99, 0xFC9A, 0xFC9B, 0xFC9C, 0xFC9D, 0xFC9E, 0xFC9F, 0xFCA0, 0xFCA1,
                    0xFCA2, 0xFCA3, 0xFCA4, 0xFCA5, 0xFCA6, 0xFCA7, 0xFCA8, 0xFCA9, 0xFCAA,
                    0xFCAB, 0xFCAC, 0xFCAD, 0xFCAE, 0xFCAF, 0xFCB0, 0xFCB1, 0xFCB2, 0xFCB3,
                    0xFCB4, 0xFCB5, 0xFCB6, 0xFCB7, 0xFCB8, 0xFCB9, 0xFCBA, 0xFCBB, 0xFCBC,
                    0xFCBD, 0xFCBE, 0xFCBF, 0xFCC0, 0xFCC1, 0xFCC2, 0xFCC3, 0xFCC4, 0xFCC5,
                    0xFCC6, 0xFCC7, 0xFCC8, 0xFCC9, 0xFCCA, 0xFCCB, 0xFCCC, 0xFCCD, 0xFCCE,
                    0xFCCF, 0xFCD0, 0xFCD1, 0xFCD2, 0xFCD3, 0xFCD4, 0xFCD5, 0xFCD6, 0xFCD7,
                    0xFCD8, 0xFCD9, 0xFCDA, 0xFCDB, 0xFCDC, 0xFCDD, 0xFCDE, 0xFCDF, 0xFCE0,
                    0xFCE1, 0xFCE2, 0xFCE3, 0xFCE4, 0xFCE5, 0xFCE6, 0xFCE7, 0xFCE8, 0xFCE9,
                    0xFCEA, 0xFCEB, 0xFCEC, 0xFCED, 0xFCEE, 0xFCEF, 0xFCF0, 0xFCF1, 0xFCF2,
                    0xFCF3, 0xFCF4, 0xFCF5, 0xFCF6, 0xFCF7, 0xFCF8, 0xFCF9, 0xFCFA, 0xFCFB,
                    0xFCFC, 0xFCFD, 0xFCFE, 0xFCFF, 0xFD00, 0xFD01, 0xFD02, 0xFD03, 0xFD04,
                    0xFD05, 0xFD06, 0xFD07, 0xFD08, 0xFD09, 0xFD0A, 0xFD0B, 0xFD0C, 0xFD0D,
                    0xFD0E, 0xFD0F, 0xFD10, 0xFD11, 0xFD12, 0xFD13, 0xFD14, 0xFD15, 0xFD16,
                    0xFD17, 0xFD18, 0xFD19, 0xFD1A, 0xFD1B, 0xFD1C, 0xFD1D, 0xFD1E, 0xFD1F,
                    0xFD20, 0xFD21, 0xFD22, 0xFD23, 0xFD24, 0xFD25, 0xFD26, 0xFD27, 0xFD28,
                    0xFD29, 0xFD2A, 0xFD2B, 0xFD2C, 0xFD2D, 0xFD2E, 0xFD2F, 0xFD30, 0xFD31,
                    0xFD32, 0xFD33, 0xFD34, 0xFD35, 0xFD36, 0xFD37, 0xFD38, 0xFD39, 0xFD3A,
                    0xFD3B, 0xFD3C, 0xFD3D, 0xFD50, 0xFD51, 0xFD52, 0xFD53, 0xFD54, 0xFD55,
                    0xFD56, 0xFD57, 0xFD58, 0xFD59, 0xFD5A, 0xFD5B, 0xFD5C, 0xFD5D, 0xFD5E,
                    0xFD5F, 0xFD60, 0xFD61, 0xFD62, 0xFD63, 0xFD64, 0xFD65, 0xFD66, 0xFD67,
                    0xFD68, 0xFD69, 0xFD6A, 0xFD6B, 0xFD6C, 0xFD6D, 0xFD6E, 0xFD6F, 0xFD70,
                    0xFD71, 0xFD72, 0xFD73, 0xFD74, 0xFD75, 0xFD76, 0xFD77, 0xFD78, 0xFD79,
                    0xFD7A, 0xFD7B, 0xFD7C, 0xFD7D, 0xFD7E, 0xFD7F, 0xFD80, 0xFD81, 0xFD82,
                    0xFD83, 0xFD84, 0xFD85, 0xFD86, 0xFD87, 0xFD88, 0xFD89, 0xFD8A, 0xFD8B,
                    0xFD8C, 0xFD8D, 0xFD8E, 0xFD8F, 0xFD92, 0xFD93, 0xFD94, 0xFD95, 0xFD96,
                    0xFD97, 0xFD98, 0xFD99, 0xFD9A, 0xFD9B, 0xFD9C, 0xFD9D, 0xFD9E, 0xFD9F,
                    0xFDA0, 0xFDA1, 0xFDA2, 0xFDA3, 0xFDA4, 0xFDA5, 0xFDA6, 0xFDA7, 0xFDA8,
                    0xFDA9, 0xFDAA, 0xFDAB, 0xFDAC, 0xFDAD, 0xFDAE, 0xFDAF, 0xFDB0, 0xFDB1,
                    0xFDB2, 0xFDB3, 0xFDB4, 0xFDB5, 0xFDB6, 0xFDB7, 0xFDB8, 0xFDB9, 0xFDBA,
                    0xFDBB, 0xFDBC, 0xFDBD, 0xFDBE, 0xFDBF, 0xFDC0, 0xFDC1, 0xFDC2, 0xFDC3,
                    0xFDC4, 0xFDC5, 0xFDC6, 0xFDC7, 0xFDF0, 0xFDF1, 0xFDF2, 0xFDF3, 0xFDF4,
                    0xFDF5, 0xFDF6, 0xFDF7, 0xFDF8, 0xFDF9, 0xFDFA, 0xFDFB, 0xFDFC, 0xFE70,
                    0xFE71, 0xFE72, 0xFE73, 0xFE74, 0xFE76, 0xFE77, 0xFE78, 0xFE79, 0xFE7A,
                    0xFE7B, 0xFE7C, 0xFE7D, 0xFE7E, 0xFE7F, 0xFE80, 0xFE81, 0xFE82, 0xFE83,
                    0xFE84, 0xFE85, 0xFE86, 0xFE87, 0xFE88, 0xFE89, 0xFE8A, 0xFE8B, 0xFE8C,
                    0xFE8D, 0xFE8E, 0xFE8F, 0xFE90, 0xFE91, 0xFE92, 0xFE93, 0xFE94, 0xFE95,
                    0xFE96, 0xFE97, 0xFE98, 0xFE99, 0xFE9A, 0xFE9B, 0xFE9C, 0xFE9D, 0xFE9E,
                    0xFE9F, 0xFEA0, 0xFEA1, 0xFEA2, 0xFEA3, 0xFEA4, 0xFEA5, 0xFEA6, 0xFEA7,
                    0xFEA8, 0xFEA9, 0xFEAA, 0xFEAB, 0xFEAC, 0xFEAD, 0xFEAE, 0xFEAF, 0xFEB0,
                    0xFEB1, 0xFEB2, 0xFEB3, 0xFEB4, 0xFEB5, 0xFEB6, 0xFEB7, 0xFEB8, 0xFEB9,
                    0xFEBA, 0xFEBB, 0xFEBC, 0xFEBD, 0xFEBE, 0xFEBF, 0xFEC0, 0xFEC1, 0xFEC2,
                    0xFEC3, 0xFEC4, 0xFEC5, 0xFEC6, 0xFEC7, 0xFEC8, 0xFEC9, 0xFECA, 0xFECB,
                    0xFECC, 0xFECD, 0xFECE, 0xFECF, 0xFED0, 0xFED1, 0xFED2, 0xFED3, 0xFED4,
                    0xFED5, 0xFED6, 0xFED7, 0xFED8, 0xFED9, 0xFEDA, 0xFEDB, 0xFEDC, 0xFEDD,
                    0xFEDE, 0xFEDF, 0xFEE0, 0xFEE1, 0xFEE2, 0xFEE3, 0xFEE4, 0xFEE5, 0xFEE6,
                    0xFEE7, 0xFEE8, 0xFEE9, 0xFEEA, 0xFEEB, 0xFEEC, 0xFEED, 0xFEEE, 0xFEEF,
                    0xFEF0, 0xFEF1, 0xFEF2, 0xFEF3, 0xFEF4, 0xFEF5, 0xFEF6, 0xFEF7, 0xFEF8,
                    0xFEF9, 0xFEFA, 0xFEFB, 0xFEFC, 0x10800, 0x10801, 0x10802, 0x10803,
                    0x10804, 0x10805, 0x10808, 0x1080A, 0x1080B, 0x1080C, 0x1080D, 0x1080E,
                    0x1080F, 0x10810, 0x10811, 0x10812, 0x10813, 0x10814, 0x10815, 0x10816,
                    0x10817, 0x10818, 0x10819, 0x1081A, 0x1081B, 0x1081C, 0x1081D, 0x1081E,
                    0x1081F, 0x10820, 0x10821, 0x10822, 0x10823, 0x10824, 0x10825, 0x10826,
                    0x10827, 0x10828, 0x10829, 0x1082A, 0x1082B, 0x1082C, 0x1082D, 0x1082E,
                    0x1082F, 0x10830, 0x10831, 0x10832, 0x10833, 0x10834, 0x10835, 0x10837,
                    0x10838, 0x1083C, 0x1083F, 0x10840, 0x10841, 0x10842, 0x10843, 0x10844,
                    0x10845, 0x10846, 0x10847, 0x10848, 0x10849, 0x1084A, 0x1084B, 0x1084C,
                    0x1084D, 0x1084E, 0x1084F, 0x10850, 0x10851, 0x10852, 0x10853, 0x10854,
                    0x10855, 0x10857, 0x10858, 0x10859, 0x1085A, 0x1085B, 0x1085C, 0x1085D,
                    0x1085E, 0x1085F, 0x10900, 0x10901, 0x10902, 0x10903, 0x10904, 0x10905,
                    0x10906, 0x10907, 0x10908, 0x10909, 0x1090A, 0x1090B, 0x1090C, 0x1090D,
                    0x1090E, 0x1090F, 0x10910, 0x10911, 0x10912, 0x10913, 0x10914, 0x10915,
                    0x10916, 0x10917, 0x10918, 0x10919, 0x1091A, 0x1091B, 0x10920, 0x10921,
                    0x10922, 0x10923, 0x10924, 0x10925, 0x10926, 0x10927, 0x10928, 0x10929,
                    0x1092A, 0x1092B, 0x1092C, 0x1092D, 0x1092E, 0x1092F, 0x10930, 0x10931,
                    0x10932, 0x10933, 0x10934, 0x10935, 0x10936, 0x10937, 0x10938, 0x10939,
                    0x1093F, 0x10980, 0x10981, 0x10982, 0x10983, 0x10984, 0x10985, 0x10986,
                    0x10987, 0x10988, 0x10989, 0x1098A, 0x1098B, 0x1098C, 0x1098D, 0x1098E,
                    0x1098F, 0x10990, 0x10991, 0x10992, 0x10993, 0x10994, 0x10995, 0x10996,
                    0x10997, 0x10998, 0x10999, 0x1099A, 0x1099B, 0x1099C, 0x1099D, 0x1099E,
                    0x1099F, 0x109A0, 0x109A1, 0x109A2, 0x109A3, 0x109A4, 0x109A5, 0x109A6,
                    0x109A7, 0x109A8, 0x109A9, 0x109AA, 0x109AB, 0x109AC, 0x109AD, 0x109AE,
                    0x109AF, 0x109B0, 0x109B1, 0x109B2, 0x109B3, 0x109B4, 0x109B5, 0x109B6,
                    0x109B7, 0x109BE, 0x109BF, 0x10A00, 0x10A10, 0x10A11, 0x10A12, 0x10A13,
                    0x10A15, 0x10A16, 0x10A17, 0x10A19, 0x10A1A, 0x10A1B, 0x10A1C, 0x10A1D,
                    0x10A1E, 0x10A1F, 0x10A20, 0x10A21, 0x10A22, 0x10A23, 0x10A24, 0x10A25,
                    0x10A26, 0x10A27, 0x10A28, 0x10A29, 0x10A2A, 0x10A2B, 0x10A2C, 0x10A2D,
                    0x10A2E, 0x10A2F, 0x10A30, 0x10A31, 0x10A32, 0x10A33, 0x10A40, 0x10A41,
                    0x10A42, 0x10A43, 0x10A44, 0x10A45, 0x10A46, 0x10A47, 0x10A50, 0x10A51,
                    0x10A52, 0x10A53, 0x10A54, 0x10A55, 0x10A56, 0x10A57, 0x10A58, 0x10A60,
                    0x10A61, 0x10A62, 0x10A63, 0x10A64, 0x10A65, 0x10A66, 0x10A67, 0x10A68,
                    0x10A69, 0x10A6A, 0x10A6B, 0x10A6C, 0x10A6D, 0x10A6E, 0x10A6F, 0x10A70,
                    0x10A71, 0x10A72, 0x10A73, 0x10A74, 0x10A75, 0x10A76, 0x10A77, 0x10A78,
                    0x10A79, 0x10A7A, 0x10A7B, 0x10A7C, 0x10A7D, 0x10A7E, 0x10A7F, 0x10B00,
                    0x10B01, 0x10B02, 0x10B03, 0x10B04, 0x10B05, 0x10B06, 0x10B07, 0x10B08,
                    0x10B09, 0x10B0A, 0x10B0B, 0x10B0C, 0x10B0D, 0x10B0E, 0x10B0F, 0x10B10,
                    0x10B11, 0x10B12, 0x10B13, 0x10B14, 0x10B15, 0x10B16, 0x10B17, 0x10B18,
                    0x10B19, 0x10B1A, 0x10B1B, 0x10B1C, 0x10B1D, 0x10B1E, 0x10B1F, 0x10B20,
                    0x10B21, 0x10B22, 0x10B23, 0x10B24, 0x10B25, 0x10B26, 0x10B27, 0x10B28,
                    0x10B29, 0x10B2A, 0x10B2B, 0x10B2C, 0x10B2D, 0x10B2E, 0x10B2F, 0x10B30,
                    0x10B31, 0x10B32, 0x10B33, 0x10B34, 0x10B35, 0x10B40, 0x10B41, 0x10B42,
                    0x10B43, 0x10B44, 0x10B45, 0x10B46, 0x10B47, 0x10B48, 0x10B49, 0x10B4A,
                    0x10B4B, 0x10B4C, 0x10B4D, 0x10B4E, 0x10B4F, 0x10B50, 0x10B51, 0x10B52,
                    0x10B53, 0x10B54, 0x10B55, 0x10B58, 0x10B59, 0x10B5A, 0x10B5B, 0x10B5C,
                    0x10B5D, 0x10B5E, 0x10B5F, 0x10B60, 0x10B61, 0x10B62, 0x10B63, 0x10B64,
                    0x10B65, 0x10B66, 0x10B67, 0x10B68, 0x10B69, 0x10B6A, 0x10B6B, 0x10B6C,
                    0x10B6D, 0x10B6E, 0x10B6F, 0x10B70, 0x10B71, 0x10B72, 0x10B78, 0x10B79,
                    0x10B7A, 0x10B7B, 0x10B7C, 0x10B7D, 0x10B7E, 0x10B7F, 0x10C00, 0x10C01,
                    0x10C02, 0x10C03, 0x10C04, 0x10C05, 0x10C06, 0x10C07, 0x10C08, 0x10C09,
                    0x10C0A, 0x10C0B, 0x10C0C, 0x10C0D, 0x10C0E, 0x10C0F, 0x10C10, 0x10C11,
                    0x10C12, 0x10C13, 0x10C14, 0x10C15, 0x10C16, 0x10C17, 0x10C18, 0x10C19,
                    0x10C1A, 0x10C1B, 0x10C1C, 0x10C1D, 0x10C1E, 0x10C1F, 0x10C20, 0x10C21,
                    0x10C22, 0x10C23, 0x10C24, 0x10C25, 0x10C26, 0x10C27, 0x10C28, 0x10C29,
                    0x10C2A, 0x10C2B, 0x10C2C, 0x10C2D, 0x10C2E, 0x10C2F, 0x10C30, 0x10C31,
                    0x10C32, 0x10C33, 0x10C34, 0x10C35, 0x10C36, 0x10C37, 0x10C38, 0x10C39,
                    0x10C3A, 0x10C3B, 0x10C3C, 0x10C3D, 0x10C3E, 0x10C3F, 0x10C40, 0x10C41,
                    0x10C42, 0x10C43, 0x10C44, 0x10C45, 0x10C46, 0x10C47, 0x10C48, 0x1EE00,
                    0x1EE01, 0x1EE02, 0x1EE03, 0x1EE05, 0x1EE06, 0x1EE07, 0x1EE08, 0x1EE09,
                    0x1EE0A, 0x1EE0B, 0x1EE0C, 0x1EE0D, 0x1EE0E, 0x1EE0F, 0x1EE10, 0x1EE11,
                    0x1EE12, 0x1EE13, 0x1EE14, 0x1EE15, 0x1EE16, 0x1EE17, 0x1EE18, 0x1EE19,
                    0x1EE1A, 0x1EE1B, 0x1EE1C, 0x1EE1D, 0x1EE1E, 0x1EE1F, 0x1EE21, 0x1EE22,
                    0x1EE24, 0x1EE27, 0x1EE29, 0x1EE2A, 0x1EE2B, 0x1EE2C, 0x1EE2D, 0x1EE2E,
                    0x1EE2F, 0x1EE30, 0x1EE31, 0x1EE32, 0x1EE34, 0x1EE35, 0x1EE36, 0x1EE37,
                    0x1EE39, 0x1EE3B, 0x1EE42, 0x1EE47, 0x1EE49, 0x1EE4B, 0x1EE4D, 0x1EE4E,
                    0x1EE4F, 0x1EE51, 0x1EE52, 0x1EE54, 0x1EE57, 0x1EE59, 0x1EE5B, 0x1EE5D,
                    0x1EE5F, 0x1EE61, 0x1EE62, 0x1EE64, 0x1EE67, 0x1EE68, 0x1EE69, 0x1EE6A,
                    0x1EE6C, 0x1EE6D, 0x1EE6E, 0x1EE6F, 0x1EE70, 0x1EE71, 0x1EE72, 0x1EE74,
                    0x1EE75, 0x1EE76, 0x1EE77, 0x1EE79, 0x1EE7A, 0x1EE7B, 0x1EE7C, 0x1EE7E,
                    0x1EE80, 0x1EE81, 0x1EE82, 0x1EE83, 0x1EE84, 0x1EE85, 0x1EE86, 0x1EE87,
                    0x1EE88, 0x1EE89, 0x1EE8B, 0x1EE8C, 0x1EE8D, 0x1EE8E, 0x1EE8F, 0x1EE90,
                    0x1EE91, 0x1EE92, 0x1EE93, 0x1EE94, 0x1EE95, 0x1EE96, 0x1EE97, 0x1EE98,
                    0x1EE99, 0x1EE9A, 0x1EE9B, 0x1EEA1, 0x1EEA2, 0x1EEA3, 0x1EEA5, 0x1EEA6,
                    0x1EEA7, 0x1EEA8, 0x1EEA9, 0x1EEAB, 0x1EEAC, 0x1EEAD, 0x1EEAE, 0x1EEAF,
                    0x1EEB0, 0x1EEB1, 0x1EEB2, 0x1EEB3, 0x1EEB4, 0x1EEB5, 0x1EEB6, 0x1EEB7,
                    0x1EEB8, 0x1EEB9, 0x1EEBA, 0x1EEBB, 0x10FFFD];

                function determineBidi(cueDiv) {
                    var nodeStack = [],
                        text = "",
                        charCode;

                    if (!cueDiv || !cueDiv.childNodes) {
                        return "ltr";
                    }

                    function pushNodes(nodeStack, node) {
                        for (var i = node.childNodes.length - 1; i >= 0; i--) {
                            nodeStack.push(node.childNodes[i]);
                        }
                    }

                    function nextTextNode(nodeStack) {
                        if (!nodeStack || !nodeStack.length) {
                            return null;
                        }

                        var node = nodeStack.pop(),
                            text = node.textContent || node.innerText;
                        if (text) {
                            // TODO: This should match all unicode type B characters (paragraph
                            // separator characters). See issue #115.
                            var m = text.match(/^.*(\n|\r)/);
                            if (m) {
                                nodeStack.length = 0;
                                return m[0];
                            }
                            return text;
                        }
                        if (node.tagName === "ruby") {
                            return nextTextNode(nodeStack);
                        }
                        if (node.childNodes) {
                            pushNodes(nodeStack, node);
                            return nextTextNode(nodeStack);
                        }
                    }

                    pushNodes(nodeStack, cueDiv);
                    while ((text = nextTextNode(nodeStack))) {
                        for (var i = 0; i < text.length; i++) {
                            charCode = text.charCodeAt(i);
                            for (var j = 0; j < strongRTLChars.length; j++) {
                                if (strongRTLChars[j] === charCode) {
                                    return "rtl";
                                }
                            }
                        }
                    }
                    return "ltr";
                }

                function computeLinePos(cue) {
                    if (typeof cue.line === "number" &&
                        (cue.snapToLines || (cue.line >= 0 && cue.line <= 100))) {
                        return cue.line;
                    }
                    if (!cue.track || !cue.track.textTrackList ||
                        !cue.track.textTrackList.mediaElement) {
                        return -1;
                    }
                    var track = cue.track,
                        trackList = track.textTrackList,
                        count = 0;
                    for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {
                        if (trackList[i].mode === "showing") {
                            count++;
                        }
                    }
                    return ++count * -1;
                }

                function StyleBox() {
                }

                // Apply styles to a div. If there is no div passed then it defaults to the
                // div on 'this'.
                StyleBox.prototype.applyStyles = function(styles, div) {
                    div = div || this.div;
                    for (var prop in styles) {
                        if (styles.hasOwnProperty(prop)) {
                            div.style[prop] = styles[prop];
                        }
                    }
                };

                StyleBox.prototype.formatStyle = function(val, unit) {
                    return val === 0 ? 0 : val + unit;
                };

                // Constructs the computed display state of the cue (a div). Places the div
                // into the overlay which should be a block level element (usually a div).
                function CueStyleBox(window, cue, styleOptions) {
                    var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
                    var color = "rgba(255, 255, 255, 1)";
                    var backgroundColor = "rgba(0, 0, 0, 0.8)";

                    if (isIE8) {
                        color = "rgb(255, 255, 255)";
                        backgroundColor = "rgb(0, 0, 0)";
                    }

                    StyleBox.call(this);
                    this.cue = cue;

                    // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will
                    // have inline positioning and will function as the cue background box.
                    this.cueDiv = parseContent(window, cue.text);
                    var styles = {
                        color: color,
                        backgroundColor: backgroundColor,
                        position: "relative",
                        left: 0,
                        right: 0,
                        top: 0,
                        bottom: 0,
                        display: "inline"
                    };

                    if (!isIE8) {
                        styles.writingMode = cue.vertical === "" ? "horizontal-tb"
                            : cue.vertical === "lr" ? "vertical-lr"
                            : "vertical-rl";
                        styles.unicodeBidi = "plaintext";
                    }
                    this.applyStyles(styles, this.cueDiv);

                    // Create an absolutely positioned div that will be used to position the cue
                    // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS
                    // mirrors of them except "middle" which is "center" in CSS.
                    this.div = window.document.createElement("div");
                    styles = {
                        textAlign: cue.align === "middle" ? "center" : cue.align,
                        font: styleOptions.font,
                        whiteSpace: "pre-line",
                        position: "absolute"
                    };

                    if (!isIE8) {
                        styles.direction = determineBidi(this.cueDiv);
                        styles.writingMode = cue.vertical === "" ? "horizontal-tb"
                            : cue.vertical === "lr" ? "vertical-lr"
                            : "vertical-rl".
                            stylesunicodeBidi =  "plaintext";
                    }

                    this.applyStyles(styles);

                    this.div.appendChild(this.cueDiv);

                    // Calculate the distance from the reference edge of the viewport to the text
                    // position of the cue box. The reference edge will be resolved later when
                    // the box orientation styles are applied.
                    var textPos = 0;
                    switch (cue.positionAlign) {
                        case "start":
                            textPos = cue.position;
                            break;
                        case "middle":
                            textPos = cue.position - (cue.size / 2);
                            break;
                        case "end":
                            textPos = cue.position - cue.size;
                            break;
                    }

                    // Horizontal box orientation; textPos is the distance from the left edge of the
                    // area to the left edge of the box and cue.size is the distance extending to
                    // the right from there.
                    if (cue.vertical === "") {
                        this.applyStyles({
                            left:  this.formatStyle(textPos, "%"),
                            width: this.formatStyle(cue.size, "%")
                        });
                        // Vertical box orientation; textPos is the distance from the top edge of the
                        // area to the top edge of the box and cue.size is the height extending
                        // downwards from there.
                    } else {
                        this.applyStyles({
                            top: this.formatStyle(textPos, "%"),
                            height: this.formatStyle(cue.size, "%")
                        });
                    }

                    this.move = function(box) {
                        this.applyStyles({
                            top: this.formatStyle(box.top, "px"),
                            bottom: this.formatStyle(box.bottom, "px"),
                            left: this.formatStyle(box.left, "px"),
                            right: this.formatStyle(box.right, "px"),
                            height: this.formatStyle(box.height, "px"),
                            width: this.formatStyle(box.width, "px")
                        });
                    };
                }
                CueStyleBox.prototype = _objCreate(StyleBox.prototype);
                CueStyleBox.prototype.constructor = CueStyleBox;

                // Represents the co-ordinates of an Element in a way that we can easily
                // compute things with such as if it overlaps or intersects with another Element.
                // Can initialize it with either a StyleBox or another BoxPosition.
                function BoxPosition(obj) {
                    var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);

                    // Either a BoxPosition was passed in and we need to copy it, or a StyleBox
                    // was passed in and we need to copy the results of 'getBoundingClientRect'
                    // as the object returned is readonly. All co-ordinate values are in reference
                    // to the viewport origin (top left).
                    var lh, height, width, top;
                    if (obj.div) {
                        height = obj.div.offsetHeight;
                        width = obj.div.offsetWidth;
                        top = obj.div.offsetTop;

                        var rects = (rects = obj.div.childNodes) && (rects = rects[0]) &&
                            rects.getClientRects && rects.getClientRects();
                        obj = obj.div.getBoundingClientRect();
                        // In certain cases the outter div will be slightly larger then the sum of
                        // the inner div's lines. This could be due to bold text, etc, on some platforms.
                        // In this case we should get the average line height and use that. This will
                        // result in the desired behaviour.
                        lh = rects ? Math.max((rects[0] && rects[0].height) || 0, obj.height / rects.length)
                            : 0;

                    }
                    this.left = obj.left;
                    this.right = obj.right;
                    this.top = obj.top || top;
                    this.height = obj.height || height;
                    this.bottom = obj.bottom || (top + (obj.height || height));
                    this.width = obj.width || width;
                    this.lineHeight = lh !== undefined ? lh : obj.lineHeight;

                    if (isIE8 && !this.lineHeight) {
                        this.lineHeight = 13;
                    }
                }

                // Move the box along a particular axis. Optionally pass in an amount to move
                // the box. If no amount is passed then the default is the line height of the
                // box.
                BoxPosition.prototype.move = function(axis, toMove) {
                    toMove = toMove !== undefined ? toMove : this.lineHeight;
                    switch (axis) {
                        case "+x":
                            this.left += toMove;
                            this.right += toMove;
                            break;
                        case "-x":
                            this.left -= toMove;
                            this.right -= toMove;
                            break;
                        case "+y":
                            this.top += toMove;
                            this.bottom += toMove;
                            break;
                        case "-y":
                            this.top -= toMove;
                            this.bottom -= toMove;
                            break;
                    }
                };

                // Check if this box overlaps another box, b2.
                BoxPosition.prototype.overlaps = function(b2) {
                    return this.left < b2.right &&
                        this.right > b2.left &&
                        this.top < b2.bottom &&
                        this.bottom > b2.top;
                };

                // Check if this box overlaps any other boxes in boxes.
                BoxPosition.prototype.overlapsAny = function(boxes) {
                    for (var i = 0; i < boxes.length; i++) {
                        if (this.overlaps(boxes[i])) {
                            return true;
                        }
                    }
                    return false;
                };

                // Check if this box is within another box.
                BoxPosition.prototype.within = function(container) {
                    return this.top >= container.top &&
                        this.bottom <= container.bottom &&
                        this.left >= container.left &&
                        this.right <= container.right;
                };

                // Check if this box is entirely within the container or it is overlapping
                // on the edge opposite of the axis direction passed. For example, if "+x" is
                // passed and the box is overlapping on the left edge of the container, then
                // return true.
                BoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {
                    switch (axis) {
                        case "+x":
                            return this.left < container.left;
                        case "-x":
                            return this.right > container.right;
                        case "+y":
                            return this.top < container.top;
                        case "-y":
                            return this.bottom > container.bottom;
                    }
                };

                // Find the percentage of the area that this box is overlapping with another
                // box.
                BoxPosition.prototype.intersectPercentage = function(b2) {
                    var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),
                        y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),
                        intersectArea = x * y;
                    return intersectArea / (this.height * this.width);
                };

                // Convert the positions from this box to CSS compatible positions using
                // the reference container's positions. This has to be done because this
                // box's positions are in reference to the viewport origin, whereas, CSS
                // values are in referecne to their respective edges.
                BoxPosition.prototype.toCSSCompatValues = function(reference) {
                    return {
                        top: this.top - reference.top,
                        bottom: reference.bottom - this.bottom,
                        left: this.left - reference.left,
                        right: reference.right - this.right,
                        height: this.height,
                        width: this.width
                    };
                };

                // Get an object that represents the box's position without anything extra.
                // Can pass a StyleBox, HTMLElement, or another BoxPositon.
                BoxPosition.getSimpleBoxPosition = function(obj) {
                    var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;
                    var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;
                    var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;

                    obj = obj.div ? obj.div.getBoundingClientRect() :
                        obj.tagName ? obj.getBoundingClientRect() : obj;
                    var ret = {
                        left: obj.left,
                        right: obj.right,
                        top: obj.top || top,
                        height: obj.height || height,
                        bottom: obj.bottom || (top + (obj.height || height)),
                        width: obj.width || width
                    };
                    return ret;
                };

                // Move a StyleBox to its specified, or next best, position. The containerBox
                // is the box that contains the StyleBox, such as a div. boxPositions are
                // a list of other boxes that the styleBox can't overlap with.
                function moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {

                    // Find the best position for a cue box, b, on the video. The axis parameter
                    // is a list of axis, the order of which, it will move the box along. For example:
                    // Passing ["+x", "-x"] will move the box first along the x axis in the positive
                    // direction. If it doesn't find a good position for it there it will then move
                    // it along the x axis in the negative direction.
                    function findBestPosition(b, axis) {
                        var bestPosition,
                            specifiedPosition = new BoxPosition(b),
                            percentage = 1; // Highest possible so the first thing we get is better.

                        for (var i = 0; i < axis.length; i++) {
                            while (b.overlapsOppositeAxis(containerBox, axis[i]) ||
                            (b.within(containerBox) && b.overlapsAny(boxPositions))) {
                                b.move(axis[i]);
                            }
                            // We found a spot where we aren't overlapping anything. This is our
                            // best position.
                            if (b.within(containerBox)) {
                                return b;
                            }
                            var p = b.intersectPercentage(containerBox);
                            // If we're outside the container box less then we were on our last try
                            // then remember this position as the best position.
                            if (percentage > p) {
                                bestPosition = new BoxPosition(b);
                                percentage = p;
                            }
                            // Reset the box position to the specified position.
                            b = new BoxPosition(specifiedPosition);
                        }
                        return bestPosition || specifiedPosition;
                    }

                    var boxPosition = new BoxPosition(styleBox),
                        cue = styleBox.cue,
                        linePos = computeLinePos(cue),
                        axis = [];

                    // If we have a line number to align the cue to.
                    if (cue.snapToLines) {
                        var size;
                        switch (cue.vertical) {
                            case "":
                                axis = [ "+y", "-y" ];
                                size = "height";
                                break;
                            case "rl":
                                axis = [ "+x", "-x" ];
                                size = "width";
                                break;
                            case "lr":
                                axis = [ "-x", "+x" ];
                                size = "width";
                                break;
                        }

                        var step = boxPosition.lineHeight,
                            position = step * Math.round(linePos),
                            maxPosition = containerBox[size] + step,
                            initialAxis = axis[0];

                        // If the specified intial position is greater then the max position then
                        // clamp the box to the amount of steps it would take for the box to
                        // reach the max position.
                        if (Math.abs(position) > maxPosition) {
                            position = position < 0 ? -1 : 1;
                            position *= Math.ceil(maxPosition / step) * step;
                        }

                        // If computed line position returns negative then line numbers are
                        // relative to the bottom of the video instead of the top. Therefore, we
                        // need to increase our initial position by the length or width of the
                        // video, depending on the writing direction, and reverse our axis directions.
                        if (linePos < 0) {
                            position += cue.vertical === "" ? containerBox.height : containerBox.width;
                            axis = axis.reverse();
                        }

                        // Move the box to the specified position. This may not be its best
                        // position.
                        boxPosition.move(initialAxis, position);

                    } else {
                        // If we have a percentage line value for the cue.
                        var calculatedPercentage = (boxPosition.lineHeight / containerBox.height) * 100;

                        switch (cue.lineAlign) {
                            case "middle":
                                linePos -= (calculatedPercentage / 2);
                                break;
                            case "end":
                                linePos -= calculatedPercentage;
                                break;
                        }

                        // Apply initial line position to the cue box.
                        switch (cue.vertical) {
                            case "":
                                styleBox.applyStyles({
                                    top: styleBox.formatStyle(linePos, "%")
                                });
                                break;
                            case "rl":
                                styleBox.applyStyles({
                                    left: styleBox.formatStyle(linePos, "%")
                                });
                                break;
                            case "lr":
                                styleBox.applyStyles({
                                    right: styleBox.formatStyle(linePos, "%")
                                });
                                break;
                        }

                        axis = [ "+y", "-x", "+x", "-y" ];

                        // Get the box position again after we've applied the specified positioning
                        // to it.
                        boxPosition = new BoxPosition(styleBox);
                    }

                    var bestPosition = findBestPosition(boxPosition, axis);
                    styleBox.move(bestPosition.toCSSCompatValues(containerBox));
                }

                function WebVTT() {
                    // Nothing
                }

                // Helper to allow strings to be decoded instead of the default binary utf8 data.
                WebVTT.StringDecoder = function() {
                    return {
                        decode: function(data) {
                            if (!data) {
                                return "";
                            }
                            if (typeof data !== "string") {
                                throw new Error("Error - expected string data.");
                            }
                            return decodeURIComponent(encodeURIComponent(data));
                        }
                    };
                };

                WebVTT.convertCueToDOMTree = function(window, cuetext) {
                    if (!window || !cuetext) {
                        return null;
                    }
                    return parseContent(window, cuetext);
                };

                var FONT_SIZE_PERCENT = 0.05;
                var FONT_STYLE = "sans-serif";
                var CUE_BACKGROUND_PADDING = "1.5%";

                // Runs the processing model over the cues and regions passed to it.
                // @param overlay A block level element (usually a div) that the computed cues
                //                and regions will be placed into.
                WebVTT.processCues = function(window, cues, overlay) {
                    if (!window || !cues || !overlay) {
                        return null;
                    }

                    // Remove all previous children.
                    while (overlay.firstChild) {
                        overlay.removeChild(overlay.firstChild);
                    }

                    var paddedOverlay = window.document.createElement("div");
                    paddedOverlay.style.position = "absolute";
                    paddedOverlay.style.left = "0";
                    paddedOverlay.style.right = "0";
                    paddedOverlay.style.top = "0";
                    paddedOverlay.style.bottom = "0";
                    paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;
                    overlay.appendChild(paddedOverlay);

                    // Determine if we need to compute the display states of the cues. This could
                    // be the case if a cue's state has been changed since the last computation or
                    // if it has not been computed yet.
                    function shouldCompute(cues) {
                        for (var i = 0; i < cues.length; i++) {
                            if (cues[i].hasBeenReset || !cues[i].displayState) {
                                return true;
                            }
                        }
                        return false;
                    }

                    // We don't need to recompute the cues' display states. Just reuse them.
                    if (!shouldCompute(cues)) {
                        for (var i = 0; i < cues.length; i++) {
                            paddedOverlay.appendChild(cues[i].displayState);
                        }
                        return;
                    }

                    var boxPositions = [],
                        containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),
                        fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;
                    var styleOptions = {
                        font: fontSize + "px " + FONT_STYLE
                    };

                    (function() {
                        var styleBox, cue;

                        for (var i = 0; i < cues.length; i++) {
                            cue = cues[i];

                            // Compute the intial position and styles of the cue div.
                            styleBox = new CueStyleBox(window, cue, styleOptions);
                            paddedOverlay.appendChild(styleBox.div);

                            // Move the cue div to it's correct line position.
                            moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);

                            // Remember the computed div so that we don't have to recompute it later
                            // if we don't have too.
                            cue.displayState = styleBox.div;

                            boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));
                        }
                    })();
                };

                WebVTT.Parser = function(window, vttjs, decoder) {
                    if (!decoder) {
                        decoder = vttjs;
                        vttjs = {};
                    }
                    if (!vttjs) {
                        vttjs = {};
                    }

                    this.window = window;
                    this.vttjs = vttjs;
                    this.state = "INITIAL";
                    this.buffer = "";
                    this.decoder = decoder || new TextDecoder("utf8");
                    this.regionList = [];
                };

                WebVTT.Parser.prototype = {
                    // If the error is a ParsingError then report it to the consumer if
                    // possible. If it's not a ParsingError then throw it like normal.
                    reportOrThrowError: function(e) {
                        if (e instanceof ParsingError) {
                            this.onparsingerror && this.onparsingerror(e);
                        } else {
                            throw e;
                        }
                    },
                    parse: function (data) {
                        var self = this;

                        // If there is no data then we won't decode it, but will just try to parse
                        // whatever is in buffer already. This may occur in circumstances, for
                        // example when flush() is called.
                        if (data) {
                            // Try to decode the data that we received.
                            self.buffer += self.decoder.decode(data, {stream: true});
                        }

                        function collectNextLine() {
                            var buffer = self.buffer;
                            var pos = 0;
                            while (pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n') {
                                ++pos;
                            }
                            var line = buffer.substr(0, pos);
                            // Advance the buffer early in case we fail below.
                            if (buffer[pos] === '\r') {
                                ++pos;
                            }
                            if (buffer[pos] === '\n') {
                                ++pos;
                            }
                            self.buffer = buffer.substr(pos);
                            return line;
                        }

                        // 3.4 WebVTT region and WebVTT region settings syntax
                        function parseRegion(input) {
                            var settings = new Settings();

                            parseOptions(input, function (k, v) {
                                switch (k) {
                                    case "id":
                                        settings.set(k, v);
                                        break;
                                    case "width":
                                        settings.percent(k, v);
                                        break;
                                    case "lines":
                                        settings.integer(k, v);
                                        break;
                                    case "regionanchor":
                                    case "viewportanchor":
                                        var xy = v.split(',');
                                        if (xy.length !== 2) {
                                            break;
                                        }
                                        // We have to make sure both x and y parse, so use a temporary
                                        // settings object here.
                                        var anchor = new Settings();
                                        anchor.percent("x", xy[0]);
                                        anchor.percent("y", xy[1]);
                                        if (!anchor.has("x") || !anchor.has("y")) {
                                            break;
                                        }
                                        settings.set(k + "X", anchor.get("x"));
                                        settings.set(k + "Y", anchor.get("y"));
                                        break;
                                    case "scroll":
                                        settings.alt(k, v, ["up"]);
                                        break;
                                }
                            }, /=/, /\s/);

                            // Create the region, using default values for any values that were not
                            // specified.
                            if (settings.has("id")) {
                                var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();
                                region.width = settings.get("width", 100);
                                region.lines = settings.get("lines", 3);
                                region.regionAnchorX = settings.get("regionanchorX", 0);
                                region.regionAnchorY = settings.get("regionanchorY", 100);
                                region.viewportAnchorX = settings.get("viewportanchorX", 0);
                                region.viewportAnchorY = settings.get("viewportanchorY", 100);
                                region.scroll = settings.get("scroll", "");
                                // Register the region.
                                self.onregion && self.onregion(region);
                                // Remember the VTTRegion for later in case we parse any VTTCues that
                                // reference it.
                                self.regionList.push({
                                    id: settings.get("id"),
                                    region: region
                                });
                            }
                        }

                        // 3.2 WebVTT metadata header syntax
                        function parseHeader(input) {
                            parseOptions(input, function (k, v) {
                                switch (k) {
                                    case "Region":
                                        // 3.3 WebVTT region metadata header syntax
                                        parseRegion(v);
                                        break;
                                }
                            }, /:/);
                        }

                        // 5.1 WebVTT file parsing.
                        try {
                            var line;
                            if (self.state === "INITIAL") {
                                // We can't start parsing until we have the first line.
                                if (!/\r\n|\n/.test(self.buffer)) {
                                    return this;
                                }

                                line = collectNextLine();

                                var m = line.match(/^WEBVTT([ \t].*)?$/);
                                if (!m || !m[0]) {
                                    throw new ParsingError(ParsingError.Errors.BadSignature);
                                }

                                self.state = "HEADER";
                            }

                            var alreadyCollectedLine = false;
                            while (self.buffer) {
                                // We can't parse a line until we have the full line.
                                if (!/\r\n|\n/.test(self.buffer)) {
                                    return this;
                                }

                                if (!alreadyCollectedLine) {
                                    line = collectNextLine();
                                } else {
                                    alreadyCollectedLine = false;
                                }

                                switch (self.state) {
                                    case "HEADER":
                                        // 13-18 - Allow a header (metadata) under the WEBVTT line.
                                        if (/:/.test(line)) {
                                            parseHeader(line);
                                        } else if (!line) {
                                            // An empty line terminates the header and starts the body (cues).
                                            self.state = "ID";
                                        }
                                        continue;
                                    case "NOTE":
                                        // Ignore NOTE blocks.
                                        if (!line) {
                                            self.state = "ID";
                                        }
                                        continue;
                                    case "ID":
                                        // Check for the start of NOTE blocks.
                                        if (/^NOTE($|[ \t])/.test(line)) {
                                            self.state = "NOTE";
                                            break;
                                        }
                                        // 19-29 - Allow any number of line terminators, then initialize new cue values.
                                        if (!line) {
                                            continue;
                                        }
                                        self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, "");
                                        self.state = "CUE";
                                        // 30-39 - Check if self line contains an optional identifier or timing data.
                                        if (line.indexOf("-->") === -1) {
                                            self.cue.id = line;
                                            continue;
                                        }
                                    // Process line as start of a cue.
                                    /*falls through*/
                                    case "CUE":
                                        // 40 - Collect cue timings and settings.
                                        try {
                                            parseCue(line, self.cue, self.regionList);
                                        } catch (e) {
                                            self.reportOrThrowError(e);
                                            // In case of an error ignore rest of the cue.
                                            self.cue = null;
                                            self.state = "BADCUE";
                                            continue;
                                        }
                                        self.state = "CUETEXT";
                                        continue;
                                    case "CUETEXT":
                                        var hasSubstring = line.indexOf("-->") !== -1;
                                        // 34 - If we have an empty line then report the cue.
                                        // 35 - If we have the special substring '-->' then report the cue,
                                        // but do not collect the line as we need to process the current
                                        // one as a new cue.
                                        if (!line || hasSubstring && (alreadyCollectedLine = true)) {
                                            // We are done parsing self cue.
                                            self.oncue && self.oncue(self.cue);
                                            self.cue = null;
                                            self.state = "ID";
                                            continue;
                                        }
                                        if (self.cue.text) {
                                            self.cue.text += "\n";
                                        }
                                        self.cue.text += line;
                                        continue;
                                    case "BADCUE": // BADCUE
                                        // 54-62 - Collect and discard the remaining cue.
                                        if (!line) {
                                            self.state = "ID";
                                        }
                                        continue;
                                }
                            }
                        } catch (e) {
                            self.reportOrThrowError(e);

                            // If we are currently parsing a cue, report what we have.
                            if (self.state === "CUETEXT" && self.cue && self.oncue) {
                                self.oncue(self.cue);
                            }
                            self.cue = null;
                            // Enter BADWEBVTT state if header was not parsed correctly otherwise
                            // another exception occurred so enter BADCUE state.
                            self.state = self.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
                        }
                        return this;
                    },
                    flush: function () {
                        var self = this;
                        try {
                            // Finish decoding the stream.
                            self.buffer += self.decoder.decode();
                            // Synthesize the end of the current cue or region.
                            if (self.cue || self.state === "HEADER") {
                                self.buffer += "\n\n";
                                self.parse();
                            }
                            // If we've flushed, parsed, and we're still on the INITIAL state then
                            // that means we don't have enough of the stream to parse the first
                            // line.
                            if (self.state === "INITIAL") {
                                throw new ParsingError(ParsingError.Errors.BadSignature);
                            }
                        } catch(e) {
                            self.reportOrThrowError(e);
                        }
                        self.onflush && self.onflush();
                        return this;
                    }
                };

                global.WebVTT = WebVTT;

            }(this, (this.vttjs || {})));

            ; browserify_shim__define__module__export__(typeof videojs != "undefined" ? videojs : window.videojs);

        }).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],158:[function(require,module,exports){
    (function (global){
        ; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
            (function() {
                'use strict';

                var Html5 = videojs.getComponent('Html5'),
                    source = null,
                    cachedlicenseServerURL,
                    widevineUrn = "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed",
                    widevineKeySys = "com.widevine.alpha",
                    playreadyUrn = "urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95",
                    playreadyKeySys = "com.microsoft.playready";



                var interpreContentProtection = function(schemeIdUri, contentProtection) {
                    /*
                     I'm expecting source to have this structure:

                     source: {
                     src: mpd
                     licenseServers: {
                     'widevine': 'http://servidorwidevine.com/blah',
                     'playready': 'http://servidorplayready.com/bleh'
                     }
                     }
                     */

                    if (!source) {
                        console.warn('source has not DRM data.');
                        return null;
                    }

                    if ( (schemeIdUri === widevineUrn) && source.licenseServers['widevine'] ) {
                        return [{
                            keySystem: widevineKeySys,
                            licenseServerUrl: source.licenseServers['widevine']
                        }];
                    }

                    if ( (schemeIdUri === playreadyUrn) && source.licenseServers['playready'] ) {
                        return [{
                            keySystem: playreadyKeySys,
                            licenseServerUrl: source.licenseServers['playready']
                        }];
                    }


                    console.warn('schemeIdUri is not valid.');
                    return null;
                };

                var Shaka = videojs.extend(Html5, {
                    constructor: function(options, ready) {
                        var player = this;

                        // Remove the application/dash+xml source so that the browser
                        // doesn't try to play it
                        source = options.source;
                        delete options.source;

                        Html5.call(player, options, ready);
                        shaka.polyfill.installAll();

                        var video = player.el();
                        this.shakaPlayer = new shaka.player.Player(video);
                        window.shakaPlayer = this.shakaPlayer;
                        var estimator = new shaka.util.EWMABandwidthEstimator();
                        var shakaSource;
                        if (source.licenseServers && ( Object.getOwnPropertyNames(source.licenseServers).length > 0 )) {
                            shakaSource = new shaka.player.DashVideoSource(source.src, interpreContentProtection, estimator);
                        }
                        else {
                            shakaSource = new shaka.player.DashVideoSource(source.src, null, estimator);
                        }

                        this.shakaPlayer.load(shakaSource).then(function() {
                            if (options.shakaMenus) {
                                player.initShakaMenus();
                            }
                        });
                    },

                    initShakaMenus: function() {
                        var player = this;
                        var shakaPlayer = this.shakaPlayer;

                        player.options_['playbackRates'] = [];
                        var playerEL = player.el();
                        playerEL.className += ' vjs-shaka';

                        var shakaButton = document.createElement('div');
                        shakaButton.setAttribute('class', 'vjs-shaka-button vjs-menu-button vjs-menu-button-popup vjs-control vjs-icon-cog');

                        var shakaMenu = document.createElement('div');
                        shakaMenu.setAttribute('class', 'vjs-menu');
                        shakaButton.appendChild(shakaMenu);

                        var shakaMenuContent = document.createElement('ul');
                        shakaMenuContent.setAttribute('class', 'vjs-menu-content');
                        shakaMenu.appendChild(shakaMenuContent);

                        var videoTracks = shakaPlayer.getVideoTracks();

                        var el = document.createElement('li');
                        el.setAttribute('class', 'vjs-menu-item vjs-selected');
                        var label = document.createElement('span');
                        setInnerText(label, "Auto");
                        el.appendChild(label);
                        el.addEventListener('click', function() {
                            var selected = shakaMenuContent.querySelector('.vjs-selected');
                            if (selected) {
                                selected.className = selected.className.replace('vjs-selected', '')
                            }
                            this.className = this.className + " vjs-selected";
                            shakaPlayer.configure({ 'enableAdaptation': true });
                        });
                        shakaMenuContent.appendChild(el);

                        for (var i = 0; i < videoTracks.length; ++i) {
                            (function() {
                                var index = videoTracks[i].id;
                                var rate = (videoTracks[i].bandwidth / 1024).toFixed(0);
                                var height = videoTracks[i].height;
                                var el = document.createElement('li');
                                el.setAttribute('class', 'vjs-menu-item');
                                el.setAttribute('data-val', rate);
                                var label = document.createElement('span');
                                setInnerText(label, height + "p (" + rate + "k)");
                                el.appendChild(label);
                                el.addEventListener('click', function() {
                                    var selected = shakaMenuContent.querySelector('.vjs-selected');
                                    if (selected) {
                                        selected.className = selected.className.replace('vjs-selected', '')
                                    }
                                    this.className = this.className + " vjs-selected";
                                    shakaPlayer.configure({ 'enableAdaptation': false });
                                    shakaPlayer.selectVideoTrack(index, false);
                                    // TODO: Make opt_clearBuffer a property of this tech
                                    // If above is set to true, you may wish to uncomment the below
                                    // player.trigger('waiting');
                                })
                                shakaMenuContent.appendChild(el);
                            }())
                        }
                        var controlBar = playerEL.parentNode.querySelector('.vjs-control-bar');

                        if (controlBar) {
                            controlBar.insertBefore(shakaButton, controlBar.lastChild);
                        }
                    }
                })

                Shaka.isSupported = function() {
                    return !!window.MediaSource;
                };

                Shaka.canPlaySource = function(srcObj) {
                    if (srcObj.type === 'application/dash+xml') {
                        return 'maybe';
                    } else {
                        return '';
                    }
                };

                Shaka.reload = function(channelMpd, source_) {
                    window.shakaPlayer.unload();

                    var estimator = new shaka.util.EWMABandwidthEstimator();
                    var abrManager = new shaka.media.SimpleAbrManager();
                    var shakaSource;

                    if (source_) {
                        source = source_;
                    }

                    shakaSource = new shaka.player.DashVideoSource(
                        channelMpd, interpreContentProtection, estimator, abrManager);

                    window.shakaPlayer.load(shakaSource);
                };


                videojs.options.techOrder.unshift('shaka');

                function setInnerText(element, text) {
                    if (typeof element === 'undefined') {
                        return false;
                    }
                    var textProperty = ('innerText' in element) ? 'innerText' : 'textContent';
                    try {
                        element[textProperty] = text;
                    } catch (anException) {
                        element.setAttribute('innerText', text);
                    }
                }

                videojs.registerTech('Shaka', Shaka);
                window.Shaka = Shaka;
            })();

            ; browserify_shim__define__module__export__(typeof videojs_shaka_tech != "undefined" ? videojs_shaka_tech : window.videojs_shaka_tech);

        }).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],159:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
    (function() {
        "use strict";
        var xml2js;

        xml2js = require('../lib/xml2js');

        exports.stripBOM = function(str) {
            if (str[0] === '\uFEFF') {
                return str.substring(1);
            } else {
                return str;
            }
        };

    }).call(this);

},{"../lib/xml2js":161}],160:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
    (function() {
        "use strict";
        var prefixMatch;

        prefixMatch = new RegExp(/(?!xmlns)^.*:/);

        exports.normalize = function(str) {
            return str.toLowerCase();
        };

        exports.firstCharLowerCase = function(str) {
            return str.charAt(0).toLowerCase() + str.slice(1);
        };

        exports.stripPrefix = function(str) {
            return str.replace(prefixMatch, '');
        };

        exports.parseNumbers = function(str) {
            if (!isNaN(str)) {
                str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
            }
            return str;
        };

        exports.parseBooleans = function(str) {
            if (/^(?:true|false)$/i.test(str)) {
                str = str.toLowerCase() === 'true';
            }
            return str;
        };

    }).call(this);

},{}],161:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
    (function() {
        "use strict";
        var bom, builder, escapeCDATA, events, isEmpty, processName, processors, requiresCDATA, sax, setImmediate, wrapCDATA,
            extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
            hasProp = {}.hasOwnProperty,
            bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

        sax = require('sax');

        events = require('events');

        builder = require('xmlbuilder');

        bom = require('./bom');

        processors = require('./processors');

        setImmediate = require('timers').setImmediate;

        isEmpty = function(thing) {
            return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
        };

        processName = function(processors, processedName) {
            var i, len, process;
            for (i = 0, len = processors.length; i < len; i++) {
                process = processors[i];
                processedName = process(processedName);
            }
            return processedName;
        };

        requiresCDATA = function(entry) {
            return entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0;
        };

        wrapCDATA = function(entry) {
            return "<![CDATA[" + (escapeCDATA(entry)) + "]]>";
        };

        escapeCDATA = function(entry) {
            return entry.replace(']]>', ']]]]><![CDATA[>');
        };

        exports.processors = processors;

        exports.defaults = {
            "0.1": {
                explicitCharkey: false,
                trim: true,
                normalize: true,
                normalizeTags: false,
                attrkey: "@",
                charkey: "#",
                explicitArray: false,
                ignoreAttrs: false,
                mergeAttrs: false,
                explicitRoot: false,
                validator: null,
                xmlns: false,
                explicitChildren: false,
                childkey: '@@',
                charsAsChildren: false,
                async: false,
                strict: true,
                attrNameProcessors: null,
                attrValueProcessors: null,
                tagNameProcessors: null,
                valueProcessors: null,
                emptyTag: ''
            },
            "0.2": {
                explicitCharkey: false,
                trim: false,
                normalize: false,
                normalizeTags: false,
                attrkey: "$",
                charkey: "_",
                explicitArray: true,
                ignoreAttrs: false,
                mergeAttrs: false,
                explicitRoot: true,
                validator: null,
                xmlns: false,
                explicitChildren: false,
                preserveChildrenOrder: false,
                childkey: '$$',
                charsAsChildren: false,
                async: false,
                strict: true,
                attrNameProcessors: null,
                attrValueProcessors: null,
                tagNameProcessors: null,
                valueProcessors: null,
                rootName: 'root',
                xmldec: {
                    'version': '1.0',
                    'encoding': 'UTF-8',
                    'standalone': true
                },
                doctype: null,
                renderOpts: {
                    'pretty': true,
                    'indent': '  ',
                    'newline': '\n'
                },
                headless: false,
                chunkSize: 10000,
                emptyTag: '',
                cdata: false
            }
        };

        exports.ValidationError = (function(superClass) {
            extend(ValidationError, superClass);

            function ValidationError(message) {
                this.message = message;
            }

            return ValidationError;

        })(Error);

        exports.Builder = (function() {
            function Builder(opts) {
                var key, ref, value;
                this.options = {};
                ref = exports.defaults["0.2"];
                for (key in ref) {
                    if (!hasProp.call(ref, key)) continue;
                    value = ref[key];
                    this.options[key] = value;
                }
                for (key in opts) {
                    if (!hasProp.call(opts, key)) continue;
                    value = opts[key];
                    this.options[key] = value;
                }
            }

            Builder.prototype.buildObject = function(rootObj) {
                var attrkey, charkey, render, rootElement, rootName;
                attrkey = this.options.attrkey;
                charkey = this.options.charkey;
                if ((Object.keys(rootObj).length === 1) && (this.options.rootName === exports.defaults['0.2'].rootName)) {
                    rootName = Object.keys(rootObj)[0];
                    rootObj = rootObj[rootName];
                } else {
                    rootName = this.options.rootName;
                }
                render = (function(_this) {
                    return function(element, obj) {
                        var attr, child, entry, index, key, value;
                        if (typeof obj !== 'object') {
                            if (_this.options.cdata && requiresCDATA(obj)) {
                                element.raw(wrapCDATA(obj));
                            } else {
                                element.txt(obj);
                            }
                        } else {
                            for (key in obj) {
                                if (!hasProp.call(obj, key)) continue;
                                child = obj[key];
                                if (key === attrkey) {
                                    if (typeof child === "object") {
                                        for (attr in child) {
                                            value = child[attr];
                                            element = element.att(attr, value);
                                        }
                                    }
                                } else if (key === charkey) {
                                    if (_this.options.cdata && requiresCDATA(child)) {
                                        element = element.raw(wrapCDATA(child));
                                    } else {
                                        element = element.txt(child);
                                    }
                                } else if (Array.isArray(child)) {
                                    for (index in child) {
                                        if (!hasProp.call(child, index)) continue;
                                        entry = child[index];
                                        if (typeof entry === 'string') {
                                            if (_this.options.cdata && requiresCDATA(entry)) {
                                                element = element.ele(key).raw(wrapCDATA(entry)).up();
                                            } else {
                                                element = element.ele(key, entry).up();
                                            }
                                        } else {
                                            element = render(element.ele(key), entry).up();
                                        }
                                    }
                                } else if (typeof child === "object") {
                                    element = render(element.ele(key), child).up();
                                } else {
                                    if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {
                                        element = element.ele(key).raw(wrapCDATA(child)).up();
                                    } else {
                                        if (child == null) {
                                            child = '';
                                        }
                                        element = element.ele(key, child.toString()).up();
                                    }
                                }
                            }
                        }
                        return element;
                    };
                })(this);
                rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
                    headless: this.options.headless,
                    allowSurrogateChars: this.options.allowSurrogateChars
                });
                return render(rootElement, rootObj).end(this.options.renderOpts);
            };

            return Builder;

        })();

        exports.Parser = (function(superClass) {
            extend(Parser, superClass);

            function Parser(opts) {
                this.parseString = bind(this.parseString, this);
                this.reset = bind(this.reset, this);
                this.assignOrPush = bind(this.assignOrPush, this);
                this.processAsync = bind(this.processAsync, this);
                var key, ref, value;
                if (!(this instanceof exports.Parser)) {
                    return new exports.Parser(opts);
                }
                this.options = {};
                ref = exports.defaults["0.2"];
                for (key in ref) {
                    if (!hasProp.call(ref, key)) continue;
                    value = ref[key];
                    this.options[key] = value;
                }
                for (key in opts) {
                    if (!hasProp.call(opts, key)) continue;
                    value = opts[key];
                    this.options[key] = value;
                }
                if (this.options.xmlns) {
                    this.options.xmlnskey = this.options.attrkey + "ns";
                }
                if (this.options.normalizeTags) {
                    if (!this.options.tagNameProcessors) {
                        this.options.tagNameProcessors = [];
                    }
                    this.options.tagNameProcessors.unshift(processors.normalize);
                }
                this.reset();
            }

            Parser.prototype.processAsync = function() {
                var chunk, err, error1;
                try {
                    if (this.remaining.length <= this.options.chunkSize) {
                        chunk = this.remaining;
                        this.remaining = '';
                        this.saxParser = this.saxParser.write(chunk);
                        return this.saxParser.close();
                    } else {
                        chunk = this.remaining.substr(0, this.options.chunkSize);
                        this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
                        this.saxParser = this.saxParser.write(chunk);
                        return setImmediate(this.processAsync);
                    }
                } catch (error1) {
                    err = error1;
                    if (!this.saxParser.errThrown) {
                        this.saxParser.errThrown = true;
                        return this.emit(err);
                    }
                }
            };

            Parser.prototype.assignOrPush = function(obj, key, newValue) {
                if (!(key in obj)) {
                    if (!this.options.explicitArray) {
                        return obj[key] = newValue;
                    } else {
                        return obj[key] = [newValue];
                    }
                } else {
                    if (!(obj[key] instanceof Array)) {
                        obj[key] = [obj[key]];
                    }
                    return obj[key].push(newValue);
                }
            };

            Parser.prototype.reset = function() {
                var attrkey, charkey, ontext, stack;
                this.removeAllListeners();
                this.saxParser = sax.parser(this.options.strict, {
                    trim: false,
                    normalize: false,
                    xmlns: this.options.xmlns
                });
                this.saxParser.errThrown = false;
                this.saxParser.onerror = (function(_this) {
                    return function(error) {
                        _this.saxParser.resume();
                        if (!_this.saxParser.errThrown) {
                            _this.saxParser.errThrown = true;
                            return _this.emit("error", error);
                        }
                    };
                })(this);
                this.saxParser.onend = (function(_this) {
                    return function() {
                        if (!_this.saxParser.ended) {
                            _this.saxParser.ended = true;
                            return _this.emit("end", _this.resultObject);
                        }
                    };
                })(this);
                this.saxParser.ended = false;
                this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
                this.resultObject = null;
                stack = [];
                attrkey = this.options.attrkey;
                charkey = this.options.charkey;
                this.saxParser.onopentag = (function(_this) {
                    return function(node) {
                        var key, newValue, obj, processedKey, ref;
                        obj = {};
                        obj[charkey] = "";
                        if (!_this.options.ignoreAttrs) {
                            ref = node.attributes;
                            for (key in ref) {
                                if (!hasProp.call(ref, key)) continue;
                                if (!(attrkey in obj) && !_this.options.mergeAttrs) {
                                    obj[attrkey] = {};
                                }
                                newValue = _this.options.attrValueProcessors ? processName(_this.options.attrValueProcessors, node.attributes[key]) : node.attributes[key];
                                processedKey = _this.options.attrNameProcessors ? processName(_this.options.attrNameProcessors, key) : key;
                                if (_this.options.mergeAttrs) {
                                    _this.assignOrPush(obj, processedKey, newValue);
                                } else {
                                    obj[attrkey][processedKey] = newValue;
                                }
                            }
                        }
                        obj["#name"] = _this.options.tagNameProcessors ? processName(_this.options.tagNameProcessors, node.name) : node.name;
                        if (_this.options.xmlns) {
                            obj[_this.options.xmlnskey] = {
                                uri: node.uri,
                                local: node.local
                            };
                        }
                        return stack.push(obj);
                    };
                })(this);
                this.saxParser.onclosetag = (function(_this) {
                    return function() {
                        var cdata, emptyStr, err, error1, key, node, nodeName, obj, objClone, old, s, xpath;
                        obj = stack.pop();
                        nodeName = obj["#name"];
                        if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
                            delete obj["#name"];
                        }
                        if (obj.cdata === true) {
                            cdata = obj.cdata;
                            delete obj.cdata;
                        }
                        s = stack[stack.length - 1];
                        if (obj[charkey].match(/^\s*$/) && !cdata) {
                            emptyStr = obj[charkey];
                            delete obj[charkey];
                        } else {
                            if (_this.options.trim) {
                                obj[charkey] = obj[charkey].trim();
                            }
                            if (_this.options.normalize) {
                                obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
                            }
                            obj[charkey] = _this.options.valueProcessors ? processName(_this.options.valueProcessors, obj[charkey]) : obj[charkey];
                            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                                obj = obj[charkey];
                            }
                        }
                        if (isEmpty(obj)) {
                            obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;
                        }
                        if (_this.options.validator != null) {
                            xpath = "/" + ((function() {
                                    var i, len, results;
                                    results = [];
                                    for (i = 0, len = stack.length; i < len; i++) {
                                        node = stack[i];
                                        results.push(node["#name"]);
                                    }
                                    return results;
                                })()).concat(nodeName).join("/");
                            try {
                                obj = _this.options.validator(xpath, s && s[nodeName], obj);
                            } catch (error1) {
                                err = error1;
                                _this.emit("error", err);
                            }
                        }
                        if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {
                            if (!_this.options.preserveChildrenOrder) {
                                node = {};
                                if (_this.options.attrkey in obj) {
                                    node[_this.options.attrkey] = obj[_this.options.attrkey];
                                    delete obj[_this.options.attrkey];
                                }
                                if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                                    node[_this.options.charkey] = obj[_this.options.charkey];
                                    delete obj[_this.options.charkey];
                                }
                                if (Object.getOwnPropertyNames(obj).length > 0) {
                                    node[_this.options.childkey] = obj;
                                }
                                obj = node;
                            } else if (s) {
                                s[_this.options.childkey] = s[_this.options.childkey] || [];
                                objClone = {};
                                for (key in obj) {
                                    if (!hasProp.call(obj, key)) continue;
                                    objClone[key] = obj[key];
                                }
                                s[_this.options.childkey].push(objClone);
                                delete obj["#name"];
                                if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                                    obj = obj[charkey];
                                }
                            }
                        }
                        if (stack.length > 0) {
                            return _this.assignOrPush(s, nodeName, obj);
                        } else {
                            if (_this.options.explicitRoot) {
                                old = obj;
                                obj = {};
                                obj[nodeName] = old;
                            }
                            _this.resultObject = obj;
                            _this.saxParser.ended = true;
                            return _this.emit("end", _this.resultObject);
                        }
                    };
                })(this);
                ontext = (function(_this) {
                    return function(text) {
                        var charChild, s;
                        s = stack[stack.length - 1];
                        if (s) {
                            s[charkey] += text;
                            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && text.replace(/\\n/g, '').trim() !== '') {
                                s[_this.options.childkey] = s[_this.options.childkey] || [];
                                charChild = {
                                    '#name': '__text__'
                                };
                                charChild[charkey] = text;
                                s[_this.options.childkey].push(charChild);
                            }
                            return s;
                        }
                    };
                })(this);
                this.saxParser.ontext = ontext;
                return this.saxParser.oncdata = (function(_this) {
                    return function(text) {
                        var s;
                        s = ontext(text);
                        if (s) {
                            return s.cdata = true;
                        }
                    };
                })(this);
            };

            Parser.prototype.parseString = function(str, cb) {
                var err, error1;
                if ((cb != null) && typeof cb === "function") {
                    this.on("end", function(result) {
                        this.reset();
                        return cb(null, result);
                    });
                    this.on("error", function(err) {
                        this.reset();
                        return cb(err);
                    });
                }
                try {
                    str = str.toString();
                    if (str.trim() === '') {
                        this.emit("end", null);
                        return true;
                    }
                    str = bom.stripBOM(str);
                    if (this.options.async) {
                        this.remaining = str;
                        setImmediate(this.processAsync);
                        return this.saxParser;
                    }
                    return this.saxParser.write(str).close();
                } catch (error1) {
                    err = error1;
                    if (!(this.saxParser.errThrown || this.saxParser.ended)) {
                        this.emit('error', err);
                        return this.saxParser.errThrown = true;
                    } else if (this.saxParser.ended) {
                        throw err;
                    }
                }
            };

            return Parser;

        })(events.EventEmitter);

        exports.parseString = function(str, a, b) {
            var cb, options, parser;
            if (b != null) {
                if (typeof b === 'function') {
                    cb = b;
                }
                if (typeof a === 'object') {
                    options = a;
                }
            } else {
                if (typeof a === 'function') {
                    cb = a;
                }
                options = {};
            }
            parser = new exports.Parser(options);
            return parser.parseString(str, cb);
        };

    }).call(this);

},{"./bom":159,"./processors":160,"events":7,"sax":150,"timers":154,"xmlbuilder":178}],162:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLAttribute, create;

        create = require('lodash/create');

        module.exports = XMLAttribute = (function() {
            function XMLAttribute(parent, name, value) {
                this.stringify = parent.stringify;
                if (name == null) {
                    throw new Error("Missing attribute name of element " + parent.name);
                }
                if (value == null) {
                    throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
                }
                this.name = this.stringify.attName(name);
                this.value = this.stringify.attValue(value);
            }

            XMLAttribute.prototype.clone = function() {
                return create(XMLAttribute.prototype, this);
            };

            XMLAttribute.prototype.toString = function(options, level) {
                return ' ' + this.name + '="' + this.value + '"';
            };

            return XMLAttribute;

        })();

    }).call(this);

},{"lodash/create":110}],163:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLBuilder, XMLDeclaration, XMLDocType, XMLElement, XMLStringifier;

        XMLStringifier = require('./XMLStringifier');

        XMLDeclaration = require('./XMLDeclaration');

        XMLDocType = require('./XMLDocType');

        XMLElement = require('./XMLElement');

        module.exports = XMLBuilder = (function() {
            function XMLBuilder(name, options) {
                var root, temp;
                if (name == null) {
                    throw new Error("Root element needs a name");
                }
                if (options == null) {
                    options = {};
                }
                this.options = options;
                this.stringify = new XMLStringifier(options);
                temp = new XMLElement(this, 'doc');
                root = temp.element(name);
                root.isRoot = true;
                root.documentObject = this;
                this.rootObject = root;
                if (!options.headless) {
                    root.declaration(options);
                    if ((options.pubID != null) || (options.sysID != null)) {
                        root.doctype(options);
                    }
                }
            }

            XMLBuilder.prototype.root = function() {
                return this.rootObject;
            };

            XMLBuilder.prototype.end = function(options) {
                return this.toString(options);
            };

            XMLBuilder.prototype.toString = function(options) {
                var indent, newline, offset, pretty, r, ref, ref1, ref2;
                pretty = (options != null ? options.pretty : void 0) || false;
                indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
                offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
                newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
                r = '';
                if (this.xmldec != null) {
                    r += this.xmldec.toString(options);
                }
                if (this.doctype != null) {
                    r += this.doctype.toString(options);
                }
                r += this.rootObject.toString(options);
                if (pretty && r.slice(-newline.length) === newline) {
                    r = r.slice(0, -newline.length);
                }
                return r;
            };

            return XMLBuilder;

        })();

    }).call(this);

},{"./XMLDeclaration":170,"./XMLDocType":171,"./XMLElement":172,"./XMLStringifier":176}],164:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLCData, XMLNode, create,
            extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
            hasProp = {}.hasOwnProperty;

        create = require('lodash/create');

        XMLNode = require('./XMLNode');

        module.exports = XMLCData = (function(superClass) {
            extend(XMLCData, superClass);

            function XMLCData(parent, text) {
                XMLCData.__super__.constructor.call(this, parent);
                if (text == null) {
                    throw new Error("Missing CDATA text");
                }
                this.text = this.stringify.cdata(text);
            }

            XMLCData.prototype.clone = function() {
                return create(XMLCData.prototype, this);
            };

            XMLCData.prototype.toString = function(options, level) {
                var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
                pretty = (options != null ? options.pretty : void 0) || false;
                indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
                offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
                newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
                level || (level = 0);
                space = new Array(level + offset + 1).join(indent);
                r = '';
                if (pretty) {
                    r += space;
                }
                r += '<![CDATA[' + this.text + ']]>';
                if (pretty) {
                    r += newline;
                }
                return r;
            };

            return XMLCData;

        })(XMLNode);

    }).call(this);

},{"./XMLNode":173,"lodash/create":110}],165:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLComment, XMLNode, create,
            extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
            hasProp = {}.hasOwnProperty;

        create = require('lodash/create');

        XMLNode = require('./XMLNode');

        module.exports = XMLComment = (function(superClass) {
            extend(XMLComment, superClass);

            function XMLComment(parent, text) {
                XMLComment.__super__.constructor.call(this, parent);
                if (text == null) {
                    throw new Error("Missing comment text");
                }
                this.text = this.stringify.comment(text);
            }

            XMLComment.prototype.clone = function() {
                return create(XMLComment.prototype, this);
            };

            XMLComment.prototype.toString = function(options, level) {
                var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
                pretty = (options != null ? options.pretty : void 0) || false;
                indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
                offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
                newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
                level || (level = 0);
                space = new Array(level + offset + 1).join(indent);
                r = '';
                if (pretty) {
                    r += space;
                }
                r += '<!-- ' + this.text + ' -->';
                if (pretty) {
                    r += newline;
                }
                return r;
            };

            return XMLComment;

        })(XMLNode);

    }).call(this);

},{"./XMLNode":173,"lodash/create":110}],166:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLDTDAttList, create;

        create = require('lodash/create');

        module.exports = XMLDTDAttList = (function() {
            function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
                this.stringify = parent.stringify;
                if (elementName == null) {
                    throw new Error("Missing DTD element name");
                }
                if (attributeName == null) {
                    throw new Error("Missing DTD attribute name");
                }
                if (!attributeType) {
                    throw new Error("Missing DTD attribute type");
                }
                if (!defaultValueType) {
                    throw new Error("Missing DTD attribute default");
                }
                if (defaultValueType.indexOf('#') !== 0) {
                    defaultValueType = '#' + defaultValueType;
                }
                if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
                    throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
                }
                if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
                    throw new Error("Default value only applies to #FIXED or #DEFAULT");
                }
                this.elementName = this.stringify.eleName(elementName);
                this.attributeName = this.stringify.attName(attributeName);
                this.attributeType = this.stringify.dtdAttType(attributeType);
                this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
                this.defaultValueType = defaultValueType;
            }

            XMLDTDAttList.prototype.toString = function(options, level) {
                var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
                pretty = (options != null ? options.pretty : void 0) || false;
                indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
                offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
                newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
                level || (level = 0);
                space = new Array(level + offset + 1).join(indent);
                r = '';
                if (pretty) {
                    r += space;
                }
                r += '<!ATTLIST ' + this.elementName + ' ' + this.attributeName + ' ' + this.attributeType;
                if (this.defaultValueType !== '#DEFAULT') {
                    r += ' ' + this.defaultValueType;
                }
                if (this.defaultValue) {
                    r += ' "' + this.defaultValue + '"';
                }
                r += '>';
                if (pretty) {
                    r += newline;
                }
                return r;
            };

            return XMLDTDAttList;

        })();

    }).call(this);

},{"lodash/create":110}],167:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLDTDElement, create;

        create = require('lodash/create');

        module.exports = XMLDTDElement = (function() {
            function XMLDTDElement(parent, name, value) {
                this.stringify = parent.stringify;
                if (name == null) {
                    throw new Error("Missing DTD element name");
                }
                if (!value) {
                    value = '(#PCDATA)';
                }
                if (Array.isArray(value)) {
                    value = '(' + value.join(',') + ')';
                }
                this.name = this.stringify.eleName(name);
                this.value = this.stringify.dtdElementValue(value);
            }

            XMLDTDElement.prototype.toString = function(options, level) {
                var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
                pretty = (options != null ? options.pretty : void 0) || false;
                indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
                offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
                newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
                level || (level = 0);
                space = new Array(level + offset + 1).join(indent);
                r = '';
                if (pretty) {
                    r += space;
                }
                r += '<!ELEMENT ' + this.name + ' ' + this.value + '>';
                if (pretty) {
                    r += newline;
                }
                return r;
            };

            return XMLDTDElement;

        })();

    }).call(this);

},{"lodash/create":110}],168:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLDTDEntity, create, isObject;

        create = require('lodash/create');

        isObject = require('lodash/isObject');

        module.exports = XMLDTDEntity = (function() {
            function XMLDTDEntity(parent, pe, name, value) {
                this.stringify = parent.stringify;
                if (name == null) {
                    throw new Error("Missing entity name");
                }
                if (value == null) {
                    throw new Error("Missing entity value");
                }
                this.pe = !!pe;
                this.name = this.stringify.eleName(name);
                if (!isObject(value)) {
                    this.value = this.stringify.dtdEntityValue(value);
                } else {
                    if (!value.pubID && !value.sysID) {
                        throw new Error("Public and/or system identifiers are required for an external entity");
                    }
                    if (value.pubID && !value.sysID) {
                        throw new Error("System identifier is required for a public external entity");
                    }
                    if (value.pubID != null) {
                        this.pubID = this.stringify.dtdPubID(value.pubID);
                    }
                    if (value.sysID != null) {
                        this.sysID = this.stringify.dtdSysID(value.sysID);
                    }
                    if (value.nData != null) {
                        this.nData = this.stringify.dtdNData(value.nData);
                    }
                    if (this.pe && this.nData) {
                        throw new Error("Notation declaration is not allowed in a parameter entity");
                    }
                }
            }

            XMLDTDEntity.prototype.toString = function(options, level) {
                var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
                pretty = (options != null ? options.pretty : void 0) || false;
                indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
                offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
                newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
                level || (level = 0);
                space = new Array(level + offset + 1).join(indent);
                r = '';
                if (pretty) {
                    r += space;
                }
                r += '<!ENTITY';
                if (this.pe) {
                    r += ' %';
                }
                r += ' ' + this.name;
                if (this.value) {
                    r += ' "' + this.value + '"';
                } else {
                    if (this.pubID && this.sysID) {
                        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
                    } else if (this.sysID) {
                        r += ' SYSTEM "' + this.sysID + '"';
                    }
                    if (this.nData) {
                        r += ' NDATA ' + this.nData;
                    }
                }
                r += '>';
                if (pretty) {
                    r += newline;
                }
                return r;
            };

            return XMLDTDEntity;

        })();

    }).call(this);

},{"lodash/create":110,"lodash/isObject":125}],169:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLDTDNotation, create;

        create = require('lodash/create');

        module.exports = XMLDTDNotation = (function() {
            function XMLDTDNotation(parent, name, value) {
                this.stringify = parent.stringify;
                if (name == null) {
                    throw new Error("Missing notation name");
                }
                if (!value.pubID && !value.sysID) {
                    throw new Error("Public or system identifiers are required for an external entity");
                }
                this.name = this.stringify.eleName(name);
                if (value.pubID != null) {
                    this.pubID = this.stringify.dtdPubID(value.pubID);
                }
                if (value.sysID != null) {
                    this.sysID = this.stringify.dtdSysID(value.sysID);
                }
            }

            XMLDTDNotation.prototype.toString = function(options, level) {
                var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
                pretty = (options != null ? options.pretty : void 0) || false;
                indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
                offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
                newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
                level || (level = 0);
                space = new Array(level + offset + 1).join(indent);
                r = '';
                if (pretty) {
                    r += space;
                }
                r += '<!NOTATION ' + this.name;
                if (this.pubID && this.sysID) {
                    r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
                } else if (this.pubID) {
                    r += ' PUBLIC "' + this.pubID + '"';
                } else if (this.sysID) {
                    r += ' SYSTEM "' + this.sysID + '"';
                }
                r += '>';
                if (pretty) {
                    r += newline;
                }
                return r;
            };

            return XMLDTDNotation;

        })();

    }).call(this);

},{"lodash/create":110}],170:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLDeclaration, XMLNode, create, isObject,
            extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
            hasProp = {}.hasOwnProperty;

        create = require('lodash/create');

        isObject = require('lodash/isObject');

        XMLNode = require('./XMLNode');

        module.exports = XMLDeclaration = (function(superClass) {
            extend(XMLDeclaration, superClass);

            function XMLDeclaration(parent, version, encoding, standalone) {
                var ref;
                XMLDeclaration.__super__.constructor.call(this, parent);
                if (isObject(version)) {
                    ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
                }
                if (!version) {
                    version = '1.0';
                }
                this.version = this.stringify.xmlVersion(version);
                if (encoding != null) {
                    this.encoding = this.stringify.xmlEncoding(encoding);
                }
                if (standalone != null) {
                    this.standalone = this.stringify.xmlStandalone(standalone);
                }
            }

            XMLDeclaration.prototype.toString = function(options, level) {
                var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
                pretty = (options != null ? options.pretty : void 0) || false;
                indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
                offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
                newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
                level || (level = 0);
                space = new Array(level + offset + 1).join(indent);
                r = '';
                if (pretty) {
                    r += space;
                }
                r += '<?xml';
                r += ' version="' + this.version + '"';
                if (this.encoding != null) {
                    r += ' encoding="' + this.encoding + '"';
                }
                if (this.standalone != null) {
                    r += ' standalone="' + this.standalone + '"';
                }
                r += '?>';
                if (pretty) {
                    r += newline;
                }
                return r;
            };

            return XMLDeclaration;

        })(XMLNode);

    }).call(this);

},{"./XMLNode":173,"lodash/create":110,"lodash/isObject":125}],171:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLProcessingInstruction, create, isObject;

        create = require('lodash/create');

        isObject = require('lodash/isObject');

        XMLCData = require('./XMLCData');

        XMLComment = require('./XMLComment');

        XMLDTDAttList = require('./XMLDTDAttList');

        XMLDTDEntity = require('./XMLDTDEntity');

        XMLDTDElement = require('./XMLDTDElement');

        XMLDTDNotation = require('./XMLDTDNotation');

        XMLProcessingInstruction = require('./XMLProcessingInstruction');

        module.exports = XMLDocType = (function() {
            function XMLDocType(parent, pubID, sysID) {
                var ref, ref1;
                this.documentObject = parent;
                this.stringify = this.documentObject.stringify;
                this.children = [];
                if (isObject(pubID)) {
                    ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
                }
                if (sysID == null) {
                    ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
                }
                if (pubID != null) {
                    this.pubID = this.stringify.dtdPubID(pubID);
                }
                if (sysID != null) {
                    this.sysID = this.stringify.dtdSysID(sysID);
                }
            }

            XMLDocType.prototype.element = function(name, value) {
                var child;
                child = new XMLDTDElement(this, name, value);
                this.children.push(child);
                return this;
            };

            XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
                var child;
                child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
                this.children.push(child);
                return this;
            };

            XMLDocType.prototype.entity = function(name, value) {
                var child;
                child = new XMLDTDEntity(this, false, name, value);
                this.children.push(child);
                return this;
            };

            XMLDocType.prototype.pEntity = function(name, value) {
                var child;
                child = new XMLDTDEntity(this, true, name, value);
                this.children.push(child);
                return this;
            };

            XMLDocType.prototype.notation = function(name, value) {
                var child;
                child = new XMLDTDNotation(this, name, value);
                this.children.push(child);
                return this;
            };

            XMLDocType.prototype.cdata = function(value) {
                var child;
                child = new XMLCData(this, value);
                this.children.push(child);
                return this;
            };

            XMLDocType.prototype.comment = function(value) {
                var child;
                child = new XMLComment(this, value);
                this.children.push(child);
                return this;
            };

            XMLDocType.prototype.instruction = function(target, value) {
                var child;
                child = new XMLProcessingInstruction(this, target, value);
                this.children.push(child);
                return this;
            };

            XMLDocType.prototype.root = function() {
                return this.documentObject.root();
            };

            XMLDocType.prototype.document = function() {
                return this.documentObject;
            };

            XMLDocType.prototype.toString = function(options, level) {
                var child, i, indent, len, newline, offset, pretty, r, ref, ref1, ref2, ref3, space;
                pretty = (options != null ? options.pretty : void 0) || false;
                indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
                offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
                newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
                level || (level = 0);
                space = new Array(level + offset + 1).join(indent);
                r = '';
                if (pretty) {
                    r += space;
                }
                r += '<!DOCTYPE ' + this.root().name;
                if (this.pubID && this.sysID) {
                    r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
                } else if (this.sysID) {
                    r += ' SYSTEM "' + this.sysID + '"';
                }
                if (this.children.length > 0) {
                    r += ' [';
                    if (pretty) {
                        r += newline;
                    }
                    ref3 = this.children;
                    for (i = 0, len = ref3.length; i < len; i++) {
                        child = ref3[i];
                        r += child.toString(options, level + 1);
                    }
                    r += ']';
                }
                r += '>';
                if (pretty) {
                    r += newline;
                }
                return r;
            };

            XMLDocType.prototype.ele = function(name, value) {
                return this.element(name, value);
            };

            XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
                return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
            };

            XMLDocType.prototype.ent = function(name, value) {
                return this.entity(name, value);
            };

            XMLDocType.prototype.pent = function(name, value) {
                return this.pEntity(name, value);
            };

            XMLDocType.prototype.not = function(name, value) {
                return this.notation(name, value);
            };

            XMLDocType.prototype.dat = function(value) {
                return this.cdata(value);
            };

            XMLDocType.prototype.com = function(value) {
                return this.comment(value);
            };

            XMLDocType.prototype.ins = function(target, value) {
                return this.instruction(target, value);
            };

            XMLDocType.prototype.up = function() {
                return this.root();
            };

            XMLDocType.prototype.doc = function() {
                return this.document();
            };

            return XMLDocType;

        })();

    }).call(this);

},{"./XMLCData":164,"./XMLComment":165,"./XMLDTDAttList":166,"./XMLDTDElement":167,"./XMLDTDEntity":168,"./XMLDTDNotation":169,"./XMLProcessingInstruction":174,"lodash/create":110,"lodash/isObject":125}],172:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLAttribute, XMLElement, XMLNode, XMLProcessingInstruction, create, every, isFunction, isObject,
            extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
            hasProp = {}.hasOwnProperty;

        create = require('lodash/create');

        isObject = require('lodash/isObject');

        isFunction = require('lodash/isFunction');

        every = require('lodash/every');

        XMLNode = require('./XMLNode');

        XMLAttribute = require('./XMLAttribute');

        XMLProcessingInstruction = require('./XMLProcessingInstruction');

        module.exports = XMLElement = (function(superClass) {
            extend(XMLElement, superClass);

            function XMLElement(parent, name, attributes) {
                XMLElement.__super__.constructor.call(this, parent);
                if (name == null) {
                    throw new Error("Missing element name");
                }
                this.name = this.stringify.eleName(name);
                this.children = [];
                this.instructions = [];
                this.attributes = {};
                if (attributes != null) {
                    this.attribute(attributes);
                }
            }

            XMLElement.prototype.clone = function() {
                var att, attName, clonedSelf, i, len, pi, ref, ref1;
                clonedSelf = create(XMLElement.prototype, this);
                if (clonedSelf.isRoot) {
                    clonedSelf.documentObject = null;
                }
                clonedSelf.attributes = {};
                ref = this.attributes;
                for (attName in ref) {
                    if (!hasProp.call(ref, attName)) continue;
                    att = ref[attName];
                    clonedSelf.attributes[attName] = att.clone();
                }
                clonedSelf.instructions = [];
                ref1 = this.instructions;
                for (i = 0, len = ref1.length; i < len; i++) {
                    pi = ref1[i];
                    clonedSelf.instructions.push(pi.clone());
                }
                clonedSelf.children = [];
                this.children.forEach(function(child) {
                    var clonedChild;
                    clonedChild = child.clone();
                    clonedChild.parent = clonedSelf;
                    return clonedSelf.children.push(clonedChild);
                });
                return clonedSelf;
            };

            XMLElement.prototype.attribute = function(name, value) {
                var attName, attValue;
                if (name != null) {
                    name = name.valueOf();
                }
                if (isObject(name)) {
                    for (attName in name) {
                        if (!hasProp.call(name, attName)) continue;
                        attValue = name[attName];
                        this.attribute(attName, attValue);
                    }
                } else {
                    if (isFunction(value)) {
                        value = value.apply();
                    }
                    if (!this.options.skipNullAttributes || (value != null)) {
                        this.attributes[name] = new XMLAttribute(this, name, value);
                    }
                }
                return this;
            };

            XMLElement.prototype.removeAttribute = function(name) {
                var attName, i, len;
                if (name == null) {
                    throw new Error("Missing attribute name");
                }
                name = name.valueOf();
                if (Array.isArray(name)) {
                    for (i = 0, len = name.length; i < len; i++) {
                        attName = name[i];
                        delete this.attributes[attName];
                    }
                } else {
                    delete this.attributes[name];
                }
                return this;
            };

            XMLElement.prototype.instruction = function(target, value) {
                var i, insTarget, insValue, instruction, len;
                if (target != null) {
                    target = target.valueOf();
                }
                if (value != null) {
                    value = value.valueOf();
                }
                if (Array.isArray(target)) {
                    for (i = 0, len = target.length; i < len; i++) {
                        insTarget = target[i];
                        this.instruction(insTarget);
                    }
                } else if (isObject(target)) {
                    for (insTarget in target) {
                        if (!hasProp.call(target, insTarget)) continue;
                        insValue = target[insTarget];
                        this.instruction(insTarget, insValue);
                    }
                } else {
                    if (isFunction(value)) {
                        value = value.apply();
                    }
                    instruction = new XMLProcessingInstruction(this, target, value);
                    this.instructions.push(instruction);
                }
                return this;
            };

            XMLElement.prototype.toString = function(options, level) {
                var att, child, i, indent, instruction, j, len, len1, name, newline, offset, pretty, r, ref, ref1, ref2, ref3, ref4, ref5, space;
                pretty = (options != null ? options.pretty : void 0) || false;
                indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
                offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
                newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
                level || (level = 0);
                space = new Array(level + offset + 1).join(indent);
                r = '';
                ref3 = this.instructions;
                for (i = 0, len = ref3.length; i < len; i++) {
                    instruction = ref3[i];
                    r += instruction.toString(options, level);
                }
                if (pretty) {
                    r += space;
                }
                r += '<' + this.name;
                ref4 = this.attributes;
                for (name in ref4) {
                    if (!hasProp.call(ref4, name)) continue;
                    att = ref4[name];
                    r += att.toString(options);
                }
                if (this.children.length === 0 || every(this.children, function(e) {
                        return e.value === '';
                    })) {
                    r += '/>';
                    if (pretty) {
                        r += newline;
                    }
                } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {
                    r += '>';
                    r += this.children[0].value;
                    r += '</' + this.name + '>';
                    r += newline;
                } else {
                    r += '>';
                    if (pretty) {
                        r += newline;
                    }
                    ref5 = this.children;
                    for (j = 0, len1 = ref5.length; j < len1; j++) {
                        child = ref5[j];
                        r += child.toString(options, level + 1);
                    }
                    if (pretty) {
                        r += space;
                    }
                    r += '</' + this.name + '>';
                    if (pretty) {
                        r += newline;
                    }
                }
                return r;
            };

            XMLElement.prototype.att = function(name, value) {
                return this.attribute(name, value);
            };

            XMLElement.prototype.ins = function(target, value) {
                return this.instruction(target, value);
            };

            XMLElement.prototype.a = function(name, value) {
                return this.attribute(name, value);
            };

            XMLElement.prototype.i = function(target, value) {
                return this.instruction(target, value);
            };

            return XMLElement;

        })(XMLNode);

    }).call(this);

},{"./XMLAttribute":162,"./XMLNode":173,"./XMLProcessingInstruction":174,"lodash/create":110,"lodash/every":112,"lodash/isFunction":122,"lodash/isObject":125}],173:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLRaw, XMLText, isEmpty, isFunction, isObject,
            hasProp = {}.hasOwnProperty;

        isObject = require('lodash/isObject');

        isFunction = require('lodash/isFunction');

        isEmpty = require('lodash/isEmpty');

        XMLElement = null;

        XMLCData = null;

        XMLComment = null;

        XMLDeclaration = null;

        XMLDocType = null;

        XMLRaw = null;

        XMLText = null;

        module.exports = XMLNode = (function() {
            function XMLNode(parent) {
                this.parent = parent;
                this.options = this.parent.options;
                this.stringify = this.parent.stringify;
                if (XMLElement === null) {
                    XMLElement = require('./XMLElement');
                    XMLCData = require('./XMLCData');
                    XMLComment = require('./XMLComment');
                    XMLDeclaration = require('./XMLDeclaration');
                    XMLDocType = require('./XMLDocType');
                    XMLRaw = require('./XMLRaw');
                    XMLText = require('./XMLText');
                }
            }

            XMLNode.prototype.element = function(name, attributes, text) {
                var childNode, item, j, k, key, lastChild, len, len1, ref, val;
                lastChild = null;
                if (attributes == null) {
                    attributes = {};
                }
                attributes = attributes.valueOf();
                if (!isObject(attributes)) {
                    ref = [attributes, text], text = ref[0], attributes = ref[1];
                }
                if (name != null) {
                    name = name.valueOf();
                }
                if (Array.isArray(name)) {
                    for (j = 0, len = name.length; j < len; j++) {
                        item = name[j];
                        lastChild = this.element(item);
                    }
                } else if (isFunction(name)) {
                    lastChild = this.element(name.apply());
                } else if (isObject(name)) {
                    for (key in name) {
                        if (!hasProp.call(name, key)) continue;
                        val = name[key];
                        if (isFunction(val)) {
                            val = val.apply();
                        }
                        if ((isObject(val)) && (isEmpty(val))) {
                            val = null;
                        }
                        if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
                            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
                        } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && key.indexOf(this.stringify.convertPIKey) === 0) {
                            lastChild = this.instruction(key.substr(this.stringify.convertPIKey.length), val);
                        } else if (!this.options.separateArrayItems && Array.isArray(val)) {
                            for (k = 0, len1 = val.length; k < len1; k++) {
                                item = val[k];
                                childNode = {};
                                childNode[key] = item;
                                lastChild = this.element(childNode);
                            }
                        } else if (isObject(val)) {
                            lastChild = this.element(key);
                            lastChild.element(val);
                        } else {
                            lastChild = this.element(key, val);
                        }
                    }
                } else {
                    if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
                        lastChild = this.text(text);
                    } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
                        lastChild = this.cdata(text);
                    } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
                        lastChild = this.comment(text);
                    } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
                        lastChild = this.raw(text);
                    } else {
                        lastChild = this.node(name, attributes, text);
                    }
                }
                if (lastChild == null) {
                    throw new Error("Could not create any elements with: " + name);
                }
                return lastChild;
            };

            XMLNode.prototype.insertBefore = function(name, attributes, text) {
                var child, i, removed;
                if (this.isRoot) {
                    throw new Error("Cannot insert elements at root level");
                }
                i = this.parent.children.indexOf(this);
                removed = this.parent.children.splice(i);
                child = this.parent.element(name, attributes, text);
                Array.prototype.push.apply(this.parent.children, removed);
                return child;
            };

            XMLNode.prototype.insertAfter = function(name, attributes, text) {
                var child, i, removed;
                if (this.isRoot) {
                    throw new Error("Cannot insert elements at root level");
                }
                i = this.parent.children.indexOf(this);
                removed = this.parent.children.splice(i + 1);
                child = this.parent.element(name, attributes, text);
                Array.prototype.push.apply(this.parent.children, removed);
                return child;
            };

            XMLNode.prototype.remove = function() {
                var i, ref;
                if (this.isRoot) {
                    throw new Error("Cannot remove the root element");
                }
                i = this.parent.children.indexOf(this);
                [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref = [])), ref;
                return this.parent;
            };

            XMLNode.prototype.node = function(name, attributes, text) {
                var child, ref;
                if (name != null) {
                    name = name.valueOf();
                }
                if (attributes == null) {
                    attributes = {};
                }
                attributes = attributes.valueOf();
                if (!isObject(attributes)) {
                    ref = [attributes, text], text = ref[0], attributes = ref[1];
                }
                child = new XMLElement(this, name, attributes);
                if (text != null) {
                    child.text(text);
                }
                this.children.push(child);
                return child;
            };

            XMLNode.prototype.text = function(value) {
                var child;
                child = new XMLText(this, value);
                this.children.push(child);
                return this;
            };

            XMLNode.prototype.cdata = function(value) {
                var child;
                child = new XMLCData(this, value);
                this.children.push(child);
                return this;
            };

            XMLNode.prototype.comment = function(value) {
                var child;
                child = new XMLComment(this, value);
                this.children.push(child);
                return this;
            };

            XMLNode.prototype.raw = function(value) {
                var child;
                child = new XMLRaw(this, value);
                this.children.push(child);
                return this;
            };

            XMLNode.prototype.declaration = function(version, encoding, standalone) {
                var doc, xmldec;
                doc = this.document();
                xmldec = new XMLDeclaration(doc, version, encoding, standalone);
                doc.xmldec = xmldec;
                return doc.root();
            };

            XMLNode.prototype.doctype = function(pubID, sysID) {
                var doc, doctype;
                doc = this.document();
                doctype = new XMLDocType(doc, pubID, sysID);
                doc.doctype = doctype;
                return doctype;
            };

            XMLNode.prototype.up = function() {
                if (this.isRoot) {
                    throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
                }
                return this.parent;
            };

            XMLNode.prototype.root = function() {
                var child;
                if (this.isRoot) {
                    return this;
                }
                child = this.parent;
                while (!child.isRoot) {
                    child = child.parent;
                }
                return child;
            };

            XMLNode.prototype.document = function() {
                return this.root().documentObject;
            };

            XMLNode.prototype.end = function(options) {
                return this.document().toString(options);
            };

            XMLNode.prototype.prev = function() {
                var i;
                if (this.isRoot) {
                    throw new Error("Root node has no siblings");
                }
                i = this.parent.children.indexOf(this);
                if (i < 1) {
                    throw new Error("Already at the first node");
                }
                return this.parent.children[i - 1];
            };

            XMLNode.prototype.next = function() {
                var i;
                if (this.isRoot) {
                    throw new Error("Root node has no siblings");
                }
                i = this.parent.children.indexOf(this);
                if (i === -1 || i === this.parent.children.length - 1) {
                    throw new Error("Already at the last node");
                }
                return this.parent.children[i + 1];
            };

            XMLNode.prototype.importXMLBuilder = function(xmlbuilder) {
                var clonedRoot;
                clonedRoot = xmlbuilder.root().clone();
                clonedRoot.parent = this;
                clonedRoot.isRoot = false;
                this.children.push(clonedRoot);
                return this;
            };

            XMLNode.prototype.ele = function(name, attributes, text) {
                return this.element(name, attributes, text);
            };

            XMLNode.prototype.nod = function(name, attributes, text) {
                return this.node(name, attributes, text);
            };

            XMLNode.prototype.txt = function(value) {
                return this.text(value);
            };

            XMLNode.prototype.dat = function(value) {
                return this.cdata(value);
            };

            XMLNode.prototype.com = function(value) {
                return this.comment(value);
            };

            XMLNode.prototype.doc = function() {
                return this.document();
            };

            XMLNode.prototype.dec = function(version, encoding, standalone) {
                return this.declaration(version, encoding, standalone);
            };

            XMLNode.prototype.dtd = function(pubID, sysID) {
                return this.doctype(pubID, sysID);
            };

            XMLNode.prototype.e = function(name, attributes, text) {
                return this.element(name, attributes, text);
            };

            XMLNode.prototype.n = function(name, attributes, text) {
                return this.node(name, attributes, text);
            };

            XMLNode.prototype.t = function(value) {
                return this.text(value);
            };

            XMLNode.prototype.d = function(value) {
                return this.cdata(value);
            };

            XMLNode.prototype.c = function(value) {
                return this.comment(value);
            };

            XMLNode.prototype.r = function(value) {
                return this.raw(value);
            };

            XMLNode.prototype.u = function() {
                return this.up();
            };

            return XMLNode;

        })();

    }).call(this);

},{"./XMLCData":164,"./XMLComment":165,"./XMLDeclaration":170,"./XMLDocType":171,"./XMLElement":172,"./XMLRaw":175,"./XMLText":177,"lodash/isEmpty":121,"lodash/isFunction":122,"lodash/isObject":125}],174:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLProcessingInstruction, create;

        create = require('lodash/create');

        module.exports = XMLProcessingInstruction = (function() {
            function XMLProcessingInstruction(parent, target, value) {
                this.stringify = parent.stringify;
                if (target == null) {
                    throw new Error("Missing instruction target");
                }
                this.target = this.stringify.insTarget(target);
                if (value) {
                    this.value = this.stringify.insValue(value);
                }
            }

            XMLProcessingInstruction.prototype.clone = function() {
                return create(XMLProcessingInstruction.prototype, this);
            };

            XMLProcessingInstruction.prototype.toString = function(options, level) {
                var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
                pretty = (options != null ? options.pretty : void 0) || false;
                indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
                offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
                newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
                level || (level = 0);
                space = new Array(level + offset + 1).join(indent);
                r = '';
                if (pretty) {
                    r += space;
                }
                r += '<?';
                r += this.target;
                if (this.value) {
                    r += ' ' + this.value;
                }
                r += '?>';
                if (pretty) {
                    r += newline;
                }
                return r;
            };

            return XMLProcessingInstruction;

        })();

    }).call(this);

},{"lodash/create":110}],175:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLNode, XMLRaw, create,
            extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
            hasProp = {}.hasOwnProperty;

        create = require('lodash/create');

        XMLNode = require('./XMLNode');

        module.exports = XMLRaw = (function(superClass) {
            extend(XMLRaw, superClass);

            function XMLRaw(parent, text) {
                XMLRaw.__super__.constructor.call(this, parent);
                if (text == null) {
                    throw new Error("Missing raw text");
                }
                this.value = this.stringify.raw(text);
            }

            XMLRaw.prototype.clone = function() {
                return create(XMLRaw.prototype, this);
            };

            XMLRaw.prototype.toString = function(options, level) {
                var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
                pretty = (options != null ? options.pretty : void 0) || false;
                indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
                offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
                newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
                level || (level = 0);
                space = new Array(level + offset + 1).join(indent);
                r = '';
                if (pretty) {
                    r += space;
                }
                r += this.value;
                if (pretty) {
                    r += newline;
                }
                return r;
            };

            return XMLRaw;

        })(XMLNode);

    }).call(this);

},{"./XMLNode":173,"lodash/create":110}],176:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLStringifier,
            bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
            hasProp = {}.hasOwnProperty;

        module.exports = XMLStringifier = (function() {
            function XMLStringifier(options) {
                this.assertLegalChar = bind(this.assertLegalChar, this);
                var key, ref, value;
                this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;
                this.noDoubleEncoding = options != null ? options.noDoubleEncoding : void 0;
                ref = (options != null ? options.stringify : void 0) || {};
                for (key in ref) {
                    if (!hasProp.call(ref, key)) continue;
                    value = ref[key];
                    this[key] = value;
                }
            }

            XMLStringifier.prototype.eleName = function(val) {
                val = '' + val || '';
                return this.assertLegalChar(val);
            };

            XMLStringifier.prototype.eleText = function(val) {
                val = '' + val || '';
                return this.assertLegalChar(this.elEscape(val));
            };

            XMLStringifier.prototype.cdata = function(val) {
                val = '' + val || '';
                if (val.match(/]]>/)) {
                    throw new Error("Invalid CDATA text: " + val);
                }
                return this.assertLegalChar(val);
            };

            XMLStringifier.prototype.comment = function(val) {
                val = '' + val || '';
                if (val.match(/--/)) {
                    throw new Error("Comment text cannot contain double-hypen: " + val);
                }
                return this.assertLegalChar(val);
            };

            XMLStringifier.prototype.raw = function(val) {
                return '' + val || '';
            };

            XMLStringifier.prototype.attName = function(val) {
                return '' + val || '';
            };

            XMLStringifier.prototype.attValue = function(val) {
                val = '' + val || '';
                return this.attEscape(val);
            };

            XMLStringifier.prototype.insTarget = function(val) {
                return '' + val || '';
            };

            XMLStringifier.prototype.insValue = function(val) {
                val = '' + val || '';
                if (val.match(/\?>/)) {
                    throw new Error("Invalid processing instruction value: " + val);
                }
                return val;
            };

            XMLStringifier.prototype.xmlVersion = function(val) {
                val = '' + val || '';
                if (!val.match(/1\.[0-9]+/)) {
                    throw new Error("Invalid version number: " + val);
                }
                return val;
            };

            XMLStringifier.prototype.xmlEncoding = function(val) {
                val = '' + val || '';
                if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {
                    throw new Error("Invalid encoding: " + val);
                }
                return val;
            };

            XMLStringifier.prototype.xmlStandalone = function(val) {
                if (val) {
                    return "yes";
                } else {
                    return "no";
                }
            };

            XMLStringifier.prototype.dtdPubID = function(val) {
                return '' + val || '';
            };

            XMLStringifier.prototype.dtdSysID = function(val) {
                return '' + val || '';
            };

            XMLStringifier.prototype.dtdElementValue = function(val) {
                return '' + val || '';
            };

            XMLStringifier.prototype.dtdAttType = function(val) {
                return '' + val || '';
            };

            XMLStringifier.prototype.dtdAttDefault = function(val) {
                if (val != null) {
                    return '' + val || '';
                } else {
                    return val;
                }
            };

            XMLStringifier.prototype.dtdEntityValue = function(val) {
                return '' + val || '';
            };

            XMLStringifier.prototype.dtdNData = function(val) {
                return '' + val || '';
            };

            XMLStringifier.prototype.convertAttKey = '@';

            XMLStringifier.prototype.convertPIKey = '?';

            XMLStringifier.prototype.convertTextKey = '#text';

            XMLStringifier.prototype.convertCDataKey = '#cdata';

            XMLStringifier.prototype.convertCommentKey = '#comment';

            XMLStringifier.prototype.convertRawKey = '#raw';

            XMLStringifier.prototype.assertLegalChar = function(str) {
                var chars, chr;
                if (this.allowSurrogateChars) {
                    chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uFFFE-\uFFFF]/;
                } else {
                    chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
                }
                chr = str.match(chars);
                if (chr) {
                    throw new Error("Invalid character (" + chr + ") in string: " + str + " at index " + chr.index);
                }
                return str;
            };

            XMLStringifier.prototype.elEscape = function(str) {
                var ampregex;
                ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
                return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
            };

            XMLStringifier.prototype.attEscape = function(str) {
                var ampregex;
                ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
                return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;');
            };

            return XMLStringifier;

        })();

    }).call(this);

},{}],177:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLNode, XMLText, create,
            extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
            hasProp = {}.hasOwnProperty;

        create = require('lodash/create');

        XMLNode = require('./XMLNode');

        module.exports = XMLText = (function(superClass) {
            extend(XMLText, superClass);

            function XMLText(parent, text) {
                XMLText.__super__.constructor.call(this, parent);
                if (text == null) {
                    throw new Error("Missing element text");
                }
                this.value = this.stringify.eleText(text);
            }

            XMLText.prototype.clone = function() {
                return create(XMLText.prototype, this);
            };

            XMLText.prototype.toString = function(options, level) {
                var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
                pretty = (options != null ? options.pretty : void 0) || false;
                indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
                offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
                newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
                level || (level = 0);
                space = new Array(level + offset + 1).join(indent);
                r = '';
                if (pretty) {
                    r += space;
                }
                r += this.value;
                if (pretty) {
                    r += newline;
                }
                return r;
            };

            return XMLText;

        })(XMLNode);

    }).call(this);

},{"./XMLNode":173,"lodash/create":110}],178:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
    (function() {
        var XMLBuilder, assign;

        assign = require('lodash/assign');

        XMLBuilder = require('./XMLBuilder');

        module.exports.create = function(name, xmldec, doctype, options) {
            options = assign({}, xmldec, doctype, options);
            return new XMLBuilder(name, options).root();
        };

    }).call(this);

},{"./XMLBuilder":163,"lodash/assign":108}],179:[function(require,module,exports){
    var setPlayerLang = require('./player-lang.js'),
        markAudioLang = require('./mark-audioLang.js'),
        textTracks = require('./texttracks.js'),
        setKeys = require('./set-keys.js'),
        xml2js = require('xml2js'),
        parser = new xml2js.Parser(),
        builder = new xml2js.Builder(),
        optionsFunc = require('./options-shaka-vod.js');


    var videos = document.querySelectorAll('video');

    function cbFunction(player) {
        console.log('callback', player);
    }

// querySelectorAll forEach hack
    videos.forEach = Array.prototype.forEach;

    videos.forEach(function (video, key) {
        mpdSrc = video.querySelector('source').src;
        parseMpd(mpdSrc).then(function (blobUrl) {
            video.querySelector('source').src = blobUrl;
            initPlayer(video);
        });
    });

    function initPlayer(videoEl) {
        var mpdSrc,
            tracks,
            options,
            drm;

        options = optionsFunc(videoEl);
        mpdSrc = videoEl.querySelector('source').src;
        tracks = videoEl.querySelectorAll('track[type=subtitles]');

        if (options.playerLang) {
            setPlayerLang(options.playerLang);
        }

        textTracks.removeTrackEls(tracks);

        var source = {
            src: mpdSrc,
            licenseServers: {}
        };

        drm = options.drm;
        for (var i = 0; i < drm.length; i++) {
            source.licenseServers[ drm[i]['type'] ] = drm[i]['url'];
        }

        var language = (options.playerLang && options.playerLang.lang) || "en";



        var myPlayer = videojs(videoEl, {
            language: language,
            techOrder: ['shaka', 'html5'],
            shaka: {
                source: source
            },
            autoplay: videoEl.autoplay
        });


        myPlayer.ready(function() {
            myPlayer.el().querySelector('video').setAttribute('crossorigin', 'anonymous');
            textTracks.addTextTracks(myPlayer, tracks);

            if (options.hasOwnProperty('callback')) {
                var callback = eval(options.callback);
                callback(this);
            }
        });

        myPlayer.on('loadedmetadata', function() {
            if (options.keyEvents) {
                setKeys(this);
            }
            if (options.currentTime) {
                this.currentTime(options.currentTime);
            }
        });

        myPlayer.showControlBar();
        myPlayer.languageSelector({
            audioLang: "en"
        });

        myPlayer.timerEvent({
            interval: options.timerPeriod
        });

        /*
         myPlayer.thumbnails({
         "0": {
         "src": "../images/tn.001.png",
         "width": "120px"
         },
         "150": {
         "src": "../images/tn.002.png",
         "width": "120px"
         },
         "300": {
         "src": "../images/tn.003.png",
         "width": "120px"
         },
         "450": {
         "src": "../images/tn.004.png",
         "width": "120px"
         },
         "600": {
         "src": "../images/tn.005.png",
         "width": "120px"
         },
         "750": {
         "src": "../images/tn.006.png",
         "width": "120px"
         },
         "900": {
         "src": "../images/tn.007.png",
         "width": "120px"
         },
         "1050": {
         "src": "../images/tn.008.png",
         "width": "120px"
         },
         "1200": {
         "src": "../images/tn.009.png",
         "width": "120px"
         },
         "1400": {
         "src": "../images/tn.010.png",
         "width": "120px"
         },
         "1550": {
         "src": "../images/tn.011.png",
         "width": "120px"
         },
         "1700": {
         "src": "../images/tn.012.png",
         "width": "120px"
         },
         "1850": {
         "src": "../images/tn.013.png",
         "width": "120px"
         },
         "2000": {
         "src": "../images/tn.014.png",
         "width": "120px"
         },
         "2150": {
         "src": "../images/tn.015.png",
         "width": "120px"
         },
         "2300": {
         "src": "../images/tn.016.png",
         "width": "120px"
         },
         "2450": {
         "src": "../images/tn.017.png",
         "width": "120px"
         },
         "2600": {
         "src": "../images/tn.018.png",
         "width": "120px"
         },
         "2750": {
         "src": "../images/tn.019.png",
         "width": "120px"
         },
         "2900": {
         "src": "../images/tn.020.png",
         "width": "120px"
         },
         "3050": {
         "src": "../images/tn.021.png",
         "width": "120px"
         },
         "3200": {
         "src": "../images/tn.022.png",
         "width": "120px"
         },
         "3350": {
         "src": "../images/tn.023.png",
         "width": "120px"
         },
         "3500": {
         "src": "../images/tn.024.png",
         "width": "120px"
         },
         "3650": {
         "src": "../images/tn.025.png",
         "width": "120px"
         },
         "3800": {
         "src": "../images/tn.026.png",
         "width": "120px"
         },
         "4050": {
         "src": "../images/tn.027.png",
         "width": "120px"
         },
         "4200": {
         "src": "../images/tn.028.png",
         "width": "120px"
         },
         "4350": {
         "src": "../images/tn.029.png",
         "width": "120px"
         },
         "4500": {
         "src": "../images/tn.030.png",
         "width": "120px"
         },
         "4650": {
         "src": "../images/tn.031.png",
         "width": "120px"
         },
         "4800": {
         "src": "../images/tn.032.png",
         "width": "120px"
         },
         "4950": {
         "src": "../images/tn.033.png",
         "width": "120px"
         },
         "5100": {
         "src": "../images/tn.034.png",
         "width": "120px"
         },
         "5250": {
         "src": "../images/tn.035.png",
         "width": "120px"
         },
         "5400": {
         "src": "../images/tn.036.png",
         "width": "120px"
         },
         "5550": {
         "src": "../images/tn.037.png",
         "width": "120px"
         },
         "5700": {
         "src": "../images/tn.038.png",
         "width": "120px"
         },
         "5850": {
         "src": "../images/tn.039.png",
         "width": "120px"
         },
         "6000": {
         "src": "../images/tn.040.png",
         "width": "120px"
         }
         });
         */
    }

    function parseMpd(url) {
        var urlSimple = url.replace(/\?_.*$/, ''),
            urlDir = urlSimple.replace(/\/[a-zA-z0-9\.]*\.mpd$/, '/');
        return fetch(url)
            .then(function (response) {
                return response.text();
            })
            .then(function (text) {
                return new Promise(function (resolve, reject) {
                    parser.parseString(text, function (err, result) {
                        result.MPD.Period[0].AdaptationSet.forEach(function (val, key) {
                            // borrar subs:
                            if (val['$'].mimeType == 'text/vtt') {
                                delete result.MPD.Period[0].AdaptationSet[key];
                            } else {
                                result.MPD.Period[0].AdaptationSet[key].Representation.forEach(function (val2, key2) {
                                    if (!result.MPD.Period[0].AdaptationSet[key].Representation[key2].hasOwnProperty('ContentProtection')) {
                                        // agrego widevine
                                        result.MPD.Period[0].AdaptationSet[key].Representation[key2].ContentProtection = {
                                            '$': {
                                                'schemeIdUri': 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed'
                                            }
                                        };
                                    }
                                    // URLs relativas al original:
                                    result.MPD.Period[0].AdaptationSet[key].Representation[key2].BaseURL[0] = urlDir + result.MPD.Period[0].AdaptationSet[key].Representation[key2].BaseURL[0];
                                });
                            }
                        });
                        var file = builder.buildObject(result),
                            blob = new Blob([file], {type: 'application/xml'});
                        resolve(URL.createObjectURL(blob));
                    });
                });
            });
    }

},{"./mark-audioLang.js":180,"./options-shaka-vod.js":181,"./player-lang.js":182,"./set-keys.js":183,"./texttracks.js":184,"xml2js":161}],180:[function(require,module,exports){
    /*
     El selector de idioma de audio que usamos ahora, que es el del tech en
     https://github.com/hyurtseven81/videojs-shaka-player, no marca ningún ítem
     cuando comienza la reproducción. Tampoco muestra el ícono del selector.
     Por ende, aplico la clase CSS para que tenga el ícono deseado, y simulo
     click sobre el ítem del selector que corresponde al idioma de audio seteado
     en la opción data-qubitplayer-audioLang.
     */
    module.exports = function(audioLang) {
        var audioLangMenu = document.querySelector('.icon-mic'),
            audioItems = audioLangMenu.querySelectorAll('li.vjs-menu-item');

        audioLangMenu.classList.add('vjs-icon-audio-description');

        for (var i = 0; i < audioItems.length; i++) {
            if (audioItems[i].innerText === audioLang) {
                audioItems[i].click();
                break;
            }
        }
    };

},{}],181:[function(require,module,exports){
    module.exports = function(video) {
        var options;

        try {
            options = JSON.parse(video.getAttribute('data-qubitplayer-setup'));
        }
        catch (e) {
            console.error('Error al intentar leér las opciones.');
            throw e;
        }

        if (options === null) {
            throw('No se especificaron correctamente las opciones del player.');
        }

        /*
         Valores por defecto
         */
        if (typeof options.keyEvents === 'undefined') {
            options.keyEvents = true;
        }

        if (typeof options.audioLang === 'undefined') {
            options.audioLang = "en";
        }

        if (typeof options.subtitleLang === 'undefined') {
            options.subtitleLang = "es";
        }

        if (typeof options.timerPeriod === 'undefined') {
            options.timerPeriod = 15;
        }

        if (typeof options.currentTime === 'undefined') {
            options.currentTime = 0;
        }

        return options;
    };

},{}],182:[function(require,module,exports){
    /*
     Setea el idioma de los controles del player.
     */
    module.exports = function(playerLang) {
        videojs.addLanguage(playerLang.lang, playerLang.words);
    };

},{}],183:[function(require,module,exports){
    /*
     Eventos de teclado.
     */
    module.exports = function(player) {
        key('left', function (event, handler) {
            player.currentTime(player.currentTime()-30);
        });
        key('right', function (event, handler) {
            player.currentTime(player.currentTime()+30);
        });
        key('down', function (event, handler) {
            player.currentTime(player.currentTime()-300);
        });
        key('up', function (event, handler) {
            player.currentTime(player.currentTime()+300);
        });
        key('space', function (event, handler) {
            var el = event.target || event.srcElement;
            var isFullScreen = el.classList.contains('vjs-fullscreen-control');
            while ((el = el.parentElement) && !el.classList.contains('vjs-control-bar'));
            if (isFullScreen) {
                el = null;
            }
            if (el != null) {
                return false;
            }
            if (player.paused()) {
                player.play();
            } else {
                player.pause();
            }
        });
    };

},{}],184:[function(require,module,exports){
    module.exports.removeTrackEls = function(tracks) {
        for (var i = 0, l = tracks.length; i < l; i++) {
            tracks[i].parentElement.removeChild(tracks[i]);
        }
    };


    /*
     Añade los tracks de subtítulos.
     */
    module.exports.addTextTracks = function(player, tracks) {
        if (player.textTracks().length == 0) {
            for (var i = 0, len = tracks.length; i < len; i++) {
                player.addRemoteTextTrack({
                    kind: tracks[i].kind,
                    label: tracks[i].label,
                    language: tracks[i].lang,
                    default: tracks[i].default,
                    src: tracks[i].src
                });
            }
        }
    }

},{}],185:[function(require,module,exports){
    /*
     * videojs-ga - v0.4.2 - 2015-02-06
     * Copyright (c) 2015 Michael Bensoussan
     * Licensed MIT
     */
    (function() {
        var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

        videojs.plugin('ga', function(options) {
            var dataSetupOptions, defaultsEventsToTrack, end, error, eventCategory, eventLabel, eventsToTrack, fullscreen, loaded, parsedOptions, pause, percentsAlreadyTracked, percentsPlayedInterval, play, resize, seekEnd, seekStart, seeking, sendbeacon, timeupdate, volumeChange;
            if (options == null) {
                options = {};
            }
            dataSetupOptions = {};
            if (this.options()["data-setup"]) {
                parsedOptions = JSON.parse(this.options()["data-setup"]);
                if (parsedOptions.ga) {
                    dataSetupOptions = parsedOptions.ga;
                }
            }
            defaultsEventsToTrack = ['loaded', 'percentsPlayed', 'start', 'end', 'seek', 'play', 'pause', 'resize', 'volumeChange', 'error', 'fullscreen'];
            eventsToTrack = options.eventsToTrack || dataSetupOptions.eventsToTrack || defaultsEventsToTrack;
            percentsPlayedInterval = options.percentsPlayedInterval || dataSetupOptions.percentsPlayedInterval || 10;
            eventCategory = options.eventCategory || dataSetupOptions.eventCategory || 'Video';
            eventLabel = options.eventLabel || dataSetupOptions.eventLabel;
            options.debug = options.debug || false;
            percentsAlreadyTracked = [];
            seekStart = seekEnd = 0;
            seeking = false;
            loaded = function() {
                if (!eventLabel) {
                    eventLabel = this.currentSrc().split("/").slice(-1)[0].replace(/\.(\w{3,4})(\?.*)?$/i, '');
                }
                if (__indexOf.call(eventsToTrack, "loadedmetadata") >= 0) {
                    sendbeacon('loadedmetadata', true);
                }
            };
            timeupdate = function() {
                var currentTime, duration, percent, percentPlayed, _i;
                currentTime = Math.round(this.currentTime());
                duration = Math.round(this.duration());
                percentPlayed = Math.round(currentTime / duration * 100);
                for (percent = _i = 0; _i <= 99; percent = _i += percentsPlayedInterval) {
                    if (percentPlayed >= percent && __indexOf.call(percentsAlreadyTracked, percent) < 0) {
                        if (__indexOf.call(eventsToTrack, "start") >= 0 && percent === 0 && percentPlayed > 0) {
                            sendbeacon('start', true);
                        } else if (__indexOf.call(eventsToTrack, "percentsPlayed") >= 0 && percentPlayed !== 0) {
                            sendbeacon('percent played', true, percent);
                        }
                        if (percentPlayed > 0) {
                            percentsAlreadyTracked.push(percent);
                        }
                    }
                }
                if (__indexOf.call(eventsToTrack, "seek") >= 0) {
                    seekStart = seekEnd;
                    seekEnd = currentTime;
                    if (Math.abs(seekStart - seekEnd) > 1) {
                        seeking = true;
                        sendbeacon('seek start', false, seekStart);
                        sendbeacon('seek end', false, seekEnd);
                    }
                }
            };
            end = function() {
                sendbeacon('end', true);
            };
            play = function() {
                var currentTime;
                currentTime = Math.round(this.currentTime());
                sendbeacon('play', true, currentTime);
                seeking = false;
            };
            pause = function() {
                var currentTime, duration;
                currentTime = Math.round(this.currentTime());
                duration = Math.round(this.duration());
                if (currentTime !== duration && !seeking) {
                    sendbeacon('pause', false, currentTime);
                }
            };
            volumeChange = function() {
                var volume;
                volume = this.muted() === true ? 0 : this.volume();
                sendbeacon('volume change', false, volume);
            };
            resize = function() {
                sendbeacon('resize - ' + this.width() + "*" + this.height(), true);
            };
            error = function() {
                var currentTime;
                currentTime = Math.round(this.currentTime());
                sendbeacon('error', true, currentTime);
            };
            fullscreen = function() {
                var currentTime;
                currentTime = Math.round(this.currentTime());
                if ((typeof this.isFullscreen === "function" ? this.isFullscreen() : void 0) || (typeof this.isFullScreen === "function" ? this.isFullScreen() : void 0)) {
                    sendbeacon('enter fullscreen', false, currentTime);
                } else {
                    sendbeacon('exit fullscreen', false, currentTime);
                }
            };
            sendbeacon = function(action, nonInteraction, value) {
                if (window.ga) {
                    ga('send', 'event', {
                        'eventCategory': eventCategory,
                        'eventAction': action,
                        'eventLabel': eventLabel,
                        'eventValue': value,
                        'nonInteraction': nonInteraction
                    });
                } else if (window._gaq) {
                    _gaq.push(['_trackEvent', eventCategory, action, eventLabel, value, nonInteraction]);
                } else if (options.debug) {
                    console.log("Google Analytics not detected");
                }
            };
            this.ready(function() {
                this.on("loadedmetadata", loaded);
                this.on("timeupdate", timeupdate);
                if (__indexOf.call(eventsToTrack, "end") >= 0) {
                    this.on("ended", end);
                }
                if (__indexOf.call(eventsToTrack, "play") >= 0) {
                    this.on("play", play);
                }
                if (__indexOf.call(eventsToTrack, "pause") >= 0) {
                    this.on("pause", pause);
                }
                if (__indexOf.call(eventsToTrack, "volumeChange") >= 0) {
                    this.on("volumechange", volumeChange);
                }
                if (__indexOf.call(eventsToTrack, "resize") >= 0) {
                    this.on("resize", resize);
                }
                if (__indexOf.call(eventsToTrack, "error") >= 0) {
                    this.on("error", error);
                }
                if (__indexOf.call(eventsToTrack, "fullscreen") >= 0) {
                    return this.on("fullscreenchange", fullscreen);
                }
            });
            return {
                'sendbeacon': sendbeacon
            };
        });

    }).call(this);

},{}],186:[function(require,module,exports){
    ;(function() {
        'use strict';

        videojs.plugin('showControlBar', function(options) {
            /*
             options.eventName: el nombre del evento ante el cual vamos a mostrar la control bar.
             options.eventName: el nombre del loadeddataevento ante el cual vamos a mostrar la control bar.
             Por defecto, es loadeddata.
             */

            var __self = this,
                eventName = (options && options.eventName) || 'loadeddata';

            __self.on(eventName, function() {
                __self.controlBar.show();
                __self.controlBar.removeClass('vjs-user-inactive');
                // console.log('__self.controlBar: ', __self.controlBar);
            });

            __self.controlBar.hide();
        });
    })();

},{}],187:[function(require,module,exports){
    (function() {
        'use strict';
        var prevOffset = 0,
            currentOffset = 0;

        var defaults = {
                0: {
                    src: 'example-thumbnail.png'
                }
            },
            extend = function() {
                var args, target, i, object, property;
                args = Array.prototype.slice.call(arguments);
                target = args.shift() || {};
                for (i in args) {
                    object = args[i];
                    for (property in object) {
                        if (object.hasOwnProperty(property)) {
                            if (typeof object[property] === 'object') {
                                target[property] = extend(target[property], object[property]);
                            } else {
                                target[property] = object[property];
                            }
                        }
                    }
                }
                return target;
            },
            getComputedStyle = function(el, pseudo) {
                return function(prop) {
                    if (window.getComputedStyle) {
                        return window.getComputedStyle(el, pseudo)[prop];
                    } else {
                        return el.currentStyle[prop];
                    }
                };
            },
            offsetParent = function(el) {
                if (el.nodeName !== 'HTML' && getComputedStyle(el)('position') === 'static') {
                    return offsetParent(el.offsetParent);
                }
                return el;
            },
            getVisibleWidth = function(el, width) {
                var clip;

                if (width) {
                    return parseFloat(width);
                }

                clip = getComputedStyle(el)('clip');
                if (clip !== 'auto' && clip !== 'inherit') {
                    clip = clip.split(/(?:\(|\))/)[1].split(/(?:,| )/);
                    if (clip.length === 4) {
                        return (parseFloat(clip[1]) - parseFloat(clip[3]));
                    }
                }
                return 0;
            },
            getScrollOffset = function() {
                if (window.pageXOffset) {
                    return {
                        x: window.pageXOffset,
                        y: window.pageYOffset
                    };
                }
                return {
                    x: document.documentElement.scrollLeft,
                    y: document.documentElement.scrollTop
                };
            };

        /**
         * register the thubmnails plugin
         */
        videojs.plugin('thumbnails', function(options) {
            var div, settings, img, player, progressControl, duration, moveListener, moveCancel;
            settings = extend({}, defaults, options);
            player = this;

            (function() {
                var progressControl, addFakeActive, removeFakeActive;
                // Android doesn't support :active and :hover on non-anchor and non-button elements
                // so, we need to fake the :active selector for thumbnails to show up.
                if (navigator.userAgent.toLowerCase().indexOf("android") !== -1) {
                    progressControl = player.controlBar.progressControl;

                    addFakeActive = function() {
                        progressControl.addClass('fake-active');
                    };
                    removeFakeActive = function() {
                        progressControl.removeClass('fake-active');
                    };

                    progressControl.on('touchstart', addFakeActive);
                    progressControl.on('touchend', removeFakeActive);
                    progressControl.on('touchcancel', removeFakeActive);
                }
            })();

            // create the thumbnail
            div = document.createElement('div');
            div.className = 'vjs-thumbnail-holder';
            img = document.createElement('img');
            div.appendChild(img);
            img.src = settings['0'].src;
            img.className = 'vjs-thumbnail';
            extend(img.style, settings['0'].style);

            // center the thumbnail over the cursor if an offset wasn't provided
            if (!img.style.left && !img.style.right) {
                img.onload = function() {
                    img.style.left = -(img.naturalWidth / 2) + 'px';
                };
            }

            // keep track of the duration to calculate correct thumbnail to display
            duration = player.duration();

            // when the container is MP4
            player.on('durationchange', function(event) {
                duration = player.duration();
                // console.log('durationchange, duration: ', duration);
            });

            // when the container is HLS
            player.on('loadedmetadata', function(event) {
                duration = player.duration();
                // console.log('loadedmetadata, duration: ', duration);
            });

            // add the thumbnail to the player
            progressControl = player.controlBar.progressControl;
            progressControl.el().appendChild(div);

            moveListener = function(event) {
                var mouseTime, time, active, left, setting, pageX, right, width, halfWidth, pageXOffset, clientRect;
                active = 0;
                pageXOffset = getScrollOffset().x;
                clientRect = offsetParent(progressControl.el()).getBoundingClientRect();
                right = (clientRect.width || clientRect.right) + pageXOffset;
                pageX = event.pageX;
                if (event.changedTouches) {
                    pageX = event.changedTouches[0].pageX;
                }

                // find the page offset of the mouse
                left = pageX || (event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft);
                // subtract the page offset of the positioned offset parent
                left -= offsetParent(progressControl.el()).getBoundingClientRect().left + pageXOffset;

                // apply updated styles to the thumbnail if necessary
                // mouseTime is the position of the mouse along the progress control bar
                // `left` applies to the mouse position relative to the player so we need
                // to remove the progress control's left offset to know the mouse position
                // relative to the progress control

                /*
                 fix para el bug de que al hacer hover sobre la barra de progreso. Si
                 el hover es sobre el elemento .vjs-mouse-display o .vjs-load-progress,
                 event.offsetX es 0, y entonces se produce el bug de que el thumbnails que
                 se muestra es el primero, y no el que corresponde al momento del video
                 en que está parado el mouse. Entonces, para fixearlo, compruebo si el
                 elemento sobre el que estoy haciendo hover es efectivamente el que causa
                 el error. Si es así, uso el event.offsetX anterior.
                 */
                var srcElement = event.target || event.srcElement;
                if (srcElement.classList.contains('vjs-mouse-display') ||
                    srcElement.classList.contains('vjs-load-progress')) {
                    currentOffset = prevOffset;
                }
                else {
                    currentOffset = event.offsetX;
                    prevOffset = event.offsetX;
                }


                mouseTime = Math.floor(currentOffset / progressControl.width() * duration);
                // console.log('mouseTime: ', mouseTime);
                // console.log('event.offsetX: ', event.offsetX);
                // console.log('progressControl.width(): ', progressControl.width());
                // console.log('duration: ', duration);
                // console.log('active: ', active);
                for (time in settings) {
                    if (mouseTime > time) {
                        active = Math.max(active, time);
                    }
                }
                setting = settings[active];
                if (setting.src && img.src != setting.src) {
                    img.src = setting.src;
                }
                if (setting.style && img.style != setting.style) {
                    extend(img.style, setting.style);
                }

                width = getVisibleWidth(img, setting.width || settings[0].width);
                halfWidth = width / 2;

                // make sure that the thumbnail doesn't fall off the right side of the left side of the player
                if ( (left + halfWidth) > right ) {
                    left -= (left + halfWidth) - right;
                } else if (left < halfWidth) {
                    left = halfWidth;
                }

                div.style.left = left + 'px';
            };

            // update the thumbnail while hovering
            progressControl.on('mousemove', moveListener);
            progressControl.on('touchmove', moveListener);

            moveCancel = function(event) {
                div.style.left = '-1000px';
            };

            // move the placeholder out of the way when not hovering
            progressControl.on('mouseout', moveCancel);
            progressControl.on('touchcancel', moveCancel);
            progressControl.on('touchend', moveCancel);
            player.on('userinactive', moveCancel);
        });
    })();

},{}],188:[function(require,module,exports){
    ;(function() {
        'use strict';

        videojs.plugin('timerEvent', function(options) {
            var player = this,
                _options = options || {},
                _lastTime = 0;

            _options.interval = _options.interval || 15;

            var _interval = player.setInterval(function() {
                var currentTime = player.currentTime();

                if ( (currentTime - _lastTime) >= _options.interval ||
                    (currentTime - _lastTime) <= -_options.interval ) {
                    _lastTime = currentTime;
                    player.trigger('timerEvent');
                }

            }, 1000);

            player.on('ended', function() {
                player.clearInterval(_interval);
            });

            player.on('error', function() {
                player.clearInterval(_interval);
            });

        });

    })();

},{}],189:[function(require,module,exports){
    ;(function() {
        'use strict';

        videojs.LanguageItem = videojs.extend(videojs.getComponent('MenuItem'), {

            constructor: function(player, options) {

                var __self = this;

                // Set the item lang
                options['label'] = options.lang;

                // Call the parent constructor
                videojs.getComponent('MenuItem').call(this, player, options);

                // Store the language as a property
                this.language__ = options.lang;
                this.selectable = options['selectable'];

                // Detect the current languaje, and set the selected item
                if ("" !== player.getCurrentLang()) {
                    this.selected(this.language__ === player.getCurrentLang());
                }

                // Register our click and tap handlers
                this.on( ['click', 'tap'], this.onClick );

                // Toggle the selected class whenever the language changes
                player.on('changeLang', videojs.bind(this, function() {
                    __self.selected(__self.language__ === player.getCurrentLang());
                }));
            }

        });


        videojs.LanguageItem.prototype.onClick = function(evOb) {
            this.player().changeLang(this.language__);
        };


        videojs.LanguageTitleMenuItem = videojs.extend(videojs.getComponent('MenuItem'), {

            constructor: function(player, options) {
                videojs.getComponent('MenuItem').call(this, player, options);
                this.off('click');
            }
        });


        videojs.LanguageSelector = videojs.extend(videojs.getComponent('MenuButton'), {
            constructor: function(player, options) {
                videojs.getComponent('MenuButton').call(this, player, options);
                this.audioTracks = window.shakaPlayer.getAudioTracks();

                player.availableLangs = [];
                for(var trackIndex in this.audioTracks) {
                    player.availableLangs.push(this.audioTracks[trackIndex].lang);
                }

                var __self = this,
                    audioLang = options.audioLang || "en",  // el audio, al comienzo, si no se especifica otro, será inglés.
                    inexistentAudioLang = true; // se usa en caso de que se haya querido setear un idioma que no coincide con
                                                // ninguno de los de los tracks de audio.

                player.one('loadeddata', function() {
                    var audioTracks = window.shakaPlayer.getAudioTracks();

                    function setAudioLang() {
                        for (var i in audioTracks) {
                            if (audioTracks[i].lang === audioLang) {
                                inexistentAudioLang = false;
                                window.shakaPlayer.selectAudioTrack( audioTracks[i].id );
                                audioTracks[i].active = true;
                            }
                            else {
                                audioTracks[i].active = false;
                            }

                            if (audioTracks[i].active) {
                                for (var i2 in __self.items) {
                                    __self.items[ i2 ].selected(
                                        __self.items[ i2 ].language__ === audioTracks[i].lang);
                                }
                            }
                        }
                    }

                    setAudioLang();

                    if (inexistentAudioLang) {
                        audioLang = "en";
                        setAudioLang();
                    }
                });

                player.trigger('changeLang');
            }
        });


        videojs.LanguageSelector.prototype.className = 'vjs-lang-button';


        videojs.LanguageSelector.prototype.createItems = function() {
            var player = this.player(),
                items = [];


            // Add an item for each available language
            for (var lIndex in player.availableLangs) {
                items.push( new videojs.LanguageItem( player, {
                    lang: player.availableLangs[lIndex],
                    selectable: true
                }));
            }

            return items;
        };



        videojs.plugin('languageSelector', function(options) {

            var player = this,
                _options = options;

            player.on("loadedmetadata", function() {
                var audioTracks = window.shakaPlayer.getAudioTracks();

                if (audioTracks.length === 1) {
                    return;
                }

                if (audioTracks.length > 1) {
                    /*
                     hotfix/no-lang-attribute: checkeo que no pase que a todos los tracks de
                     audio les falte el atributo lang.
                     */
                    var emptyLangs = true;

                    /*
                     Inicializar el selector de idioma.
                     */
                    player.availableLangs = [];
                    for (var tIndex in audioTracks) {
                        if ("" ==! audioTracks[tIndex].lang) {  // hay al menos uno que tiene lang
                            emptyLangs = false;
                        }

                        player.availableLangs.push(audioTracks[tIndex].lang);
                    }

                    if (emptyLangs) { // ninguno tenía lang
                        return;
                    }

                    player.changeLang = function(lang) {
                        var activeAudioTrack;

                        audioTracks = window.shakaPlayer.getAudioTracks();

                        for (var tIndex in audioTracks) {
                            if ( audioTracks[tIndex].active ) {
                                activeAudioTrack = audioTracks[tIndex];
                                break;
                            }
                        }

                        if (activeAudioTrack.lang === lang) {
                            return;
                        }

                        for (var tIndex in audioTracks) {
                            if (audioTracks[tIndex].lang === lang) {
                                window.shakaPlayer.selectAudioTrack( audioTracks[tIndex].id );
                                break;
                            }
                        }

                        player.language__ = lang;

                        player.trigger('changeLang');
                    };


                    player.getCurrentLang = function() {
                        return player.language__;
                    };

                    _options.buttonText = player.localize('');
                    _options.availableLangs = player.availableLangs;

                    var languageSelector = new videojs.LanguageSelector( player, _options);

                    /*
                     En VideoJS 5 el método Component.addChild usa Array.push para añadir el componente.
                     Esto hace que el componente que estamos añadiendo se añada como el último elemento.
                     En el caso del selector de idioma, esto provoca que dicho selector aparezca después del botón
                     de Full Screen.
                     Para no modificar el código de VideoJS, lo añado con DOM Scripting pelado.
                     */
                    var controlBar = document.getElementsByClassName('vjs-control-bar')[0],
                        fullScreenElement = document.getElementsByClassName('vjs-fullscreen-control')[0];

                    languageSelector.el().classList.add('vjs-lang-button');
                    languageSelector.el().classList.add('vjs-icon-audio-description');

                    controlBar.insertBefore(languageSelector.el(), fullScreenElement);
                    player.controlBar.languageSelector = languageSelector;
                }

            });

        });
    })();

},{}]},{},[1,179]);