(function( $ ) {

    var slickElement;
    var lockCarousel = false;
    var criteriaServicePath = Routing.generate('service_criteria');
    var listServicePath = Routing.generate('service_list');

    $.fn.initCarousel = function( element, opts) {

        // Extend our default options with those provided.
        // Note that the first argument to extend is an empty
        // object – this is to keep from overriding our "defaults" object.
        var options = $.extend( {}, $.fn.initCarousel.defaults, opts );

        slickElement = $(element).slick(options);

        if (true === options.perItemOver && true === options.perItemOut) {
            $(slickElement).on('mouseenter', '.item-wrapper', function() {
                $(this).prevAll().addClass('shiftLeft');
                $(this).nextAll().addClass('shiftRight');
            });

            $(slickElement).on('mouseleave', '.item-wrapper', function() {
                $(this).prevAll().removeClass('shiftLeft');
                $(this).nextAll().removeClass('shiftRight');
            });
        }

        if (true === options.popover) {
            $.fn.popOverThis({
                elements: $(slickElement).getSelector() + ' .item-wrapper:not(.popovered)'
            });
        }

        if (true === options.afterChangeEvent) {
            // Le agrego al slider un callback al evento afterChange
            $(slickElement).on('afterChange', function(event, slick, currentSlide) {
                var slideCount = slick.slideCount;
                var currentCarousel = $(this);
                var currentPage = $(currentCarousel).data('page');

                // Evita el movimiento hacía atrás desde la primera página
                if (currentSlide < 4 && currentPage != 4) {
                    $(currentCarousel).find('.slick-prev').hide();
                } else {
                    $(currentCarousel).find('.slick-prev').show();
                }

                if (0 === $(currentCarousel).data('page-locked')) {
                    if (true !== lockCarousel) {
                        if (20 > (slideCount - currentSlide)) {
                            lockCarousel = true;
                            var criteria = $(currentCarousel).data('criteria');
                            var hash = $(currentCarousel).data('hash');
                            var status = $(currentCarousel).data('status');
                            var nextPage = currentPage + 1;

                            var url = criteriaServicePath + '/' + criteria + '/' + nextPage + '/' + hash;

                            if (true == options.userLogged) { // Ojo, porque aca comparabamos con === y traía cualquier fruta, porque userLogged es 1 y no true
                                url = listServicePath + '/' + criteria + '/' + status + '/' + nextPage + '/' + hash;
                            }
                            $.post(url).then(function(data) {
                                if(data !== '') {
                                    if (data.length > 0) {
                                        $(data).each(function(key, content) {
                                            $(currentCarousel).slick('slickAdd', content);
                                        });
                                        $('.item-wrapper').css('visibility', 'visible');
                                        $(currentCarousel).data('page', nextPage);
                                        $.fn.popOverThis({
                                            elements: $(currentCarousel).getSelector() + ' .item-wrapper :not(.popovered)'
                                        });
                                        if (true === options.userLogged) {
                                            $.fn.getContentHistory();
                                        }
                                    } else {
                                        $(currentCarousel).data('page-locked', 1);
                                    }
                                } else {
                                    $(currentCarousel).data('page-locked', 1);
                                }

                                lockCarousel = false;
                            });

                            if (4 === currentPage) {
                                $(currentCarousel).data('page-locked', 1);
                            }
                        }
                    }
                }

            });
        }

        $(slickElement).hover(function() {
            $(this).find('.slick-arrow').toggleClass('hovered');
        })
    };

    $.fn.destroyCarousel = function(element) {
        $(element).slick('unslick');
    }
}( jQuery ));
(function( $ ) {

    // Plugin definition.
    $.fn.classieLoader = function( options ) {

        // Extend our default options with those provided.
        // Note that the first argument to extend is an empty
        // object – this is to keep from overriding our "defaults" object.
        var opts = $.extend( {}, $.fn.classieLoader.defaults, options );

        // Our plugin implementation code goes here.
        var element = document.querySelector('.la-anim-1');

        if (opts.inProgress) {
            return false;
        }

        opts.inProgress = true;

        try {
            classie.add(element, 'la-animate');
        }
        catch(err) {
            console.log(err);
        }

        setTimeout(function() {
            try {
                classie.remove(element, 'la-animate');
            }
            catch(err) {
                console.log(err);
            }
            opts.inProgress = false;
        }, 6000);
    };

    // Plugin defaults – added as a property on our plugin function.
    $.fn.classieLoader.defaults = {
        inProgress: false
    };

    $(window).bind('beforeunload', function() {
        $.fn.classieLoader();
    });

}( jQuery ));
(function( $ ) {
    // Plugin definition.
    $.fn.contact = function (options) {
        var opts = $.extend( {}, $.fn.contact.defaults, options );

        $('.level-group').on('change', '.choiceOption', function(){
            var choice  = $(this);
            var level   = parseInt(choice.data('level')) + 1;
            var group   = choice.data('group');
            var complete = false;

            var label = {
                'motivo'        : opts.label_motivo,
                'dispositivo'   : opts.label_dispositivo
            };

            var data = {
                'opcion': choice.val(),
            };

            var url = Routing.generate('help_option', data);

            $.ajax({
                async	: false,
                method	: 'post',
                url		: url,
                success	: function(response) {
                    var levelVisible = 0;
                    $('.level-group:not(#level_1)').addClass('off');
                    $('#level_' + level + '_1.form-group.sub-level').html('');

                    if (response.length > 0 || true === response.hasOwnProperty('multiple')) {
                        if (2 === level || 3 === level) {
                            if (true === response.hasOwnProperty('multiple')) {
                                var data = response.OS || response.computadora;
                                $('#level_' + level).html($.fn.contact.selectHtml(opts.form_id, level, data));
                                $('#level_' + level + '_1').html($.fn.contact.selectHtml(opts.form_id, level, response.dispositivo_razon));
                            }

                            if (false === response.hasOwnProperty('multiple')) {
                                $('#level_' + level).html($.fn.contact.selectHtml(opts.form_id, level, response));
                            }
                        } else {
                            $('#level_' + level).html($.fn.contact.optionsHtml(opts.form_id, level, response));
                        }

                        levelVisible = level;
                    } else {
                        levelVisible = level - 1;
                        if (3 === levelVisible && parseInt(choice.val()) > 0 && 'computadora' !== group) {
                            complete = true;
                        }
                        if (2 === levelVisible && 'dispositivo' === group) {
                            complete = true;
                        }
                        if (4 === levelVisible) {
                            complete = true;
                        }
                    }

                    var text = '';
                    if ('dispositivo' === group) {
                        text = label.dispositivo;

                        // Cuando se selecciona "Mis Dispositivos",
                        // estas opciones tienen que desplegarse siempre,
                        // independientemente de la opción que elijan
                        if (level === 3) {
                            $('#dispositivo-extra').show();
                            dispositivoExtraDisplay = true;
                        }

                    } else {
                        text = label.motivo;

                        if (level <= 3) {
                            // Si el level es menor a 3, quiere decir
                            // que seleccionó otra opción
                            $('#dispositivo-extra').hide();
                        }

                    }
                    if (2 === level) {
                        $('#level_2').prepend($('<label>'+text+'</label>'));
                    }

                    for (var i = 1; i <= levelVisible; i++) {
                        $('#level_' + i).removeClass('off');
                    }
                    if (true === complete) {
                        $('#comentario, #form-buttons').removeClass('off');
                    }
                }
            });
        });
    };

    $.fn.contact.defaults = {
        label_motivo      : '',
        label_dispositivo : '',
        form_id           : ''
    };

    $.fn.contact.selectHtml = function (form_id, level, data) {
        var name = (2 === level) ? 'motivo' : ((3 === level) ? 'motivo_especifico' : 'browser');
        var selectHtml = $('<div class="style-select"><select name="'+form_id+'['+name+']" id="'+form_id+'_'+name+'_'+level+'" data-level="'+level+'" class="form-control choiceOption"></select></div>');
        selectHtml.find('select').append($('<option value="0"> -- Seleccioná una opción -- </option>'));

        data.forEach(function(option, index, object){
            var optionsHtml = '<option value="' + option.id +'">' + option.name + '</option>';
            selectHtml.find('select').append($(optionsHtml)).data('group', option.group);
        });
        return selectHtml;
    };

    $.fn.contact.optionsHtml = function (form_id, level, data) {
        var name = (2 === level) ? 'motivo' : ((3 === level) ? 'motivo_especifico' : 'browser');
        var ulHtml = $('<ul class="custom-radio"></ul>');

        data.forEach(function(option, index, object){
            var liHtml = '<li>' +
                '<input type="radio" name="'+form_id+'['+name+']" id="'+form_id+'_'+name+'_'+level+'_'+option.id+'"' +
                ' data-level="'+level+'" data-group="'+option.group+'" value="'+option.id+'" class="choiceOption"/>' +
                '<label for="'+form_id+'_'+name+'_'+level+'_'+option.id+'" >'+option.name+'</label>' +
                '<div class="check"></div>' +
                '</li>';
            ulHtml.append($(liHtml)).data('group', option.group);
        });
        return ulHtml;
    };

    $.fn.contact.cancel = function() {
        $('.level-group:not(#level_1)').addClass('off');
        $('input[name="vod_contact[tema]"]').attr('checked', false);
    }

}( jQuery ));
;(function ( $, window, document, undefined ) {

    var cache = kizzy('content-history');
    var ttlCache = 120 * 60 * 1000;

    $.fn.getContentHistory = function(opts) {
        var options = $.extend({}, $.fn.getContentHistory.defaultOptions, opts);

        var key = 'content-history';
        var path = Routing.generate('service_user_history');
        var history = null;

        if ('' != options.username) {
            key = key + '-' + options.username;

            // busco en cache el array data:
            history = cache.get(key);
        }

        if (null == history) {
            $.post(path).then(function (data) {
                //console.log(data);
                if (data.Status) {
                    // Guardo en cache data.data
                    cache.set(key, data, ttlCache);
                    if (data.Data.length > 0) {
                        // y.... updateo el DOM con los elementos
                        loadHistoryInItems(data.Data);
                    }
                }
            });
        } else {
            loadHistoryInItems(history.Data);
        }
    };

    // Set default values for variables
    $.fn.getContentHistory.defaultOptions = {
        username: ''
    };

    // Scroll necesario cuando está la navbar de Personal
    $(document).scroll(function(){
        var a=$(this).scrollTop();

        if (a > 20) {
            $("[data-operator='personal'] > .navbar").addClass("sticky-navbar");
        } else {
            $("[data-operator='personal'] > .navbar").removeClass("sticky-navbar");
        }
    });


    function loadHistoryInItems(data) {
        var runtime = 0;
        var percent = 0;
        $.each(data, function (key, content) {
            var itemSelector = '.item-' + content.id;
            runtime = $(itemSelector).data('runtime');
            if (runtime) {
                if (content.currentTime > (runtime * 60)) {
                    percent = 100;
                } else {
                    if (runtime > 0) {
                        percent = Math.round((content.currentTime * 100) / (runtime * 60));
                    }
                }

                if (content.currentTime >= 0) {
                    percent++;
                    $('.item-' + content.id + ' .progress').show();
                    $('.item-' + content.id + ' .progress .progress-bar').css('width', percent + '%');
                }
            }

            if (content.favorite == 1) {
                $('.item-' + content.id + ' .favourite i').addClass('favourite-heart');
                var data = $(itemSelector).data('content');
                if (data) {
                    data = data.replace('<i class="fa fa-lg fa-heart"></i>', '<i class="fa fa-lg fa-heart favourte-heart"></i>');
                    $('.item-' + content.id).data('content', data);
                }
            }
        });
    }

    /**
     * setRecommenderEvent
     *
     * Llamada al servicio Recommender Event.
     */
    $.fn.setRecommenderEvent = function(opts) {
        this.defaultOptions = {
            type: 'visit',
            uuid: '',
            recommended: 0
        };

        var path = Routing.generate('service_set_recommended');
        var options = $.extend({}, this.defaultOptions, opts);

        var urlService = path + '/' + options.uuid + '/' + options.recommended + '/' + options.type;

        $.post(urlService).then(function (data) {
            if (data.Status) {
                //console.log('set Recommended: ' + data.Status);
            }
        });
    };

    /**
     * Este metodo reproduce el contenido llamado por un boton Play.
     * Se saca del evento llavascript para poder continuar la acción
     * en el caso de una advertencia por el plugin widevine
     **/
    $.fn.playContent = function(e, element) {
        e.preventDefault();
        $.fn.classieLoader();

        var uuid = element.data('uuid'); //console.log(uuid);
        var path = Routing.generate('service_content_status');

        var iFaPlay = element.find('i.fa-play');
        var iFaCircle = element.find('.fa-stack');
        var iFaSpinner = element.find('i.fa-spinner');

        iFaPlay.hide();
        iFaCircle.addClass('no-bg');
        iFaSpinner.show();
        element.css('opacity', '1');

        // Set play cookie here
        var location = $(element).data('location');
        //console.log(location);
        // Save data to sessionStorage
        sessionStorage.setItem('playLocation', location);

        var postData = {
            'index': element.data('index'),
            'carousel': element.data('carousel')
        };

        $.post(path + '/' + uuid + '/' + false, postData, function(data) {
            if (null === data.Data.Twig && null !== data.Data.RedirectRoute) {
                window.location.href = data.Data.RedirectRoute;
            } else if (null !== data.Data.Twig) {
                $('#modal-container').html(data.Data.Twig);
                $('#modal').modal();
                $('#modal').on('hidden.bs.modal', function(e){
                    $('.modal-backdrop').remove();
                });
                $('#country-not-enabled-modal').modal();
                if (typeof element !== 'undefined') {
                    iFaPlay.show();
                    iFaCircle.removeClass('no-bg');
                    iFaSpinner.hide();
                    element.css('opacity', '0');

                    if (element.hasClass('btn-ppv')) {
                        element.css('opacity', '1');
                    }

                }
            }
        }, 'json');
    };

    $(window).load(function() {
        $('span.btn-play').css('visibility', 'visible');
    });

    $(document)
        .on('click', '.item-play, .js-item-play', function(e) {
            $.fn.playContent(e, $(this));
        });

    $(document).on('click', '#parental-password-check-submit-button', function() {
        var uuid = $('#hidden-uuid').val();
        var parentalPassword = $('#parental-password').val();
        var path = Routing.generate('service_content_status');
        var urlService = ($.trim(parentalPassword) === '') ? path + '/' + uuid : path + '/' + uuid + '/' + parentalPassword;
        $.fn.classieLoader();
        $.post(urlService, null, function(data) {
            $('.modal-backdrop').remove();
            if (null === data.Data.Twig && null !== data.Data.RedirectRoute) {
                window.location.href = data.Data.RedirectRoute;
            } else if (null !== data.Data.Twig) {
                $('#modal-container').html(data.Data.Twig);
                $('#modal').modal();
                $('#country-not-enabled-modal').modal();
                if (typeof obj !== 'undefined') {
                    obj.find('.fa-play').show();
                    obj.find('.fa-stack').removeClass('no-bg');
                    obj.find('.fa-spinner').hide();
                    obj.css('opacity', 'inherit');
                }
            }
        }, 'json');
    });

    $(document).on('click', '.favourite a', function(e) {
        e.preventDefault();

        var path = Routing.generate('service_user_favorite');
        var element = $(this);
        var dataID = $(this).attr('data-uuid');

        var addList = '';            
            addList += '<div class="addList" data-uuid="'+dataID+'">';
            addList += '   <div class="addList-overlay"></div>'
            addList += '       <div class="addList-checked">'
            addList += '           <i class="fa fa-check" aria-hidden="true"></i>'
            addList += '           <p>Agregado a Mi lista</p>'
            addList += '       </div>'
            addList += '</div>'

        var removeList = '';
            removeList += '<div class="putOffList" data-uuid="'+dataID+'">';
            removeList += '   <div class="addList-overlay"></div>';
            removeList += '   <div class="addList-checked">';
            removeList += '       <i class="fa fa-check" aria-hidden="true"></i>';
            removeList += '       <p>Eliminado de Mi lista</p>';
            removeList += '   </div>';
            removeList += '</div>';

        $.post(path + '/' + $(element).data('uuid')).then(function(data) {
            if (true === data.Status) {
                
                if (true === data.Favorite) {
                    $('a.check').addClass('btn-bg-color');
                    $(element).find('i').addClass('favourite-heart');
                    $(element).attr('title', $(element).data('remove'));
                    $(element).attr('data-original-title', $(element).data('remove'));
                    $(addList).prependTo('div.item-wrapper[data-uuid="'+dataID+'"] .item-img').fadeIn( 200 ).delay( 2000 ).fadeOut( 300, function() { $(this).remove(); } );
                    
                } else {
                    $('a.check').removeClass('btn-bg-color');
                    $(element).find('i').removeClass('favourite-heart');
                    $(element).attr('title', $(element).data('add'));
                    $(element).attr('data-original-title', $(element).data('add'));
                    $(removeList).prependTo('div.item-wrapper[data-uuid="'+dataID+'"] .item-img').fadeIn( 300 ).delay( 2000 ).fadeOut( 300, function() { $(this).remove(); } );

                }
                $('.item-wrapper[data-uuid="'+$(element).data('uuid')+'"]').data('favorite', (true === data.Favorite) ? '1' : '0');
                $(element).blur();
            }
        });
    });

})( jQuery, window, document );
;(function ( $, window, document ) {
    $.fn.couponize = function(opts) {
        options = $.extend({}, $.fn.couponize.defaultOptions, opts);
        var input = $(this);

        $(input).bind('input', function() {
            validateCoupon($(input));
        });

        $(options.coupon_information_container).on('click', options.button_close_coupon_information_container, function(e) {
            closeContainer(e, input);
        });

        input.check = function() {
            return options.check;
        };

        return input;
    };

/*
 validation_min_length: '{{ couponCodeParameters.min }}',
 container_information: '#coupon-information-container'
*/

    $.fn.couponize.defaultOptions = {
        validation_min_length: 0,
        container_information: '',
    };

    function validateCoupon(input) {
        if(true === checkCouponLength($(input).val().length)) {
            var path = Routing.generate('service_constraint_coupon_validator');
            $.post(path, $(input).serialize()).then(function(data) {
                if(false === data.Status) {
                    $(options.coupon_information_container).html('');
                    $(options.coupon_error_container).html('<p class="text-danger"><strong>' + data.Message + '</strong></p>');
                    $(options.coupon_check_container).html('');
                    options.check = false;
                } else {
                    document.getElementById('coupon-information-container').innerHTML(data.Data.Twig);
                    $(options.coupon_information_container).html(data.Data.Twig);
                    $(options.coupon_error_container).html('');
                    $(options.coupon_check_container).html('<i class="fa fa-check"></i>');
                    options.check = true;
                }
            });
        } else {
            $(options.coupon_information_container).html('');
            $(options.coupon_error_container).html('');
            $(options.coupon_check_container).html('');
        }
    }

    function closeContainer(event, input) {
        event.preventDefault();
        $(options.coupon_information_container).html('');
        $(options.coupon_error_container).html('');
        $(options.coupon_check_container).html('');
        $(input).val('');
    }

    function checkCouponLength(actualLength) {
        if (options.validation_min_length === 0) {
            return false;
        }

        return actualLength >= options.coupon_min_length;
    }

})( jQuery, window, document );
(function( $ ) {

    // Genre click
    $('.tag-item').click(function() {
        var tag = $(this).data('tag');
        $.fn.googleAnalyticsSendEvent({
            'category': 'menu',
            'action': 'click',
            'label': tag
        });
    });

    $(document).on('click', '.item-wrapper', function() {
        var element = $(this);
        var container = $(element).parents(':eq(3)');
        var locationLabel = $(element).data('location');

        if ('home' === locationLabel) { // Si el click fue en la home. También tengo que enviar la ubicación numérica del carrusel, elemento del carrusel y nombre del carrusel.
            var row = $(container).data('row');
            var column = $(element).data('slick-index');
            var carouselName = $(container).attr('id');
            var ubicationLabel = row + '-' + column + '-' + carouselName;

            $.fn.googleAnalyticsSendEvent({
                category: 'pantalla/consumo-por-ubicacion',
                action: 'click',
                label: ubicationLabel
            });
        }

        $.fn.googleAnalyticsSendEvent({
            category: 'contenido/ficha-pelicula/fuente',
            action: 'click',
            label: locationLabel
        });
    });

    $(document).on('click', '.detail', function() {
        var label = $(this).data('location');

        $.fn.googleAnalyticsSendEvent({
            category: 'contenido/ficha-pelicula/fuente',
            action: 'click',
            label: label
        });
    });

    // Push de ecommerce
    $.fn.subscriptionPush = function (step, currency) {
        currency = typeof currency !== 'undefined' ? currency : 'USD';
        dataLayer.push({
            'event': 'checkout',
            'currencyCode': currency,
            'ecommerce': {
                'checkout': {
                    'actionField': {
                        'step': step
                    }
                }
            }
        });
    };

    // Push de confirmación de suscripción
    $.fn.operationConfirmationPush = function (userId, price, operatorCode, product, firstMonth, currency) {
        var json = {
            'event': 'transaction',
            'ecommerce': {
                'purchase': {
                    'actionField': {
                        'id': operatorCode + '-' + userId + '-' + new Date().getTime(),
                        'affilliation': 'Qubit ' + operatorCode,
                        'revenue': price
                    },
                    'products': [{
                        'id': operatorCode + '-' + product.id,
                        'name': product.name + ' ' + operatorCode,
                        'price': product.displayPrice,
                        'brand': 'Qubit.tv',
                        'category': 'Subscription',
                        'quantity': '1'
                    }]
                }
            }
        };

        if (typeof currency !== 'undefined') {
            json['currencyCode'] = currency;
        }

        if (firstMonth !== false) {
            json['ecommerce']['purchase']['actionField']['revenue'] = 0;
            json['ecommerce']['purchase']['actionField']['coupon'] = 'Primer mes gratis';
        }

        dataLayer.push(json);

        return this;
    };

    // Push an analytics event
    $.fn.googleAnalyticsSendEvent = function( opts ) {
        var defaultOptions = {
            trackPageview: '',
            value: ''
        };

        var options = $.extend({}, defaultOptions, opts);

        var eventType = 'GAevent';
        if (options.trackPageview != '') {
            evenType = 'GAevent/PageView';
        }

        dataLayer.push({
            'event': eventType,
            'eventCategory': options.category,
            'eventAction': options.action,
            'eventLabel': options.label,
            'eventValue': options.value,
            'UrlPath': options.trackPageview
        });

        return this;
    };

    // Call the google API url shortener & return the response
    $.fn.googleUrlShortener = function ( longUrl ) {
        return gapi.client.urlshortener.url.insert({
            'longUrl': longUrl
        });
    };

}( jQuery ));
;(function ( $, window, document, undefined ) {

    var cache = kizzy('home');
    var delta = 2000;
    var ttlCache = 120 * 60 * 1000;
    var criteriaServicePath = Routing.generate('service_criteria');
    var listServicePath = Routing.generate('service_list');

    $.fn.prepareCarousels = function(opts) {
        options = $.extend({}, $.fn.prepareCarousels.defaultOptions, opts);
        element = this;

        cache.clearExpireds();

        this.each(function(index, element){
            if ('grandes-directores' !== $(element).attr('id')) {
                $(element).loadItems();
            } else {
                if (false === $('#grandes-directores .slick').is('.slick-initialized')) {
                    $.fn.initCarousel($('#grandes-directores .slick'), {
                        slidesToShow: 3,
                        slidesToScroll: 3,
                        infinite: true,
                        variableWidth: true,
                        perItemOver: true,
                        perItemOut: true,
                        afterChangeEvent: true,
                        userLogged: '0',
                        popover: false
                    });
                }
            }
        });

        return this;
    };

    // Set default values for variables
    $.fn.prepareCarousels.defaultOptions = {
        username: ''
    };

    $.fn.loadItems = function () {
        var carousel = $(this);
        //return;
        var slickCarousel = $(carousel).find('.slick');
        if ((this.position().top > $(window).scrollTop() - delta) && (this.position().top < $(window).scrollTop() + delta)
            && (slickCarousel.data('page') == 0) && (slickCarousel.data('page-locked') == 0)) {
            var currentPage = slickCarousel.data('page') + 1;
            var criteria    = slickCarousel.data('criteria');
            var condition   = slickCarousel.data('condition');
            var hash        = slickCarousel.data('hash');
            var status      = slickCarousel.data('status');
            var userLogged  = slickCarousel.data('logged');
            var url;
            var dataCarousel = null;
            
            var key = slickCarousel.data('name') + criteria + slickCarousel.data('user-restriction') + currentPage + status + options.username;

            if (true == userLogged) {
                url = listServicePath + '/' + criteria + '/' + status + '/' + currentPage + '/' + hash;
                ttlCache = 5 * 60 * 1000;
            } else {
                url = criteriaServicePath + '/' + criteria + '/' + currentPage + '/' + hash;
                dataCarousel = cache.get(key);
            }

            if (false == dataCarousel || undefined == dataCarousel) {
                slickCarousel.data('page-locked', 1);
                $.post(url).then(function(data) { // Url para obtener contenido del carrusel
                    if ('' != data) {
                        if (data.length > 0) {
                            var html = ''; slickCarousel.html('');
                            $(data).each(function(key, content) {
                                slickCarousel.append(content);
                                html += content;
                            });
                            initCarousel(slickCarousel, userLogged);
                            cache.set(key, html, ttlCache);
                            slickCarousel.find('.slick-prev').hide();
                            slickCarousel.data('page-locked', 0);
                            slickCarousel.data('page', currentPage); // Seteamos el valor de la siguiente página
                        } else {
                            $(carousel).hide();
                        }
                    } else {
                        $(carousel).hide();
                    }
                }, function () { $(carousel).hide(); });
            } else { // Carousel in localstorage
                slickCarousel.html(dataCarousel);
                initCarousel(slickCarousel, userLogged);
                slickCarousel.find('.slick-prev').hide();
                slickCarousel.data('page', currentPage); // Seteamos el valor de la siguiente página
            }
        }
    };

    // Initcarousel en home
    function initCarousel(carousel, userLogged) {
        $.fn.initCarousel(carousel, {
            slidesToShow: 9,
            slidesToScroll: 3,
            infinite: true,
            variableWidth: true,
            perItemOver: true,
            perItemOut: true,
            afterChangeEvent: true,
            userLogged: userLogged,
            popover: true
        });
        // Cargo la historia del contenido del usuario logeado, si es que hay uno.
        if ('' != options.username) {
            $.fn.getContentHistory({'username': options.username});
        }
    }

})( jQuery, window, document );
;(function ( $, window, document, undefined ) {

    var sendEvent = function() {
        $form = $('#form-subscribe-newsletter');
        $.post($form.attr('action'), $form.serialize(), function(data) {
            $('#newsletter-container').html('').append(data.Data.Twig);
            $('#submit-form-subscribe-newsletter').on('click', function() {
                sendEvent();
            });
        }, 'json');
    }

    // Submit del newsletter
    $('#submit-form-subscribe-newsletter').on('click', function() {
        sendEvent();
    });

    // Prevent enter in the newsletter
    // Prevent enter in the newsletter
    $('body').on('keydown', '#form-subscribe-newsletter', function(event) {
        if(event.keyCode == 13) {
            event.preventDefault();
            return false;
        }
    });

})( jQuery, window, document );
;(function ( $, window, document, undefined ) {

    var scrollTimer = null;
    var clickEvent = false;
    var currentSection = 1;
    var topSection = 7;

    $.fn.parallaxLanding = function() {
        $(document).scroll(function() {
            var nextSectionSelector = '.next-section';
            var navbarSelector = '.navbar';
            if($(window).height() - ($(document).height() - $(window).scrollTop() - $('footer').height()) > -15) {
                var marginBottom = $(window).height() - ($(document).height() - $(window).scrollTop() - $('footer').height()) + (165 - $('footer .footer-links').height());
                $(nextSectionSelector).css('bottom', marginBottom + 'px');
            }else {
                $(nextSectionSelector).css('bottom', '');
            }

            var y = $(this).scrollTop();
            if (y > 500) {
                $(navbarSelector).addClass('navbar-visible');
            } else {
                $(navbarSelector).removeClass('navbar-visible');
            }

            clearTimeout($.data(this, 'scrollCheck'));
            $.data( this, 'scrollCheck', setTimeout(function() {
                scrollingPosition();
                clickEvent = false;
            }, 250));

            arrowDirection();
        });
    };

    var scrollingPosition = function(){
        if(clickEvent == false) {
            var windowScrollTop = $(this).scrollTop();
            var minor = $(document).height();
            var nextSection = currentSection;

            $('div[id^="section"]').each(function(){
                var y = windowScrollTop - $(this).offset().top;

                if(y >= 0 && y < minor) {
                    nextSection = parseInt($(this).attr('id').replace('section',''));
                    minor = y;
                }
            });

            if(nextSection != currentSection) {
                currentSection = parseInt($('#section' + nextSection).attr('id').replace('section',''));
            }
        }

        arrowDirection();
    };


    $('.next-section a').click(function(event){
        event.preventDefault();
        clickEvent = true;

        if (currentSection == 7) {
            // CAMBIAR LA FLECHITA
            currentSection = 0;
        }

        currentSection = currentSection + 1;

        //go to destination
        $('html,body').animate({
            scrollTop: $('#section'+ currentSection ).offset().top,
        }, 1000, 'swing');
    });

    var arrowDirection = function() {
        if (currentSection < 7) {
            $('.next-section a').addClass('arrow-down');
            $('.next-section a').removeClass('arrow-up');
        }else{
            $('.next-section a').removeClass('arrow-down');
            $('.next-section a').addClass('arrow-up');
        }
    }


})( jQuery, window, document );
;(function ( $, window, document, undefined ) {

    var formSubmitted = false;

    $.fn.proccessSubscription = function(options) {
        $(this).on('submit', function(e) {

            if (true === formSubmitted) {
                return formSubmitted;
            }

            e.preventDefault();

            $.post(location.href, $(this).serialize()).then(function(data) {
                if (data.response) {
                    formSubmitted = true;

                    var tempForm = $('<form/>').attr({
                        method: 'POST',
                        action: options.url_decidir
                    });

                    tempForm.append($("<input/>").attr({type: 'hidden', id: "NROCOMERCIO", name: "NROCOMERCIO", value: $('#NROCOMERCIO').val()}));
                    tempForm.append($("<input/>").attr({type: 'hidden', id: "CUOTAS", name: "CUOTAS", value: $('#CUOTAS').val()}));
                    tempForm.append($("<input/>").attr({type: 'hidden', id: "EMAILCLIENTE", name: "EMAILCLIENTE", value: $('#EMAILCLIENTE').val()}));

                    tempForm.append($("<input/>").attr({type: 'hidden', id: "NROOPERACION", name: "NROOPERACION", value: data.response.NROOPERACION}));
                    tempForm.append($("<input/>").attr({type: 'hidden', id: "URLDINAMICA", name: "URLDINAMICA", value: data.response.URLDINAMICA}));
                    tempForm.append($("<input/>").attr({type: 'hidden', id: "MONTO", name: "MONTO", value: data.response.MONTO}));
                    tempForm.append($("<input/>").attr({type: 'hidden', id: "MEDIODEPAGO", name: "MEDIODEPAGO", value: data.response.MEDIODEPAGO}));
                    tempForm.append($("<input/>").attr({type: 'hidden', id: "PARAMSITIO", name: "PARAMSITIO", value: data.response.PARAMSITIO}));

                    $(options.pay_method_iframe).append(tempForm);

                    tempForm.submit();

                    formSubmitted = false;
                } else {
                    //console.log("Debe seleccionar plan y medio de pago");
                }
            });
        });
    }

})( jQuery, window, document );
;(function ( $, window, document, undefined ) {

    var buyAndPlayTrailerPath = Routing.generate('buy_and_play_trailer');

    $.fn.playTrailer = function(options) {
    	$.fn.classieLoader();

        var element     = $('.slider-detail .item-play');
        var isChrome    = !!window.chrome;
        var isEdge      = (navigator.userAgent.indexOf('Edge') === -1) ? false : true;

        var iFaPlay = element.find('i.fa-play');
        var iFaCircle = element.find('.fa-stack');
        var iFaSpinner = element.find('i.fa-spinner');

        iFaPlay.hide();
        iFaCircle.addClass('no-bg');
        iFaSpinner.show();
        element.css('opacity', '1');

        $.post(buyAndPlayTrailerPath + '/' + options.uuid + '/' + options.quality).then(function(data) {
            if (data.Success == false) {
                $('#error-trailer-fail').modal('show');
                iFaSpinner.fadeOut();
                return;
            }

        	$('.trailer-container').show();

        	$('#trailerPlayer').attr('data-viblast-widevine-licensing-server', data['dashProxy']);
        	$('#trailerPlayer').attr('data-source', data['urlDash']);

            var dynmovie = document.getElementById('trailerPlayer'),
                src = dynmovie.dataset.source,
                type = dynmovie.dataset.sourcetype,
                source = document.createElement('source');
                dynmovie.className += " video-js";

            if (isChrome === false || isEdge === true) {
                src = data['directUrl'];
                type = 'video/mp4';
            }

            $('#trailerPlayer').playereable({
                'currentTime'   : 0,
                'reproductionId': data['reproductionId'],
                'uuid'          : data['uuid'],
                slug            : options.slug,
                redirect        : false,
                'type'          : type,
                'src'           : src,
                'language'      : 'es',
                'hash'          : data['hash'],
                poster          : options.poster
            });

            $('#trailerPlayer').on('ended', function(){ 
            	$('.js-close-trailer').click();
            });

            if(videojs.players.hasOwnProperty('trailerPlayer') === true) {
                vodPlayer = videojs.players['trailerPlayer'];
                vodPlayer.on('ended', function(){
                    $('.js-close-trailer').click();
                });
            }
        });

        return this;
    };
})( jQuery, window, document );
(function( $ ) {

    $.fn.popOverThis = function ( opt ) {
        var options = $.extend( {}, $.fn.popOverThis.defaults, opt );
        var settings = options.settings;
        $(options.elements).each(function(index, element) {

            if(!$(element).data('uuid')) return;

            $(element).webuiPopover({
                trigger: settings.trigger,
                placement: settings.placement,
                style: settings.style,
                delay: settings.delay,
                animation: settings.animation,
                cache: settings.cache,
                type: settings.type,
                type: 'html',
                content: function() {
                    $.fn.popOverThis.html = $('#popover-template').html();
                    var dataSet = $(element).data();

                    if (!dataSet.uuid) return;
                    
                    dataSet['ranking'] = dataSet['ranking'] / 10;
                    
                    $.each(dataSet, function(index, data){
                        index = index.replace('content', '').replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
                        $.fn.popOverThis.html = $.fn.popOverThis.html.replace(new RegExp('{'+index+'}', 'g'), data);
                    });

                    if ('1' === dataSet.availableHd) {
                        $.fn.popOverThis.html = $.fn.popOverThis.html.replace('{format}', 'hd');
                    } else {
                        $.fn.popOverThis.html = $.fn.popOverThis.html.replace('{format}', 'sd');
                    }
                    if (0 === dataSet.subtitled.length) {
                        $.fn.popOverThis.html = $.fn.popOverThis.html.replace('<span class="icons icon-subtitled"></span>', '');
                    }
                    if (0 === dataSet.favorite.length) {
                        $.fn.popOverThis.html = $.fn.popOverThis.html.replace('<span class="icons icon-subtitled"></span>', '');
                    }
                    for (var i = 0; i < 5; i++) {
                        $.fn.popOverThis.html = ((i*20) < parseInt(dataSet.ranking)) ? $.fn.popOverThis.html.replace('{active-'+i+'}', 'active') : $.fn.popOverThis.html.replace('{active-'+i+'}', '');
                    }

                    return $.fn.popOverThis.html;
                },
                onShow: function ($element) {
                    var dataSet = $(element).data();
                    if (0 === dataSet.favorite.length) {
                        $.ajax({
                            async: true,
                            method: 'post',
                            url: Routing.generate('content_favorite', {'uuid':dataSet.uuid}),
                            success: function (response) {
                                $(element).data('favorite', '0');

                                if (true === response.isFavorite) {
                                    $('i[data-uuid="'+dataSet.uuid+'"]')
                                        .addClass('favourite-heart')
                                        .attr('title', $('i[data-uuid="'+dataSet.uuid+'"]').parents('.row').data('remove-title'))
                                        .parent().attr('title', $('i[data-uuid="'+dataSet.uuid+'"]').parents('.row').data('remove-title'))
                                    ;
                                    $(element).data('favorite', '1');
                                }
                            }
                        });
                    } else {
                        $('i[data-uuid="'+dataSet.uuid+'"]')
                            .removeClass('favourite-heart')
                            .attr('title', $('i[data-uuid="'+dataSet.uuid+'"]').parents('.row').data('add-title'))
                            .parent().attr('title', $('i[data-uuid="'+dataSet.uuid+'"]').parents('.row').data('add-title'))
                        ;
                        if ('1' === dataSet.favorite)
                            $('i[data-uuid="'+dataSet.uuid+'"]')
                                .addClass('favourite-heart')
                                .attr('title', $('i[data-uuid="'+dataSet.uuid+'"]').parents('.row').data('remove-title'))
                                .parent().attr('title', $('i[data-uuid="'+dataSet.uuid+'"]').parents('.row').data('remove-title'))
                            ;
                    }
                }
            });
            $(element).addClass('popovered');
        });
    };

    // Plugin defaults – added as a property on our plugin function.
    $.fn.popOverThis.defaults = {
        elements: $('div.item-wrapper'),
        settings: {
            trigger: 'hover',
            placement: 'horizontal',
            style: 'inverse',
            delay: {
                show: 350,
                hide: 200
            },
            animation: 'fade',
            cache: true,
            type: 'async'
        }
    };
}( jQuery ));
(function( $ ) {

    $.fn.getContentRecommendation = function( uuid, carousel, callback) {
        var path = Routing.generate('service_content_recommendation');
        $.post(path + '/' + uuid).then(function(data) {
            $(carousel).hide();

            if (data) {
                $(carousel).html('');
                $.each( data, function( key, content ) {
                    $(carousel).append(content);
                });

                callback.call(this);
                $(carousel).show();
            }
        });
    }
}( jQuery ));
;(function ( $, window, document, undefined ) {

    var page = 2;
    var lockHome = false;
    var moreElements = true;

    $.fn.infiniteSearch = function(opts) {
        options = $.extend({}, $.fn.infiniteSearch.defaultOptions, opts);
        element = this;

        bindScrollEvent(window);
        return this;
    };

    // Binds scroll to the window element
    function bindScrollEvent(element) {
        $(element).scroll(bindScrollCallback);
    }

    // Function triggered when the user scrolls
    function bindScrollCallback() {
        if ((false === lockHome) && (true == moreElements)) {
            if($(window).scrollTop() + $(window).height() > $(document).height() - 500) {
                $(window).unbind('scroll');
                getMoreItems();
            }
        }
    }

    // Make ajax request to load items and change some variables values to keep working
    function getMoreItems() {
        $('#loadmore').show();
        $.get(options.route + '/' + options.criteria + '/' + page, {type: 'ajax', fl: options.fl}).then(doneFunction);
        lockHome = true;
        page = page + 1;
        bindScrollEvent(window);
    }

    // Updates the DOM with new elements and triggers history and popover function
    function doneFunction(data) {
        var grid = element[0];
        grid.innerHTML += data;
        if('' === data) {
            moreElements = false;
        }
        displayItems();
        if (true === options.logged) {
            $.fn.getContentHistory();
        }
        // SP - 02/02/16: No sé porqué razón, cuando queremos hacer popover sobre los elementos con ese selector
        // Perdemos el handler a los eventos del mouse de los elementos que ya estaban con popover
        // Por eso, por ahora, enviamos siempre, todos los elementos .item-wrapper
        //$.fn.popOverThis({elements: '#grid-result-list div.item-wrapper:not(.popovered)'});
        $.fn.popOverThis({elements: '#grid-result-list div.item-wrapper'});
        lockHome = false;
        $('#loadmore').hide();
    }

    // Add inline-block to display css property to show the new items
    function displayItems() {
        $('.item-wrapper').each(function(index, value) {
            $(value).css('display', 'inline-block');
        });
    }

    $.fn.infiniteSearch.defaultOptions = {
        criteria: '',
        filter: '',
        logged: false,
        route: ''
    };

})( jQuery, window, document );
(function( $ ) {
    var cache                       = kizzy('search');
    var element                     = $('input#input-search');
    var mainSearchContainerSelector = 'main#search-container';
    var mainContainer               = $('main#main-container');
    var divSearchLoader             = $(mainSearchContainerSelector + ' div#search-loader');
    var searchContainerFluidRow     = $(mainSearchContainerSelector + ' div.container-fluid div.row');
    var searchIcon                  = $('.input-group.search button i');

    $.fn.searchStart = function () {
        searchContainerFluidRow.html('');
        $(divSearchLoader).show();
        $('.btn-group-filter a').addClass('btn-disabled');
    };

    $.fn.searchFinish = function () {
        $(divSearchLoader).hide();
        $('.btn-group-filter a').removeClass('btn-disabled');
    };

    /**
     * Inicializa la funcionalidad de búsqueda para las pestañas de resultados.
     */
    $.fn.search = function () {
        $(this).on('click', function() {
            var filter = $(this).data('filter');

            if (undefined == filter) {
                var path = Routing.generate('service_content_search');
            } else {
                var path = Routing.generate('service_' + filter);
            }

            var cacheKey = 'search-' + $(this).data('key') + '-';

            SeachService(path, cacheKey);
        });
    };

    // Search bar
    $('.search .input-group-btn').click(function(){
        if($('#input-search').toggleClass('in').is('.in') == false){
            searchIcon.removeClass('fa-close').addClass('fa-search');
            element.val('').keyup();
        } else {
            element.focus();
            searchIcon.removeClass('fa-search').addClass('fa-close');
        }
    });

    var searchScrollTop = 0;
    $(element).keyup(function(e) {
        var keyCode = event.keyCode || event.which;
        if (!validateKeyPressed(keyCode)) {
            e.preventDefault();

            return false;
        }

        searchMovies(e);
    });

    $(element).keydown(function(e) {
        var keyCode = event.keyCode || event.which;
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);

        if (!validateKeyPressed(keyCode, key)) {
            e.preventDefault();

            return false;
        }
    });

    function validateKeyPressed(keyCode, key) {

        if (keyCode != 8 && keyCode != 32 && keyCode != 46 && (keyCode >= 9 && keyCode <= 46) || (keyCode >= 91 && keyCode <= 93) || (keyCode >= 107 && keyCode <= 221)) {
            console.log('s');
            return false;
        }

        return true;
    }

    var search = 0;
    $(element).autocomplete({
        delay: 500,
        source: function (request, response) {
            $(divSearchLoader).show();
            $(mainSearchContainerSelector + ' #result-text h3 span').html($(element).val().toUpperCase());
            $(mainSearchContainerSelector + ' #no-result-text h3 span').html($(element).val().toUpperCase());

            var route_id    = $('.btn-group-filter a.show').data('filter');

            if (undefined == route_id) {
                var path = Routing.generate('service_content_search');
            } else {
                var path = Routing.generate('service_' + route_id);
            }

            var requestTerm = request.term;
            var cacheKey    = 'search-' + $('.btn-group-filter a.show').data('key') + '-';

            search = Math.random();
            var lastSearch = search;

            $.post(path, {search: requestTerm}).then(function(data) {
                cache.clearExpireds();

                if (lastSearch == search) {
                    displayResults(data, cacheKey, requestTerm);
                }
            });
        },
        minLength: 3
    });

    function searchMovies(e) {
        var regex = new RegExp('^[a-zA-Z0-9]+$');
        var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);
        $.fn.searchStart();

        if($(element).val().length <= 1 && $(mainSearchContainerSelector).is(':visible') == true) {
            //$('.slider').slick('slickPlay').slick('slickNext');
            $(mainContainer).show({
                complete: function() {
                    $(window).scrollTop(searchScrollTop);
                }
            });
            $(mainSearchContainerSelector).fadeOut();
            lockHome = false;
            $(searchContainerFluidRow).html('');
        }

        if ((!e.ctrlKey) && (regex.test(str))) {
            if ($(element).val().length > 2) {
                if($(mainSearchContainerSelector).is(':visible') == false) {
                    searchScrollTop = $(window).scrollTop();
                }
                //$('.slider').slick('slickPause');
                $(mainContainer).hide();
                $(mainSearchContainerSelector).fadeIn();
                lockHome = false;
            }
        } else {
            $(divSearchLoader).hide();
        }
    }

    /**
     * Genera la petición al servicio de búsqueda con el filtro por pestaña activa.
     *
     * @param url
     * @param cacheKey
     * @constructor
     */
    function SeachService(url, cacheKey) {
        var searchContainerFluidRow = $('main#search-container div.container-fluid div.row');
        var cache = kizzy('search');
        var text = $('#input-search').val();
        var cacheContent = cache.get(cacheKey + text);

        $.fn.searchStart();

        // cache
        if (cacheContent) {
            searchContainerFluidRow.html(cacheContent);
            $.fn.searchFinish();
            return;
        }

        $.post(url, {search: text}, function(data) {
            displayResults(data, cacheKey, text);
        }).fail(function() {
            $.fn.searchFinish();
        });
    }

    /**
     * Genera la visualización de contenidos de acuerdo al resultado obtenido.
     *
     * @param data
     * @param cacheKey
     * @param requestTerm
     */
    function displayResults (data, cacheKey, requestTerm) {
        var resultText      = $('#result-text');
        var noResultText    = $('#no-result-text');

        searchContainerFluidRow.html('');

        $.fn.googleAnalyticsSendEvent({
            'category': 'busqueda',
            'action': 'request',
            'label': requestTerm
        });

        // Resultados diferentes a peliculas
        if (true === data.hasOwnProperty('Data')) {
            if (true === data.Success) {
                searchContainerFluidRow.html('<ul class="panel-info panel-detail">');
                $.each(data.Data, function(k, i) {
                    searchContainerFluidRow.append('<a class="tag" href=" ' + i.url + ' ">' + i.name + '</a> ');
                });
                searchContainerFluidRow.append('</ul>');

                var cacheTime = 1000 * 60 * 5;
                cache.set(cacheKey + requestTerm, searchContainerFluidRow.html(), cacheTime);
            } else {
                $(resultText).hide();
                $(noResultText).show();
            }
        }

        // Resultados para peliculas
        if (false === data.hasOwnProperty('Data')) {
            $.each(data, function (key, content) {
                searchContainerFluidRow.append(content);
            });

            if (data.length > 0) {
                $(resultText).show();
                $(noResultText).hide();
                $.fn.popOverThis({'elements': $(mainSearchContainerSelector + ' div.container-fluid div.row .item-wrapper')});
                $(window).scrollTop(0);
            } else {
                $(resultText).hide();
                $(noResultText).show();
            }
            $(mainContainer).hide();
            $(mainSearchContainerSelector).fadeIn();
            lockHome = true;

            var cacheTime = 1000 * 60 * 5;
            cache.set(cacheKey + requestTerm, searchContainerFluidRow.html(), cacheTime);
        }

        $.fn.searchFinish();
    }
}( jQuery ));
(function( $ ) {

    $.fn.facebookShare = function( detail_url, quote ) {

        FB.ui({
            method: 'share',
            href: detail_url,
            quote: quote
        }, function(response){});

        return this;
    };

    $.fn.tweetSomething = function ( options ) {
        window.open('http://twitter.com/share?url=' + options.url + '&text=' + options.text, 'twitterwindow', 'height=450, width=550, top='+($(window).height()/2 - 225) +', left='+$(window).width()/2 +', toolbar=0, location=0, menubar=0, directories=0, scrollbars=0');
    };

    // Binds click event on tweet button
    $(document).on('click', '.tweet-btn', function(e) {
        e.preventDefault();
        $.fn.googleAnalyticsSendEvent({
            category: 'social-plugins',
            action: 'share',
            label: 'twitter_' + $(this).data('item')
        });

        $.fn.tweetSomething({
            url: encodeURIComponent($(this).data('url')),
            text: encodeURIComponent($(this).data('text'))
        });
    });

    $(document).on('click', '.fb-share-btn', function(e) {
        e.preventDefault();
        $.fn.googleAnalyticsSendEvent({
            category: 'social-plugins',
            action: 'share',
            label: 'facebook_' + $(this).data('item')
        });
        
        var finalQuote =  $(this).data('quote') + ' ' + $(this).data('url');
        $.fn.facebookShare($(this).data('detailurl'), finalQuote );
    });

}( jQuery ));
;(function ( $, window, document, undefined ) {

    // Prevents the click on the name in the navbar
    $('#user-name-button').click(function(e){
        e.preventDefault();
    });

})( jQuery, window, document );
(function( $ ) {

    $.fn.getParameterByName = function( name ) {
        var newName = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + newName + "=([^&#]*)"),
                results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    };

    $.fn.getSelector = function( element ) {
        var pieces = [];

        for (; element && element.tagName !== undefined; element = element.parentNode) {
            if (element.className) {
                var classes = element.className.split(' ');
                for (var i in classes) {
                    if (classes.hasOwnProperty(i) && classes[i]) {
                        pieces.unshift(classes[i]);
                        pieces.unshift('.');
                    }
                }
            }
            if (element.id && !/\s/.test(element.id)) {
                pieces.unshift(element.id);
                pieces.unshift('#');
            }
            pieces.unshift(element.tagName);
            pieces.unshift(' > ');
        }

        return pieces.slice(1).join('');
    };

    // Funcionalidades para cookies
    $.fn.createCookieDefault = {
        name    : '',
        value   : '',
        days    : false,
        hours   : false,
        minutes : false
    };

    $.fn.createCookie = function (opts) {
        options = $.extend({}, $.fn.createCookieDefault, opts);
        var expirationTime = 0;
        if (false !== options.minutes) {
            expirationTime += options.minutes * 60 * 1000;
        }
        if (false !== options.hours) {
            expirationTime += options.hours * 60 * 60 * 1000;
        }
        if (false !== options.days) {
            expirationTime += options.days * 24 * 60 * 60 * 1000;
        }

        var date = new Date();
        date.setTime(date.getTime()+(expirationTime));
        var expires = "; expires="+date.toGMTString();

        document.cookie = options.name+"="+options.value+expires+"; path=/";
    }

    $.fn.readCookie = function (name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for(var i=0;i < ca.length;i++) {
            var c = ca[i];
            while (c.charAt(0)==' ') c = c.substring(1,c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
        }
        return null;
    }

    $.fn.eraseCookie = function (name) {
        $.fn.createCookie({
            name    : name,
            value   : '',
            minutes : -1
        });
    }

}( jQuery ));
;(function ( $, window, document, undefined ) {

    $.fn.playereable = function(opts) {
        var options = $.extend({}, $.fn.infiniteSearch.defaultOptions, opts);
        var eventData = {};
        var path = Routing.generate('content_play', {hash: options.hash});

        var idBackRoute = 'movie_content_detail';
        if (options.contentType === 'Serie') {
            idBackRoute = 'episode_content_detail';
        }

        var back_path = Routing.generate(idBackRoute, {
            slug: options.slug,
            uuid: options.uuid
        });

        var vodPlayer = {};

        if(videojs.players.hasOwnProperty($(this).attr('id')) === true) {
            vodPlayer = videojs.players[$(this).attr('id')];
        } else {
            vodPlayer = videojs($(this).attr('id'), {
                language: options.language
            }, function() {
                 if(vodPlayer.textTracks()) {
                    var tracks = vodPlayer.textTracks();
                    if (tracks[0]) {
                        tracks[0].mode = 'showing';
                    }
                }

                if(options.poster !== false) {
                    vodPlayer.poster(options.poster);
                }
            });
        }

        videojs.addLanguage('es', {
            "subtitles off": "Sin subtítulos"
        });

        vodPlayer.currentTime(options.currentTime);
        vodPlayer.ga();

        if(options.tracking === true) {
            vodPlayer.timeEvent({
                interval: options.interval
            });
        }

        if (options.src !== false) {
            vodPlayer.src({
                'type': options.type,
                'src': options.src,
            });
        }

        // Push inside the array of data all static data.
        // Options comes from the playereable call
        eventData.ReproductionId = options.reproductionId;
        eventData.Uuid = options.uuid;
        
        vodPlayer.on('userinactive', function() {
            if (false === vodPlayer.paused()) {
                $('.video-js-title').removeClass('show').addClass('hide');
            }
        });

        vodPlayer.on('ended', function() {
            $('.video-js-title').removeClass('hide').addClass('show');
            vodPlayer.loadingSpinner.show();
            vodPlayer.load();
            if (true === options.redirect) {
                window.document.location.href = back_path;
            }
            if (true === options.reload) {
                window.document.location.reload();
            }
        });

        vodPlayer.on('useractive', function() {
            if (false === vodPlayer.paused()) {
                $('.video-js-title').removeClass('hide').addClass('show');
            }
        });

        $(document).on('click', '#vid1_html5_api, .vjs-play-control', function() {
            if (true === vodPlayer.paused()) {
                $('.video-js-title').removeClass('hide').addClass('show');
            }
        });

        vodPlayer.on('timeEvent', function(event) {
            eventData.eventName = 'CurrentTime';
            eventData.CurrentTime = this.currentTime();
            eventData.Duration = this.duration();
            $.post(path, JSON.stringify(eventData)).then(function(data) {
            });
        });
    };

    $.fn.playereable.defaultOptions = {
        currentTime     : 0,
        reproductionId  : 0,
        slug            : '',
        contentType     : 'Película',
        uuid            : 0,
        hash            : '',
        type            : 'application/dash+xml',
        src             : false,
        language        : 'es',
        tracking        : false,
        interval        : 15,
        poster          : false,
        redirect        : true,
        reload          : false
    };

})( jQuery, window, document );
(function( $ ) {
    $.fn.submitHandler  = [];

    $.fn.keyUpEvents    = [];

    $.fn.paymentForm    = null;

    $.fn.paymentdefaultOptions = {
        form                : '',
        gateway             : '',
        labelSaveButton     : 'Confirmar suscripción'
    };

    /**
     * paymentFormInit
     *
     * Inicializa el formulario de pagos.
     *
     * @param opts
     */
    $.fn.paymentFormInit = function(opts) {
        $.fn.paymentdefaultOptions = options = $.extend({}, $.fn.paymentdefaultOptions, opts);

        $.fn.paymentForm = $('#' + options.form).validate({
            errorClass: 'text-danger',
            errorElement: 'p',
            errorPlacement: function(error, element) {
                var that = element[0];
                if ($(that).attr('name') === 'group[payment_product]') {
                    error.insertBefore('.custom-radio.credit-cards');
                } else {
                    error.insertAfter(element);
                }
            },
            onkeyup: function(a, b, c){
                $.fn.paymentKeyUpEvent(a, b, c);
                $.fn.enableSendButton();
            },
            onfocusout: function(element, b, c) {
                this.element(element);
                $.fn.paymentKeyUpEvent(element, b, c);

                $.fn.enableSendButton();
            },
            submitHandler: function(form) {
                $.fn.paymentRestoreButton();
                $.fn.paymentSendingForm();
                $.fn.submitPayment(form).then(function(response){
                    if (true === response) {
                        form.submit();
                    }
                });
            }
        });

        $('#' +$.fn.paymentdefaultOptions.form + ' *[data-rule-required="true"]:visible').on('change', function(){
            $.fn.enableSendButton();
        });

        $.fn.enableSendButton();
    };

    /**
     * Retorna el ID del botón para el formulario activo
     * @returns {*}
     */
    $.fn.setActiveSubmitButton = function () {
        $.fn.paymentdefaultOptions.saveButton = $('.panel-collapse.in').find('button[type="submit"]').attr('id') || '';
    };

    $.fn.paymentRestoreButton = function() {
        $('#' + $.fn.paymentdefaultOptions.saveButton).prop('disabled', false).html($.fn.paymentdefaultOptions.labelSaveButton);
        $('#loading-button').addClass('hidden');
    };

    $.fn.paymentSendingForm = function() {
        $('#' + $.fn.paymentdefaultOptions.saveButton).prop('disabled', true).html('Procesando...').append($('<i id="loading-button" class="fa fa-circle-o-notch fa-spin fa-1x fa-fw hidden"></i>'));
        $('#loading-button').removeClass('hidden');
    };

    /**
     * function enableSendButton
     *
     * Habilita el botón para enviar el formulario si los campos requeridos del formulario activo son completados.
     */
    $.fn.enableSendButton = function() {
        $.fn.setActiveSubmitButton();

        var complete = true;
        $('#' +$.fn.paymentdefaultOptions.form + ' *[data-rule-required="true"]:visible').each(function(){
            if ('' === $.trim($(this).val())){
                complete = false;
            }
        });

        if (true === complete) {
            $('#' +$.fn.paymentdefaultOptions.form + ' *[data-rule-required="true"]:visible').each(function(){
                if (false === $(this).valid()){
                    complete = false;
                }
            });

            if (true === complete) {
                $('#' + $.fn.paymentdefaultOptions.saveButton).attr('disabled', false);
            } else {
                $('#' + $.fn.paymentdefaultOptions.saveButton).attr('disabled', true);
            }
        } else {
            $('#' + $.fn.paymentdefaultOptions.saveButton).attr('disabled', true);
        }
    };

    /**
     * function addPaymentHandler
     *
     * Agrega una promesa de ejecución a la lista submitHandler.
     * La promesa debe retornar un valor de tipo boolean, TRUE en caso de éxito.
     *
     * La lista se ejecuta al solicitar enviar el formulario, si todas las promesas se ejecutan con éxito
     * el formulario es enviado, de lo contrario se debe visualizar el detalle del error.
     *
     * @param submitHandler
     */
    $.fn.addPaymentHandler = function(submitHandler) {
        if ('function' === typeof submitHandler) {
            $.fn.submitHandler.push(submitHandler);
        } else {
            console.log(submitHandler + ' No se una función válida.');
        }
    };

    /**
     * function submitPayment
     *
     * retorna una promesa de ejecución de funciones registradas en la lista submitHandler.
     *
     * @param form
     * @returns {*|u}
     */
    $.fn.submitPayment = function(form) {
        return new Promise(function(resolve, reject) {
            var toSubmit = true;
            var counter = 0;

            $.fn.submitHandler.forEach(function(submitFunction){
                if ('function' === typeof submitFunction) {
                    submitFunction.call(this, form).then(function(response){
                        counter++;

                        if(false === response){
                            toSubmit = false;
                        }

                        if (counter === $.fn.submitHandler.length && true === toSubmit) {
                            resolve(true);
                        }

                        if (counter === $.fn.submitHandler.length && false === toSubmit) {
                            reject(false);
                        }
                    });
                }
            });
        });
    };

    /**
     * function addKeyUpEvent
     *
     * Agrega una función a la lista keyUpEvents.
     *
     * @param keyUpEvent
     */
    $.fn.addKeyUpEvent = function(keyUpEvent) {
        if ('function' === typeof keyUpEvent) {
            $.fn.keyUpEvents.push(keyUpEvent);
        } else {
            console.log(keyUpEvent + ' No se una función válida.');
        }
    }

    /**
     * function paymentKeyUpEvent
     *
     * Ejecuta la las funciones registradas en la lista keyUpEvents ante el evento KeyUp de los inputs validados del formulario.
     *
     * @param a
     * @param b
     * @param c
     */
    $.fn.paymentKeyUpEvent = function(a, b, c) {
        $.fn.keyUpEvents.forEach(function(keyUpEvent){
            if ('function' === typeof keyUpEvent) {
                keyUpEvent.call(this, a, b, c);
            }
        });
    }
})( jQuery, window, document );
(function( $ ) {
    $.fn.GlobalCollecClient = null;
    $.fn.options = null;

    $.fn.GC_setOptions = function(options) {
        $.fn.options = $.extend({}, $.fn.GC_default, options);
    };

    $.fn.setGlobalCollectClientClient = function(GlobalCollectClient) {
        if (!GlobalCollectClient) {
            throw 'Se requiere un cliente de Global Collect válido.';
            return false;
        }

        $.fn.GlobalCollecClient = GlobalCollectClient;
    };

    $.fn.GC_init = function(GlobalClient, options) {
        $.fn.setGlobalCollectClientClient(GlobalClient);
        $.fn.GC_setOptions(options);

        /** Formatos por default. Estos valores serán modificados dinámicamente */
        $('#'+$.fn.options.cardNumber).formatter({
            'pattern': "{{9999}} {{9999}} {{9999}} {{9999}}",
            'persistent': false
        });

        $('#'+$.fn.options.cvv).formatter({
            'pattern': "{{9999}}",
            'persistent': false
        });

        //mobile
        $('#'+$.fn.options.cardNumber).mask('9999 9999 9999 9999');
        $('#'+$.fn.options.cvv).mask('9999');

        if (0 < parseInt($('#' + $.fn.options.paymentProduct).val())) {
            $('input[type="radio"][value="'+$('#' + $.fn.options.paymentProduct).val()+'"]').click();
        } else {
            $('input[type="radio"][value="1"]').click();
        }

        $('#'+$.fn.options.cardNumber)
            .off('keyup')
            .on('keyup change focusout', function() {
                if (6 <= $.trim($('#' + $.fn.options.cardNumber).val().replace(/\s/g, '')).length) {
                    $.fn.validateCreditCard();
                } else {
                    $('.credit_card_processing #logotipo img').remove();
                }
            });

        $.fn.validateCreditCard();
    };

    $.fn.validateCreditCard = function(element) {
        $.fn.cleanFormats();
        if ('' === $.trim($('#' + $.fn.options.cardNumber).val())) {
            return false;
        }
        $('.credit_card_processing #checked').addClass('hidden');

        var paymentForm = $.fn.paymentForm;

        var bin_credit_card = $.trim($('#' + $.fn.options.cardNumber).val().replace(/\s/g, '')).substring(0, 6);

        if (-1 !== $.fn.options.invalidBinCards.indexOf(bin_credit_card.toString())) {
            paymentForm.showErrors({
                'vod_base_payment_form[gateways][global_collect][credit_card_number]': 'Número de tarjeta no permitido.'
            });

            $('.credit_card_processing #logotipo img').remove();

            $('#' + $.fn.paymentdefaultOptions.saveButton).prop('disabled', false);

            $('.credit_card_processing #checked, .credit_card_processing #loading').addClass('hidden');

            return false;
        }

        if (true === $('#'+$.fn.options.cardNumber).valid()) {
            $('.credit_card_processing #logotipo img').remove();
            $('.credit_card_processing #loading').removeClass('hidden');

            var paymentForm = $.fn.paymentForm;

            var bin_credit_card = $.trim($('#' + $.fn.options.cardNumber).val().replace(/\s/g, '')).substring(0, 6);

            if (-1 !== $.fn.options.invalidBinCards.indexOf(bin_credit_card.toString())) {
                paymentForm.showErrors({
                    'vod_base_payment_form[gateways][global_collect][credit_card_number]': 'Número de tarjeta no permitido.'
                });

                $('#' + $.fn.paymentdefaultOptions.saveButton).prop('disabled', false);

                $('.credit_card_processing #checked, .credit_card_processing #loading').addClass('hidden');

                return false;
            }

            if (-1 === $.fn.options.invalidBinCards.indexOf(bin_credit_card.toString())) {
                $.fn.GlobalCollecClient.session.getIinDetails($('#' + $.fn.options.cardNumber).val(), $.fn.GlobalCollecClient.paymentDetails()).then(function (response) {
                    $('.credit_card_processing #loading').addClass('hidden');

                    if (!response) {
                        paymentForm.showErrors({
                            'vod_base_payment_form[gateways][global_collect][credit_card_number]': 'Número de tarjeta no permitido.'
                        });
                        $('#' + $.fn.paymentdefaultOptions.saveButton).prop('disabled', false);
                        return false;
                    }

                    if ('UNSUPPORTED' === response.status) {
                        paymentForm.showErrors({
                            'vod_base_payment_form[gateways][global_collect][credit_card_number]': 'El número de tarjeta no se encuentra habilitado.'
                        });
                        $('#' + $.fn.paymentdefaultOptions.saveButton).prop('disabled', false);
                        return false;
                    }

                    if ('SUPPORTED' === response.status) {
                        console.log('Country Code: ' + response.countryCode.toString());
                        if (-1 === $.fn.options.countryCodeEnabled.indexOf(response.countryCode.toString())) {
                            paymentForm.showErrors({
                                'vod_base_payment_form[gateways][global_collect][credit_card_number]': $.fn.options.formMessage.invalidCountryCode
                            });

                            $('#' + $.fn.paymentdefaultOptions.saveButton).prop('disabled', false);

                            $('.credit_card_processing #checked, .credit_card_processing #loading').addClass('hidden');

                            return false;
                        }
                        
                        $.fn.setFormats(response.paymentProductId);

                        $('.credit_card_processing #logotipo img').remove();

                        var payment_product = $.fn.GlobalCollecClient.getPaymentProduct(response.paymentProductId);

                        if (false !== payment_product) {
                            $('#' + $.fn.options.paymentProduct).attr('value', response.paymentProductId);

                            if ('American Express' === $('.credit-cards img[data-product-id="'+response.paymentProductId+'"]').attr('alt')) {
                                $('img.common-card').addClass('hidden');
                                $('img.amex-card').removeClass('hidden');
                            } else {
                                $('img.common-card').removeClass('hidden');
                                $('img.amex-card').addClass('hidden');
                            }

                            paymentForm.showErrors({
                                'vod_base_payment_form[gateways][global_collect][credit_card_number]': null
                            });
                            paymentForm.errorList.pop({
                                'vod_base_payment_form[gateways][global_collect][credit_card_number]': 'Número de tarjeta no permitido.'
                            });

                            $('.credit_card_processing #logotipo').append($('<img src="' + payment_product.logo + '" />'));

                            $('#' + $.fn.options.cardNumber).valid();

                            return true;
                        } else {
                            $('.credit_card_processing #logotipo img').remove();

                            paymentForm.showErrors({
                                'vod_base_payment_form[gateways][global_collect][credit_card_number]': 'Número de tarjeta no permitido.'
                            });

                            $('#' + $.fn.paymentdefaultOptions.saveButton).prop('disabled', false);
                        }
                    }
                }, function (error, a, b, c) {
                    $('.credit_card_processing #logotipo img').remove();

                    if (error.status) {
                        if ('UNKNOWN' === error.status) {
                            $.fn.paymentForm.showErrors({
                                'vod_base_payment_form[gateways][global_collect][credit_card_number]' : 'Número de tarjeta no permitido.'
                            });
                        }
                    }

                    $('#' + $.fn.paymentdefaultOptions.saveButton).prop('disabled', false);
                    $('.credit_card_processing #checked, .credit_card_processing #loading').addClass('hidden');
                });
            }
        }
    };

    $.fn.transaction = function(callback) {
        $.fn.GlobalCollecClient.pay($.fn.options, callback);
    };

    $.fn.setFormats = function(IdPaymentProduct) {
        var inputPaymentProduct = $('.credit-cards').find('img[data-product-id="' + IdPaymentProduct + '"]');

        /*** card number rules and mask format ***/
        if (inputPaymentProduct.data('cardnumber-mask')) {
            $('#' + $.fn.options.cardNumber).formatter().resetPattern(inputPaymentProduct.data('cardnumber-mask'));
            $('#'+$.fn.options.cardNumber).mask(inputPaymentProduct.data('cardnumber-mask').replace(/({)|(})/g,'')); // mobile
        }
        if (inputPaymentProduct.data('cardnumber-min')) {
            var minRule = parseInt(inputPaymentProduct.data('cardnumber-mask').split(" ").length - 3) + parseInt(inputPaymentProduct.data('cardnumber-min'));
            $('#' + $.fn.options.cardNumber).data('rule-minlength', minRule);
            $('#' + $.fn.options.cardNumber).data('msg-minlength', $('#' + $.fn.options.cardNumber).data('msg-minlength').replace(/(\d+)/g, '') + inputPaymentProduct.data('cardnumber-min'));
        }
        if (inputPaymentProduct.data('cardnumber-max')) {
            var maxRule = parseInt(inputPaymentProduct.data('cardnumber-mask').split(" ").length) + parseInt(inputPaymentProduct.data('cardnumber-max'));
            $('#' + $.fn.options.cardNumber).data('rule-maxlength', maxRule);
            $('#' + $.fn.options.cardNumber).data('msg-maxlength', $('#' + $.fn.options.cardNumber).data('msg-maxlength').replace(/(\d+)/g, '') + inputPaymentProduct.data('cardnumber-max'));
        }

        if (inputPaymentProduct.data('cvv-mask')) {
            $('#' + $.fn.options.cvv).formatter().resetPattern(inputPaymentProduct.data('cvv-mask'));
            $('#'+$.fn.options.cvv).mask(inputPaymentProduct.data('cvv-mask').replace(/({)|(})/g,'')); // mobile
        }

        $('#' + $.fn.options.cardNumber).data('rule-luhn', false);
        if (inputPaymentProduct.data('luhn')) {
            $('#' + $.fn.options.cardNumber).data('rule-luhn', true);
        }

        $.fn.cleanFormats();
    };

    $.fn.cleanFormats = function()
    {
        $('#' + $.fn.options.cardNumber).val($.trim($('#' + $.fn.options.cardNumber).val()));
        $('#' + $.fn.options.cvv).val($.trim($('#' + $.fn.options.cvv).val()));
        $('#' + $.fn.options.expirityMonth).val($.trim($('#' + $.fn.options.expirityMonth).val()));
        $('#' + $.fn.options.expirityYear).val($.trim($('#' + $.fn.options.expirityYear).val()));
    }

    $.fn.GC_default = {
        form                : 'global_collect',
        cardNumberFullname  : '',
        paymentProduct      : '',
        cardNumber          : '',
        expirityMonth       : '',
        expirityYear        : '',
        cvv                 : '',
        blobcode            : '',
        invalidBinCards     : false,
        products            : [],
        countryCodeEnabled  : false,
    };
}( jQuery ));

/*** Custom Validators ****/
jQuery.validator.addMethod('luhn', function(value, element, params) {
    var luhnArr = [[0,2,4,6,8,1,3,5,7,9],[0,1,2,3,4,5,6,7,8,9]]
        ,sum = 0;

    value.replace(/\D+/g,"").replace(/[\d]/g, function(c, p, o) {
        sum += luhnArr[ (o.length-p)&1 ][ parseInt(c,10) ];
    });
    return (sum%10 === 0) && (sum > 0);
}, 'valor no valido');

jQuery.validator.addMethod("nospecialch", function(value, element) {
    return this.optional(element) || /^[\s/a-z]+$/i.test(value);
}, "Letters only please");
(function( $ ) {
    $.fn.movistarPinInterval = 0;

    $.fn.movistarGatewayDefaultOptions = {
        pinButton           : '',
        saveButton          : '',
        telephone           : '',
        pin                 : '',
        telephone_fullname  : '',
        endpoint            : 'http://apps.smsconsulting.company/apps.php',
        idService           : '',
        user                : '',
        pass                : ''
    };

    $.fn.MovistarTextPinButton = function() {
        if ($.fn.readCookie('pindisabled')) {
            return 'Reenviar PIN';
        } else {
            return 'Enviar PIN';
        }
    };

    $.fn.movistarGatewayInit = function(opts) {
        $.fn.movistarGatewayDefaultOptions = options = $.extend({}, $.fn.movistarGatewayDefaultOptions, opts);

        if ($.fn.readCookie('pindisabled')) {
            $('#' + options.pinButton).attr('disabled', true);
            $('#' +  $.fn.movistarGatewayDefaultOptions.pinButton).html($.fn.MovistarTextPinButton());
            $('#' +  $.fn.movistarGatewayDefaultOptions.pin).attr('disabled', false);

            $.fn.movistarPinInterval = setInterval(function(){
                if (!$.fn.readCookie('pindisabled')) {
                    $.fn.movistarEnablePinButton();
                    clearInterval($.fn.movistarPinInterval);
                }
            }, 1000);
        } else if (0 < $('#'+$.fn.movistarGatewayDefaultOptions.telephone).val().length) {
            if (true === $('#'+$.fn.movistarGatewayDefaultOptions.telephone).valid()) {
                $.fn.movistarEnablePinButton();
            }
        }

        $('#' + $.fn.movistarGatewayDefaultOptions.pinButton).on('click', function(){
            $.fn.movistarDisablePinButton();

            // Hacemos el llamado a la api de movistar
            var url = Routing.generate('service_ajax_request');

            $.ajax({
                url: url,
                data: 'endpoint='+$.fn.movistarGatewayDefaultOptions.endpoint+'&msisdn='+$('#' + $.fn.movistarGatewayDefaultOptions.telephone).val()+'&idServicio='+$.fn.movistarGatewayDefaultOptions.idService+'&user='+$.fn.movistarGatewayDefaultOptions.user+'&pass='+$.fn.movistarGatewayDefaultOptions.pass,
                method: 'post',
                success: function(response){
                    if (response) {
                        if(0 !== response.code) {
                            $.fn.paymentForm.showErrors({
                                'vod_base_payment_form[gateways][movistar][celular]' : 'Se presentó un error al solicitar el PIN.'
                            });
                            $.fn.movistarEnablePinButton();
                        } else {
                            if (!$.fn.readCookie('pindisabled')) {
                                //Crea cookie para bloquear el boton
                                $.fn.createCookie({
                                    name    : 'pindisabled',
                                    value   : true,
                                    minutes : 2
                                });
                                $.fn.movistarDisablePinButton();
                                setTimeout('$.fn.movistarEnablePinButton()', 120000);
                            }

                            $('#' +  $.fn.movistarGatewayDefaultOptions.pinButton).html($.fn.MovistarTextPinButton());

                            $('#' +  $.fn.movistarGatewayDefaultOptions.pin).attr('disabled', false);

                            $('#send-pin-alert').removeClass('hidden');
                        }
                    } else {
                        $.fn.paymentForm.showErrors({
                            'vod_base_payment_form[gateways][global_collect][credit_card_number]' : 'Se presentó un error al solicitar el PIN.'
                        });
                        $.fn.movistarEnablePinButton();
                    }
                }
            });


        });

        $('#'+$.fn.movistarGatewayDefaultOptions.telephone).mask('9999999999');
        $('#'+$.fn.movistarGatewayDefaultOptions.pin).mask('9999');

        $('#'+$.fn.movistarGatewayDefaultOptions.telephone).on('change', function(){
            if (true === $(this).valid() && !$.fn.readCookie('pindisabled')) {
                $.fn.movistarEnablePinButton();
            } else {
                $.fn.movistarDisablePinButton();
            }
        });

        if (true === $('#' + $.fn.movistarGatewayDefaultOptions.pinButton).valid() && !$.fn.readCookie('pindisabled') && '' !== $('#' + $.fn.movistarGatewayDefaultOptions.pinButton).val()) {
            $.fn.movistarEnablePinButton();
        } else {
            $.fn.movistarDisablePinButton();
        }
    }

    $.fn.movistarDisablePinButton = function() {
        $('#' + $.fn.movistarGatewayDefaultOptions.pinButton).attr('disabled', true);
    };

    $.fn.movistarEnablePinButton = function() {
        $('#' + $.fn.movistarGatewayDefaultOptions.pinButton).attr('disabled', false);
    };

    $.fn.movistarKeyUpEvent = function(a, b, c) {
        if ('movistar' === $('#'+$.fn.paymentdefaultOptions.gateway).val()) {
            if ($(a).attr('id') === $.fn.movistarGatewayDefaultOptions.telephone) {
                $('p.text-danger').remove();
            }
            /*if (true === $('#' + $.fn.paymentdefaultOptions.form).valid()) {
                $('#' + $.fn.paymentdefaultOptions.saveButton).attr('disabled', false);
            }
            if (false === $('#' + $.fn.paymentdefaultOptions.form).valid()) {
                $('#' + $.fn.paymentdefaultOptions.saveButton).attr('disabled', true);

            }*/
        }
    }
}( jQuery ));
(function( $ ) {
    console.log('Hola desde stripe.gateway.js');
}( jQuery ));